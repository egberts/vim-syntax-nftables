#!/usr/sbin/nft -f
# File: element.nft
# Description: A test NFT file to exercise 'element' m syntax highlightings.
#
# base_cmd add_cmd 'element'
# base_cmd create_cmd 'element'
# base_cmd destroy_cmd 'element'
# base_cmd delete_cmd 'element'
# base_cmd get_cmd 'element'
# base_cmd reset_cmd 'element'
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# base_cmd add_cmd 'set'
add table T
add table ip Tip
add table ip6 Tip6
add table inet Tinet
add table netdev Tnetdev
add table bridge Tbridge
add table arp Tarp
# Create a table called 'filter'
table T {
    # Create a dynamic set for blocked IPs
    map M {
        type ipv4_addr : verdict
        flags dynamic
    }
    # Create a chain to filter incoming traffic
    chain C {
        type filter hook input priority 0; policy accept;
        # Drop packets if source IP is in the set
        ip saddr @M drop
    }
}
add element T M { 203.0.113.5: drop }
delete element T M { 203.0.113.5: drop }

table ip Tip {
    # Create a dynamic set for blocked IPs
    map Mip {
        type ipv4_addr : verdict
        flags dynamic
    }
    # Create a chain to filter incoming traffic
    chain Cip {
        type filter hook input priority 0; policy accept;
        # Drop packets if source IP is in the set
        ip saddr @Mip drop
    }
}
add element ip Tip Mip { 203.0.113.5: drop }
delete element ip Tip Mip { 203.0.113.5: drop }

table ip6 Tip6 {
    # Create a dynamic set for blocked IPs
    map Mip6 {
        type ipv6_addr : verdict
        flags dynamic
    }
    # Create a chain to filter incoming traffic
    chain Cip6 {
        type filter hook input priority 0; policy accept;
        # Drop packets if source IP is in the set
        ip6 saddr @Mip6 drop
    }
}
add element ip6 Tip6 Mip6 { fffe::ffff : drop }
delete element ip6 Tip6 Mip6 { fffe::ffff  : drop }

table inet Tinet {
    # Create a dynamic map for both IPv4 and IPv6 addresses → verdict
    map Mip {
        type ipv4_addr : verdict
        flags dynamic
    }
    map Mip6 {
        type ipv6_addr : verdict
        flags dynamic
    }
    chain Cinet {
        type filter hook input priority 0; policy accept;

        # Apply the verdicts from the map
        ip saddr @Mip
        ip6 saddr @Mip6
    }
}
add element inet Tinet Mip { 127.0.0.1 : drop, 10.0.0.1 : drop }
add element inet Tinet Mip6 { fffe::ffff : drop }
delete element inet Tinet Mip { 127.0.0.1 : drop, 10.0.0.1 : drop }
delete element inet Tinet Mip6 { fffe::ffff : drop }

table bridge Tbridge {
    # Create a dynamic map for both IPv4 and IPv6 addresses → verdict
    map Mbridge {
        type ether_addr : verdict
        flags dynamic
    }
    chain Cbridge {
        type filter hook input priority 0; policy accept;

        # Apply the verdicts from the map
        ether saddr vmap @Mbridge
    }
}
add element bridge Tbridge Mbridge { 00:2c:0a:01:01:01 : drop }
delete element bridge Tbridge Mbridge { 00:2c:0a:01:01:01 : drop }

table netdev Tnetdev {
    # Create a dynamic map for both IPv4 and IPv6 addresses → verdict
    map Mnetdev {
        type ether_addr : verdict
        flags dynamic
    }
    chain Cnetdev {
        type filter hook ingress priority 0; policy accept;

        # Apply the verdicts from the map
        ether saddr vmap @Mnetdev
    }
}
add element netdev Tnetdev Mnetdev { 00:2c:0a:01:01:01 : drop }
delete element netdev Tnetdev Mnetdev { 00:2c:0a:01:01:01 : drop }

table arp Tarp {
    # Create a dynamic map for both IPv4 and IPv6 addresses → verdict
    map Marp {
        type ether_addr : verdict
        flags dynamic
    }
    chain Carp {
        type filter hook input priority 0; policy accept;

        # Apply the verdicts from the map
        ether saddr vmap @Marp
    }
}
add element arp Tarp Marp { 00:2c:0a:01:01:01 : drop }
delete element arp Tarp Marp { 00:2c:0a:01:01:01 : drop }



# set_expr->set_block_expr->'element'->add_cmd->base_cmd->line


# variable_expr->set_block_expr->'element'->add_cmd->base_cmd->line

define MY_MAP_ELEMENT = { 10.0.0.1 timeout 1h : continue }
add map ip Tip Mip2 { flags timeout; timeout 1h; type ipv4_addr : verdict; };
add element ip Tip Mip2 $MY_MAP_ELEMENT ;

# set_expr->set_block_expr->'element'->add_cmd->'add'->base_cmd->line
# 'add element' only takes map key-value
# 'add element' will not take anonymous set (that occurs in 'rule'->set_expr, not 'add element')




