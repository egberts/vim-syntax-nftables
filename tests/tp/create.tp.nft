#!/usr/sbin/nft -f
# File: create.nft
# Description: A test NFT file to exercise 'create' Vim syntax highlightings.
#
# Section: base_cmd/ADD/CREATE
# CREATE (create_cmd)
#  create is similar to the add command, but returns
#  an error if the chain already exists.
#
# base_cmd 'create'
# nft_line/nft_base_cmd/nft_base_cmd_create
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# TODO : Finish nft_base_cmd_create_cmd_table_keyword

create table myIpTable 
create table my.IpTable
create table my/IpTable
create table my_IpTable
create table my./_IpTable
create table netdev myNetdevTable
create table bridge myBridgeTable
create table arp myArpTableTable
create table ip myIpTable_Again
create table ip6 myIp6Table 
create table inet myInetTable 

create table myIpTable2 { flags dormant; }
create table netdev myNetdevTable2 { flags dormant; }
create table bridge myBridgeTable2 { flags dormant; }
create table arp myArpTable2 { flags dormant; }
create table ip myIpTable2_duplicate { flags dormant; }
create table ip6 myIp6Table2 { flags dormant; }
create table inet myInetTable2 { flags dormant; }


# Two kinds of a base chain for syntax handling:
#  1. Unidentified family chain
#  2. Explictly-identified family chain

# create chain <chain_spec>
add table ip myIpTable3
add table ip6 myIp6Table3
add table inet myInetTable3
add table netdev myNetdevTable3
add table bridge myBridgeTable3
add table arp myArpTable3
create chain myIpTable3 myIpChain
create chain netdev myNetdevTable3 myNetdevTable 
create chain bridge myBridgeTable3 myBridgeChain 
create chain arp myArpTable3 myArpChain 
create chain ip myIpTable3 myIpChain2
create chain ip6 myIp6Table3 myIp6Chain2
create chain inet myInetTable3 myInetChain2

# create chain <chain_spec> { <chain_block> }
add table ip myIpTable4
create chain myIpTable4 myIpChain10 { type filter hook prerouting priority 0; policy drop; } ;

create chain myIpTable4 myIpChain12 { type filter hook forward priority 0; policy drop;}
create chain myIpTable4 myIpChain13 { type filter hook output priority 0; policy drop;}
create chain myIpTable4 myIpChain14 { type filter hook postrouting priority 0; policy drop;}

add table arp myArpTable
create chain arp myArpTable myArpChain20 { type filter hook input priority 0; policy accept; }
create chain arp myArpTable myArpChain21 { type filter hook input priority 0; policy accept; }
create chain arp myArpTable myArpChain22 { type filter hook output priority 0; policy accept; }

add table bridge myBridgeTable
create chain bridge myBridgeTable myBridgeChain30 { type filter hook input priority 0; policy accept; }
create chain bridge myBridgeTable myBridgeChain31 { type filter hook output priority 0; policy accept; }

add table bridge myNetdevTable
create chain netdev myNetdevTable myNetdevChain1
create chain netdev myNetdevTable myNetdevChain2 { type filter hook ingress device virbr0 priority 0; policy accept; }
create chain ip myIpTable myIpChain10 { type filter hook prerouting priority 0; policy accept; }
create chain ip myIpTable myIpChain11 { type filter hook input priority 0; policy accept; }
create chain ip myIpTable myIpChain12 { type filter hook forward priority 0; policy accept; }
create chain ip myIpTable myIpChain13 { type filter hook output priority 0; policy accept; }
create chain ip myIpTable myIpChain14 { type filter hook postrouting priority 0; policy accept; }
create chain ip myIpTable myIpChain15 { type nat hook prerouting priority 0; policy accept; }
create chain ip myIpTable myIpChain16 { type nat hook input priority 0; policy accept; }
create chain ip myIpTable myIpChain17 { type nat hook output priority 0; policy accept; }
create chain ip myIpTable myIpChain18 { type nat hook postrouting priority 0; policy accept; }
create chain ip myIpTable myIpChain19 { type route hook output priority 0; policy accept; }

create chain ip6 myIp6Table myIp6Chain20 { type filter hook prerouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain21 { type filter hook input priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain22 { type filter hook forward priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain23 { type filter hook output priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain24 { type filter hook postrouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain25 { type nat hook prerouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain26 { type nat hook input priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain27 { type nat hook output priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain28 { type nat hook postrouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain29 { type route hook output priority 0; policy accept; }

create chain inet myInetTable myInetChain30 { type filter hook prerouting priority 0; policy accept; }
create chain inet myInetTable myInetChain31 { type filter hook input priority 0; policy accept; }
create chain inet myInetTable myInetChain32 { type filter hook forward priority 0; policy accept; }
create chain inet myInetTable myInetChain33 { type filter hook output priority 0; policy accept; }
create chain inet myInetTable myInetChain34 { type filter hook postrouting priority 0; policy accept; }
create chain inet myInetTable myInetChain35 { type nat hook prerouting priority 0; policy accept; }
create chain inet myInetTable myInetChain36 { type nat hook input priority 0; policy accept; }
create chain inet myInetTable myInetChain37 { type nat hook output priority 0; policy accept; }
create chain inet myInetTable myInetChain38 { type nat hook postrouting priority 0; policy accept; }
create chain inet myInetTable myInetChain39 { type route hook output priority 0; policy accept; }

create chain netdev myNetdevTable myIpChain40 { type filter hook ingress devices = { eno2, lo, wlo1 } priority 0; policy drop;}

add table my_filter_table
# create set <set_spec> { <set_block> }
create set my_filter_table my_ssh_meter { type ipv4_addr . inet_proto; flags dynamic ;}


# create map <set_spec> { <map_block> }


# create flowtable <flowtable_spec> { <flowtable_block> }
create flowtable ip myIpTable myIpFT71 { hook ingress priority 0; devices = { eno2, lo } ; }
create flowtable ip6 myIp6Table myIp6FT72 { hook ingress priority 0; devices = { eno2, wlo1 } ; }
create flowtable inet myInetTable myInetFT73 { hook ingress priority 0; devices = { eno2, lo, wlo1 } ; }

# create element <set_spec> <set_block_expr>
#create element myIpTable myIpSet { element, element }


# create counter <obj_spec> close_scope_counter 
# create counter <obj_spec> counter_obj counter_config close_scope_counter  
create counter ip myIpTable https-filter100
create counter ip myIpTable https-filter101
create counter netdev myNetdevTable https-filter102
create counter bridge myBridgeTable https-filter103
create counter arp myArpTable https-filter104
create counter ip myIpTable https-filter105
create counter ip6 myIp6Table https-filter106
create counter inet myInetTable https-filter107

# create quota <obj_spec> <quota_odj> <quota_config>
add table myQuotaIpTable
add table ip6 myQuotaIp6Table
add table inet myQuotaInetTable
add table netdev myQuotaNetdevTable
add table bridge myQuotaBridgeTable
add table arp myQuotaArpTable
create quota myQuotaIpTable https-quota over 25 mbytes
###create quota myQuotaIpTable http-quota { over 25 mbytes };
###create quota myQuotaIpTable ssh-quota { 10 kbytes }
create quota netdev myQuotaNetdevTable http-quota over 25 mbytes;
create quota bridge myQuotaBridgeTable http-quota over 25 mbytes
create quota arp myQuotaArpTable http-quota over 25 mbytes
create quota ip myQuotaIpTable http-quota over 25 mbytes
create quota ip6 myQuotaIp6Table http-quota until 525 kbytes
create quota inet myQuotaInetTable http-quota over 25 mbytes

# create limit <obj_spec> <limit_obj> <limit_config>
create limit myIpTable myIpLimit80 rate 1/second
create limit netdev myNetdevTable myNetdevLimit rate 1/minute
create limit bridge myBridgeTable myBridgeLimit rate 1/hour
create limit ip myIpTable myIpLimit83 rate 1/day
create limit ip6 myIp6Table myIp6Limit84 rate 1/week
create limit inet myInetTable myInetLimit85 rate 1/second
create limit myIpTable myIpLimit86 rate 1/second burst 15 packets
###create limit myIpTable myIpLimit87 rate 1/second burst 1514 bytes

# create secmark obj_spec secmark_obj secmark_config close_scope_secmark
# Bison: CREATE SECMARK obj_spec secmark_obj secmark_config { secmark_block } close_scope_secmark 
# create secmark myIpTable mySecMark "SELinux-security-context"
# Bison: CREATE SECMARK obj_spec secmark_obj secmark_config { common_block } close_scope_secmark 
# create secmark myIpTable sshtag "system_u:object_r:ssh_server_packet_t:s0"

# create synproxy obj_spec synproxy_obj synproxy_config close_scope_synproxy
#   Bison: ADD SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy 
create synproxy ip myIpTable synproxy_obj90 mss 1492 wscale 5;
create synproxy ip6 myIp6Table synproxy_obj91 mss 1498 wscale 6;
create synproxy inet myInetTable synproxy_obj92 mss 1496 wscale 4;
# create synproxy arp myArpTable synproxy_obj93 mss 1512  wscale 2;
create synproxy bridge myBridgeTable synproxy_obj94 mss 1518 wscale 3;
# create synproxy netdev myNetdevTable synproxy_obj95 mss 1593 wscale 1
#   Bison: SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy (w/o 'add')
###create synproxy myTable https-synproxy {
###    mss 1460
###    wscale 7
###    timestamp sack-perm
###}
###create synproxy myTable other-synproxy {
###    mss 1460
###    wscale 5
###}

table inet my_table {
    synproxy my_synproxy {
        mss 1460
        wscale 7
        timestamp sack-permitted
    }
}

