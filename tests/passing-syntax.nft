#!/usr/sbin/nft -f
# File: all-chain.nft
# Description: A false positive test NFT file to exercise 'chain' Vim syntax highlightings.
#
# Identifiers begin with an standard practice of allowing
# alphabetic character (a-z,A-Z) for first character followed
# by zero or more alphanumeric characters (a-z,A-Z,0-9),
# characters dash (-), and underscore (_).
#
# Dot, backslash, forward slash are discourage as dot
# confused nftable concatenation effort.
#
# base_cmd add_cmd 'chain'
# base_cmd 'add' add_cmd 'chain'
# base_cmd add_cmd 'table' TABLE_ID '{' table_block 'chain' CHAIN_ID '{' chain_block
# base_cmd 'add' add_cmd 'table' TABLE_ID '{' table_block chain' CHAIN_ID {' chain_block
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_table/nft_add_table_chain_block policy_spec
#
################################################################################
# true positive test (properly hightlighted correctly; has good content; perfect
################################################################################

add table T;
add chain T C;

table A-   # invalid character

# base_cmd add_cmd 'table' table_spec table_block chain_block common_block 'include'
table T {
    chain C {
        include "../include/rule-counter.nft"
    }
};
table T {
    chain C {
        define A = 1
    }
}
table T { chain C {
;
    define A = 1 
    redefine A = 1 ;
    undefine A;
    define last = 1 ;
 # not an ideal variable name (reserved word)
    redefine last = 1 ;
    define A = {} ; 
    redefine A = { 127.0.0.1 } ;  
;
    };
};
# base_cmd add_cmd 'table' table_spec table_block chain_block common_block 'redefine'
table T { define A = 1; chain C { redefine A = { 127.0.0.1 } ; } ; } ;
table T { chain C { redefine A = 1; }; };

table T { chain C { redefine A = 1; }; }


add table T;

table T { chain C {
    redefine A = 1
    redefine A = 1 ;
    } ;
}
# base_cmd add_cmd 'table' table_spec table_block chain_block common_block 'undefine'

table xxxx { chain C { undefine abc ; } ; }
table T { chain C {
    undefine A
    undefine B 
    }
}

# base_cmd add_cmd 'table' table_spec table_block chain_block common_block 'comment'
# base_cmd add_cmd 'table' table_spec table_block 'comment' string



table xxxx { chain C { comment "test"; }; }
table arp xxxx { chain C { comment test;  }; }


# base_cmd add_cmd 'table' table_spec table_block chain_block flags_spec 'type'








# base_cmd add_cmd 'table' table_spec table_block 'chain' chain_block
table T {
    chain C {
    }
}

table T {
    chain C {
    }
}

# base_cmd add_cmd 'table' table_spec table_block 'rule' rule

######################

table xxxx {
    chain C { comment test;
    include "../include/rule-counter.nft";
}; };



table T { chain C { }; };
table T { chain C { }; chain D { }; };




table T { chain C { }; };
table T { chain C { }; chain D { }; };

define MY_DEVICE = eth0
define SECOND_DEVICE = eth1
table T { chain input { type filter hook input priority 0; policy drop; iifname $MY_DEVICE accept;  }; };
table T { chain nat { type nat hook prerouting priority 0; policy drop; iifname $MY_DEVICE accept;  }; };
undefine MY_DEVICE

table bridge myBridge { flags dormant; }
table arp myArpTable { flags dormant; }
table ip myIpTable { flags dormant; }
table ip6 myIp6Table { flags dormant; }
table inet myInetTable { flags dormant; }
# END OF WORK

table xxxx { undefine abc; chain last { undefine abc; }; };







define MY_PRIORITY = 100
table xxxx { chain last {
    undefine abc;
    include "../include/rule-counter.nft";
    define a = 123;
}; };
table arp A0b_._/RP_TABLE {
    chain ARP_INPUT_FILTER {
        define a = 123;
        type filter hook input priority 100;
        policy drop;
    }
    chain ARP_INPUT_FILTER {
        counter log return
    }
    chain workstation_arp_filter_output {
        type filter hook output priority 0;
        policy drop;
        counter log drop
    }
}

define MY_DEVICE = eno2
table netdev A {
    chain a { 
        type filter hook ingress device lo priority -100; policy accept
        udp dport 53 ether type 0x8006 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set numgen inc mod 2 map {  0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to $MY_DEVICE;
    };


    chain b { }
}
table netdev A {
    chain a { };
    chain b { };
    chain c { };
}
table netdev A {
    chain a { }; chain b { }; chain c { };
}

table inet filter {
	chain input {
		type filter hook input priority 0; policy drop;

		ip protocol icmp icmp type echo-request limit rate over 1/minute burst 4 packets  drop
		ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate over 1/minute burst 4 packets drop

		# ct state {established, related} accept
		ip protocol tcp ct state invalid accept;

		iifname lo accept

		ip protocol icmp accept
		ip6 nexthdr icmpv6 accept

	}
}


table inet INET_TABLE {
  define interface_name2 = "br0"
    chain workstation_inet_filter_input {
        # Things that make this chain unique (input, filter)
        type filter hook input priority 0;
        policy drop;
        iif lo accept
        # Things that make this chain unique ('eth0', input, filter)
        # meta iifname != $interface_name2 drop;  # workstation wants all intfs
        # Let things back in if they've been established before new firewall
        ct state established,related accept;
        #  DNS 
        tcp dport 53 counter accept 
        udp dport 53 counter accept 
        #  Multicast DNS 
        tcp dport 5353 counter accept
        # RFC 6092 - Simple Security in IPv6 Gateway CPE
        # recommends that the DEFAULT
        #   operating mode for residential IPv6 simple security be to treat
        #   Generic Packet Tunneling [RFC2473] and similar protocols as opaque
        #   transport layers, i.e., inbound tunnel initiations are denied and
        #   outbound tunnel initiations are accepted.

        # To facilitate the use of IPsec in support of IPv6
        # mobility, the Internet Key Exchange (IKE) protocol [RFC5996] and the
        # Host Identity Protocol (HIP) [RFC5201] should also be permitted in
        # the DEFAULT operating mode.

        #  Workstation
        icmp type {
            destination-unreachable, 
            time-exceeded, 
            parameter-problem
        } counter accept

        # Router/Gateway
        icmp type {
            destination-unreachable, 
            redirect, 
            time-exceeded, 
            parameter-problem, 
            router-advertisement, 
            router-solicitation
            } counter accept

        # All ICMP
        icmp type {
            echo-reply, 
            destination-unreachable, 
            source-quench, redirect, 
            echo-request, 
            time-exceeded, 
            parameter-problem, 
            timestamp-request, 
            timestamp-reply, 
            info-request, 
            info-reply, 
            address-mask-request, 
            address-mask-reply, 
            router-advertisement, 
            router-solicitation
            } counter accept

        tcp dport 25 counter accept    # smtp
        tcp dport 465 counter accept   # submission
        # SSH server
        tcp dport ssh counter accept 
        
        tcp dport 514 counter accept    # syslog
        tcp dport 6514 counter accept   # secured syslog

        tcp dport 80 counter accept 
        tcp dport 443 counter accept 

        # IP-specific
        # meta ip goto workstation_inet_filter_input_ip
        # meta ip6 goto workstation_inet_filter_input_ip6
        # meta vlan goto workstation_inet_filter_input_vlan
        # meta arp goto workstation_inet_filter_input_arp

        # Just in case that someone screws up our 'policy drop'

        # multi-family reject, using the icmpx keyword
        counter log reject with icmpx type admin-prohibited
    };
    # ARP filter input
    chain workstation_arp_filter_input {
        counter log reject
    }
    # ARP filter output
    chain workstation_arp_filter_output {
        #  Multicast DNS 
        tcp dport 5353 counter accept
        #  DNS 
        tcp dport 53 counter accept 
        udp dport 53 counter accept 

        #  Workstation
        icmp type {
            destination-unreachable, 
            time-exceeded, 
            parameter-problem
            } counter accept

        # Router/Gateway
        icmp type {
            destination-unreachable, 
            redirect, 
            time-exceeded, 
            parameter-problem, 
            router-advertisement, 
            router-solicitation
            } counter accept

        # All ICMP
        icmp type {
            echo-reply, 
            destination-unreachable, 
            source-quench, redirect, 
            echo-request, 
            time-exceeded, 
            parameter-problem, 
            timestamp-request, 
            timestamp-reply, 
            info-request, 
            info-reply, 
            address-mask-request, 
            address-mask-reply, 
            router-advertisement, 
            router-solicitation
            } counter accept

        tcp dport 25 counter accept    # smtp
        tcp dport 465 counter accept   # submission
        # SSH server
        tcp dport ssh counter accept 

        tcp dport 514 counter accept    # syslog
        tcp dport 6514 counter accept   # secured syslog

        tcp dport 80 counter accept 
        tcp dport 443 counter accept 

        counter log reject
    }
    #IPv6 filtering
    chain workstation_ip6_filter_input {
        counter log reject
    }
    #IPv6 filtering
    chain workstation_inet_filter_input_ip6 {
        counter log reject
    }
    #IPv6 filtering
    chain workstation_inet_filter_input_ip6 {
        counter log reject
    }
}
table ip workstn_ip_nat {
    chain workstn_ip_nat_postrouting {
        type nat hook postrouting priority 0;
        #Likewise, in iptables NAT (source NAT):
        # % iptables -t nat -A POSTROUTING -s 192.168.1.1 -j SNAT --to-source 1.1.1.1
        # % iptables -t nat -A POSTROUTING -s 192.168.2.2 -j SNAT --to-source 2.2.2.2
        # % iptables -t nat -A POSTROUTING -s 192.168.3.3 -j SNAT --to-source 3.3.3.3

        # Translated to a nftables one-liner:

        # snat ip saddr map { 
        #     192.168.1.1 : 1.1.1.1, 
        #     192.168.2.2 : 2.2.2.2, 
        #     192.168.3.3 : 3.3.3.3 
       #  }
    }
}
table inet raw {
    chain prerouting {
        type filter hook prerouting priority -300;
        ct zone set iif map { $MY_DEVICE : 1, "virbr0" : 2 }
    };
    chain output {
        type filter hook output priority -300;
        ct zone set oif map { "eno2" : 1, "virbr0" : 2 }
    }
}
table inet filter {
    chain input {
        type filter hook input priority 0; policy accept;
        ct state established,related accept # handle 4
        ip saddr 10.1.1.1 tcp dport ssh accept # handle 5
    }
}










table ip my_filter_table {
    set my_connlimit {
        type ipv4_addr
        size 65535
        flags dynamic
    }

    chain my_output_chain {
        type filter hook output priority filter; policy accept;
        ct state new add @my_connlimit { ip daddr ct count over 20 } counter packets 0 bytes 0 drop
   }
}


table ip filter {
    chain input {
        type filter hook input priority 0; policy accept;

        # Directly match IP address from the set
        ip saddr 1.1.1.1 accept
    }
}






table inet myfilter {
    set myset {
        type ipv4_addr
        flags timeout
        elements = { 10.0.0.1 timeout 10s expires 8s}
    }
}

# fw.basic
table ip filter {
    chain input {
        type filter hook input priority 0;
        # accept traffic originated from us
        ct state established,related accept
        # accept any localhost traffic
        iif lo accept
        # count and drop any other traffic
        counter drop
    }
}

# fw6.basic
table ip6 filter {
    chain input {
        type filter hook input priority 0;
        # accept any localhost traffic
        iif lo accept
        # accept traffic originated from us
        ct state established,related accept
        # accept neighbour discovery otherwise connectivity breaks
        icmpv6 type { nd-neighbor-solicit, echo-request, nd-router-advert, nd-neighbor-advert } accept
        # count and drop any other traffic
        counter drop
    }
}

# fw.inet.basic
table inet filter {
    chain input {
        type filter hook input priority 0;
        # accept any localhost traffic
        iif lo accept
        # accept traffic originated from us
        ct state established,related accept
        # accept neighbour discovery otherwise connectivity breaks
        ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, echo-request, nd-router-advert, nd-neighbor-advert } accept
        # count and drop any other traffic
        counter drop
    }
}

define server1_ipv4 = 127.0.0.1
define server1_ipv6 = ff:fe:00::1
define workstation1_ipv4 = 127.0.0.2
define workstation1_ipv6 = ff:fe:00::2
define nic_lan = 172.28.130.1
define nic_dmz = 10.0.0.1
define nic_inet = 192.168.1.1
define guarded_ports = 53
table inet filter {
    chain global {
        ct state established,related accept
        ct state invalid drop
        ip protocol icmp accept
        ip6 nexthdr icmpv6 accept
        udp dport 53 accept
    }
    set myset_ipv4 {
        type ipv4_addr;
        elements = { $server1_ipv4 , $workstation1_ipv4 }
    }
    set myset_ipv6 {
        type ipv6_addr;
        elements = { $server1_ipv6 , $workstation1_ipv6 }
    }
    chain dmz_in {
        # your rules for traffic to your dmz servers
        ip saddr @myset_ipv4
        ip6 saddr @myset_ipv6
    }
    chain dmz_out {
        # your rules for traffic from the dmz to internet
    }
    chain lan_in {
        # your rules for traffic to your LAN nodes
    }
    chain lan_out {
        # your rules for traffic from the LAN to the internet
    }
    chain forward {
        type filter hook forward priority 0; policy drop;
        jump global
        oifname vmap { $nic_dmz : jump dmz_in , $nic_lan : jump lan_in }
        oifname $nic_inet iifname vmap { $nic_dmz : jump dmz_out , $nic_lan : jump lan_out }
    }
    chain input {
        type filter hook input priority 0 ; policy drop;
        jump global
        # your rules for traffic to the firewall here
    }
    chain output {
        type filter hook output priority 0 ; policy drop;
        jump global
        # your rules for traffic originated from the firewall itself here
    }
}

# Port Knocking Example #1
table inet portknock {
    set clients_ipv4 {
        type ipv4_addr
        flags timeout
    }
    set clients_ipv6 {
        type ipv6_addr
        flags timeout
    }
    set candidates_ipv4 {
        type ipv4_addr . inet_service
        flags timeout
    }
    set candidates_ipv6 {
        type ipv6_addr . inet_service
        flags timeout
    }
    chain input {
        type filter hook input priority -10; policy accept;

        iifname "lo" return

        tcp dport 123 add @candidates_ipv4 {ip  saddr . 234 timeout 1s}
        tcp dport 123 add @candidates_ipv6 {ip6 saddr . 234 timeout 1s}
        tcp dport 234 ip  saddr . tcp dport @candidates_ipv4 add @candidates_ipv4 {ip  saddr . 345 timeout 1s}
        tcp dport 234 ip6 saddr . tcp dport @candidates_ipv6 add @candidates_ipv6 {ip6 saddr . 345 timeout 1s}
        tcp dport 345 ip  saddr . tcp dport @candidates_ipv4 add @candidates_ipv4 {ip  saddr . 456 timeout 1s}
        tcp dport 345 ip6 saddr . tcp dport @candidates_ipv6 add @candidates_ipv6 {ip6 saddr . 456 timeout 1s}
        tcp dport 456 ip  saddr . tcp dport @candidates_ipv4 add @clients_ipv4 {ip  saddr timeout 10s} log prefix "Successful portknock: "
        tcp dport 456 ip6 saddr . tcp dport @candidates_ipv6 add @clients_ipv6 {ip6 saddr timeout 10s} log prefix "Successful portknock: "
        tcp dport $guarded_ports ip  saddr @clients_ipv4 counter accept
        tcp dport $guarded_ports ip6 saddr @clients_ipv6 counter accept
        tcp dport $guarded_ports ct state established,related counter accept
        tcp dport $guarded_ports counter reject with tcp reset
    }
}

# Port Knocking Example #2
table ip Inet4 {
    set Knocked_1 {
        type ipv4_addr
        flags timeout
        timeout 10s
        gc-interval 4s
    }
    set Knocked_2 {
        type ipv4_addr
        flags timeout
        timeout 10s
        gc-interval 4s
    }
    set Knocked_3 {
        type ipv4_addr
        flags timeout
        timeout 10s
        gc-interval 4s
    }
    set Knocked_4 {
        type ipv4_addr
        flags timeout
        timeout 2m
        gc-interval 4s
    }

    chain Knock_1 {
        set add ip saddr @Knocked_1
    }
    chain Unknock_1 {
        set update ip saddr timeout 0s @Knocked_1
    }
    chain Knock_2 {
        set update ip saddr timeout 0s @Knocked_1
        set add ip saddr @Knocked_2
    }
    chain Unknock_2 {
        set update ip saddr timeout 0s @Knocked_2
    }
    chain Knock_3 {
        set update ip saddr timeout 0s @Knocked_2
        set add ip saddr @Knocked_3
    }
    chain Unknock_3 {
        set update ip saddr timeout 0s @Knocked_3
    }
    chain Knock_4 {
        set update ip saddr timeout 0s @Knocked_3
        set add ip saddr @Knocked_4 log prefix "Port-Knock accepted: "
    }
    chain RefreshKnock {
        set update ip saddr timeout 2m @Knocked_4
    }
    chain PortKnock {
        ct state new ip saddr @Knocked_4 goto RefreshKnock
        tcp dport 456 ct state new ip saddr @Knocked_3 goto Knock_4
        tcp dport 345 ct state new ip saddr @Knocked_3 return
        ip saddr @Knocked_3 ct state new goto Unknock_3
        tcp dport 345 ct state new ip saddr @Knocked_2 goto Knock_3
        tcp dport 234 ct state new ip saddr @Knocked_2 return
        ip saddr @Knocked_2 ct state new goto Unknock_2
        tcp dport 234 ct state new ip saddr @Knocked_1 goto Knock_2
        tcp dport 123 ct state new ip saddr @Knocked_1 return
        ip saddr @Knocked_1 ct state new goto Unknock_1
        tcp dport 123 ct state new goto Knock_1
    }
    chain FilterIn {
        type filter hook input priority 0
        policy drop

        # allow established/related connections
        ct state established,related accept

        # early drop of invalid connections
        ct state invalid drop

        # allow from loopback
        meta iif lo accept

        # allow icmp
        ip protocol icmp accept

        # port-knocking
        jump PortKnock

        # misc. filtering
        # ...
    }

    chain FilterOut {
        type filter hook output priority 0
        policy accept
    }
}

# Classification to tc structure
table ip filter {
   map subnet_map {
       type ipv4_addr : verdict
       flags interval
       elements = { 10.20.255.48/29 : goto group_114, 10.20.255.88/29 : goto group_114,
                    10.20.255.128/29 : goto group_114 }
   }
   set priority_set {
       type ipv4_addr
       flags interval
       elements = { 8.8.8.8, 8.8.4.4 }
   }   
   map group_114 {
       type ipv4_addr : classid
       flags interval
       elements = { 10.20.255.50 : 1:ffd8, 10.20.255.90 : 1:ffd5,
                     10.20.255.130 : 1:ffd2 }
   }
   map group_114_prio {
       type ipv4_addr : classid
       flags interval
       elements = { 10.20.255.50 : 1:ffd9, 10.20.255.90 : 1:ffd6,
                     10.20.255.130 : 1:ffd3 }
   }   
   chain forward {
       type filter hook forward priority filter; policy accept;
       meta priority none ip daddr vmap @subnet_map counter packets 0 bytes 0
       meta priority none ip saddr vmap @subnet_map counter packets 0 bytes 0
       ip daddr 192.168.0.0/16 meta priority none meta priority set 1:ffff counter packets 0 bytes 0 log prefix "total - "
       ip saddr 192.168.0.0/16 meta priority none meta priority set 1:ffff counter packets 0 bytes 0 log prefix "total - "
       ip daddr 10.0.0.0/8 meta priority none meta priority set 1:ffff counter packets 38931 bytes 2926076 log prefix "total - "
       ip saddr 10.0.0.0/8 meta priority none meta priority set 1:ffff counter packets 14 bytes 1064 log prefix "total - "
       meta priority none meta priority set 1:2 counter packets 0 bytes 0 log prefix "non_shaped - "
   }
   chain input {
       type filter hook input priority filter; policy accept;
       meta priority none meta priority set 1:2 counter packets 419381 bytes 45041195
   }
   chain output {
       type filter hook output priority filter; policy accept;
       meta priority none meta priority set 1:2 counter packets 507779 bytes 51809859
   }
   chain group_114 {
       meta priority none ip saddr @priority_set meta priority set ip daddr map @group_114_prio counter packets 0 bytes 0
       meta priority none ip daddr @priority_set meta priority set ip saddr map @group_114_prio counter packets 0 bytes 0
       meta priority none meta priority set ip daddr map @group_114 counter packets 0 bytes 0
       meta priority none meta priority set ip saddr map @group_114 counter packets 0 bytes 0
       meta priority none meta priority set 1:ffff counter packets 0 bytes 0 log prefix "group_114 - "
   }
}

table ip filter {
    chain input {
        type filter hook input priority 0; policy drop;
        ct state new, established accept;
        ct state new,invalid accept;
        ct state untracked drop;
    }
}


table firewall {
  chain incoming {
    type filter hook input priority 0; policy drop;

    # established/related connections
    ct state established,related accept

    # loopback interface
    iifname lo accept

    # icmp
    icmp type echo-request accept

    # open tcp ports: sshd (22), httpd (80)
    tcp dport { ssh, http } accept
  }
}

table ip6 firewall {
  chain incoming {
    type filter hook input priority 0; policy drop;

    # established/related connections
    ct state established,related accept

    # invalid connections
    ct state invalid drop

    # loopback interface
    iifname lo accept

    # icmp
    # routers may also want: mld-listener-query, nd-router-solicit
    icmpv6 type { echo-request, nd-neighbor-solicit } accept

    # open tcp ports: sshd (22), httpd (80)
    tcp dport { ssh, http } accept
  }
}



#!/usr/sbin/nft -f
# File: all-counter.nft
# Description: Test file to exercise '[add] counter' Vim syntax highlightings.
#
# nftables manpage shows:
#
#   {add | delete | destroy | list | reset} counter [family] table object
#   add counter [family] table name [{ [ packets packets bytes bytes ; ] [ comment comment ; }]
#   list counters
#   list counters [family]
#   delete counter [family] table name
#   delete counter [family] table handle handle
#   destroy counter [family] table handle handle
#   reset counters [family]
#
# Syntax Pathway:
#   base_cmd add_cmd 'counter'
#
# Semantic Actions (reverse parser_bison.y):
#   nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_counter
#
################################################################################
# true positive test (properly hightlighted correctly; has good content; perfect)
################################################################################

# base_cmd add_cmd 'counter'

add table table_id
counter table_id counter_id
add counter table_id counter_id

# line->add_cmd->rule_position
add table T
add chain T C
counter T C


counter T C
add table T0
counter T0 C
add table T_
counter T_ C

counter T C/C

counter T C ;

add table ip T
add table ip6 T
add table inet T
add table netdev T
add table bridge T
add table arp T
counter ip T C
counter ip6 T C 
counter inet T C
counter netdev T C
counter bridge T C
counter arp T C

counter ip T C ;
counter ip6 T C ;
counter inet T C ; 
counter netdev T C;
counter bridge T C; 
counter arp T C  ;  




add counter T C0
add counter T C_
add counter T C\

add counter T last;

add counter T C ;

counter T last;


add counter filter http
add counter table_id counter_id


add counter filter https

add table filter
add chain filter input
add rule filter input tcp dport 80 counter name "http"  # nftables manpage ;
delete counter table_id counter_id

destroy counter table_id counter_id

add table table_id2
add counter table_id2 chain_id2
list counter table_id2 chain_id2
reset counter table_id counter_id
reset counter table_id  chain_id  ;
reset counter table_id2 chain_id2


table inet x {  # from nftables manpage
    chain y {
        type filter hook input priority filter; policy accept; ;;;;
        socket cgroupv2 level 1 "user.slice" counter
    }
}


#!/usr/sbin/nft -f
# File: all-flowtable.nft
# Description: Test NFT file exercises '[add] flowtable' Vim syntax highlightings.
#
# base_cmd add_cmd 'flowtable' 
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_flowtable
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect.
################################################################################


# ->flowtable_spec->'flowtable'->'delete'->delete_cmd->base_cmd
add table ip table_id
add table ip6 table_id
add table inet table_id
add table netdev table_id
add table bridge table_id
add table arp table_id

add flowtable ip table_id flowtable_id { hook ingress priority 0 ; devices = { eno2, wlo1 } ; }
add flowtable ip6 table_id flowtable_id { hook ingress priority 0 ; devices = { eno2, wlo1 } ; }
add flowtable inet table_id flowtable_id { hook ingress priority 0 ; devices = { eno2, wlo1 } ; }

delete flowtable ip table_id flowtable_id
delete flowtable ip6 table_id flowtable_id
delete flowtable inet table_id flowtable_id

# flowtableid_spec->'flowtable'->'destroy'->destroy_cmd->base_cmd
destroy flowtable table_id handle 15 
destroy flowtable ip table_id handle 15 
destroy flowtable ip6 table_id handle 15 
destroy flowtable inet table_id handle 15 
destroy flowtable netdev table_id handle 15 
destroy flowtable bridge table_id handle 15 
destroy flowtable arp table_id handle 15 

# ->flowtable_spec->'flowtable'->'destroy'->destroy_cmd->base_cmd
destroy flowtable table_id flowtable_id 
destroy flowtable ip table_id flowtable_id 
destroy flowtable ip6 table_id flowtable_id 
destroy flowtable inet table_id flowtable_id 
destroy flowtable netdev table_id flowtable_id 
destroy flowtable bridge table_id flowtable_id 
destroy flowtable arp table_id flowtable_id 

# ruleset_spec->'tables'->'flow'->list_cmd->base_cmd
list flow tables ip
list flow tables ip6
list flow tables inet

# ruleset_spec->'flowtables'->'list'->list_cmd->base_cmd
list flowtables
list flowtables ip
list flowtables ip6
list flowtables inet

# flowtable_spec->'flowtable'->'list'->list_cmd->base_cmd

add table ip6 T

# ruleset_spec->'tables'->'flow'->flush_cmd->base_cmd
add table table_id
# flush flow table table_id flow_id
# flush flow table ip table_id flow_id
# flush flow table ip6 table_id flow_id
# flush flow table inet table_id flow_id
# flush flow table netdev table_id flow_id
# flush flow table bridge table_id flow_id
# flush flow table arp table_id flow_id

# [https://wiki.nftables.org/wiki-nftables/index.php/Flowtables]
define DEV_PRIVATE=eth0
redefine DEV_PRIVATE =eth0
redefine DEV_PRIVATE= eth0
define DEV_INTERNET   =   eth1



#!/usr/sbin/nft -f
# File: all-map
# Description: Test NFT file to exercise '[add] map' Vim syntax highlightings.
#
# base_cmd add_cmd 'map'
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_map
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################
add map ip nat M {
        type ipv4_addr : verdict
        flags dynamic
        elements = { 192.168.1.1 : accept, 192.168.1.2 : drop }
    }

delete map ip nat M
map ip nat M { flags timeout; timeout 1h; type ipv4_addr : verdict; elements = { "127.0.0.1": accept }; };
delete map ip nat M
map ip nat M { type ipv4_addr: verdict; elements = { 127.0.0.1: accept }; comment "A comment string"; }
delete map ip nat M
map ip nat M { policy performance; type ipv4_addr: verdict; elements = { 127.0.0.1:accept }; };  # set_mechanism->map_block->add_cmd->base_cmd->line
delete map ip nat M
map ip nat M { policy memory; type ipv4_addr: verdict; elements = { 127.0.0.1:accept  }; };
delete map ip nat M
map ip nat M { size 123; type ipv4_addr: verdict; elements = { 127.0.0.1:accept  }; };
delete map ip nat M
map ip nat M { elements = { 1:00:1, }; type ipv4_addr: verdict; elements = { 127.0.0.1:accept  }; }
delete map ip nat M
map ip nat M { type ipv4_addr: verdict; policy performance; elements = { 127.0.0.1:accept  }; size 123; flags constant; };
delete map ip nat M
map ip nat M {
    policy performance; 
    include "../include/policy-map-secret.nft"
    type ipv4_addr : verdict;
    elements = { 127.0.0.1:accept  };
    size 123; 
    flags constant;
};
delete map ip nat M
map ip nat M { flags timeout; timeout 1h; type ipv4_addr : verdict; };
delete map ip nat M;
map ip nat M { flags interval; type ipv4_addr : verdict; elements = { 127.0.0.1:drop }; };
destroy map ip nat M;
map ip nat M { type ipv4_addr : verdict; flags dynamic; };
delete map ip nat M
map ip nat M { type ipv4_addr : verdict; flags constant; };

#!/usr/sbin/nft -f
# File: all-set.nft
# Description: A test NFT file to exercise '[add] set' Vim syntax highlightings.
#
# base_cmd add_cmd 'set'
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_set
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# base_cmd add_cmd 'set'
table ip filter {
    set myset {
        type ipv4_addr
        elements = { 1.1.1.1 }
    }
}

# add_cmd 'set' set_block '{' 'ct' 'count'
add set nat S_CT_COUNT {
    type ipv4_addr
    ct count 15
    ct count over 15
}

# add_cmd 'set' set_block '{' 'last'
add set nat S_LAST_1 {
    type ipv4_addr
    last
}

# add_cmd 'set' set_block '{' 'last' 'used' 'never'
add set nat S_LAST_2 {
    type ipv4_addr
    last used never
}

# add_cmd 'set' set_block '{' 'last' 'used' <timeout>
add set nat S_LAST_3 {
    type ipv4_addr
    last used 2h5m30s
}

# add_cmd 'set' set_block '{' 'policy' 'memory'
add set nat S_FULL {
    type ipv4_addr
    policy memory  # set_mechanism
    size 1490
    comment "my comment string"
}

# add_cmd 'set' set_block '{' 'policy' 'performance'
add set nat S_FULL {
    type ipv4_addr
    policy performance  # set_mechanism
    size 1490
    comment "my comment string"
}

# add_cmd 'set' set_block '{'
add set nat S_FULL {
    type ipv4_addr
    # set-mechanism
    policy memory
    policy performance
    size 1490
    comment "my comment string"
}

#!/usr/sbin/nft -f
# File: all-tables.nft
# Description: A test NFT file to exercise 'add table' Vim syntax highlightings.
#
# Identifiers begin with an alphabetic character (a-z,A-Z),
# followed by zero or more alphanumeric characters (a-z,A-Z,0-9)
# and the characters slash (/), backslash (\), underscore (_)
# and dot (.).
#
# Identifiers using different characters or clashing with a
# keyword need to be enclosed in double quotes (").
#
# Syntax Pathway:
#   base_cmd add_cmd 'table'
#
# Semantic Actions (reverse parser_bison.y):
#   nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_table/nft_add_table_chain_block policy_spec
#
################################################################################
# true positive test (properly hightlighted correctly; has good content; perfect
################################################################################

add table filter
add table last

add table my/IpTable
add table my/IpTable 
add table my/IpTable; 
add table my/IpTable ;
add table my/IpTable ; 
add table my\IpTable    # defaults to 'ip' family
add table my./_IpTable { };
add table my.IpTable
add table my_./\IpTable    # defaults to 'ip' family
add table A#;   # not so invalid character, it's an inline comment

table A
table Z
table a
table z
table a0
table z0
table A/
table A\
table A.
table A
table A   # comment
table T { ; };
table $VARIABLE # variable ALLOWED in declarative '^table'

table $MY_VAR {
    flags dormant;
    flags persist;
    flags dormant,persist;
    flags persist,dormant;
};

table T { chain C { type filter ; }; };  # incomplete chain (but this here is table)
table T { synproxy SP { mss 1490 ; wscale 5 } };  # very incorrect


##########################################################################
# All-in-One
##########################################################################
table T {
    # common_block
    include "/directory/subdirectory/filename.filetype";
    define A = 1
    redefine A = 2
    undefine A
    # table_option
    flags dormant, persist;
    comment "A Hello XYZ"
    comment "A ;Hello XYZ"
    comment "ABCDEFGHIJKLMNOPQRSTUVXWYZabcdefghijklmnopqrstuvwxyz"
    comment ABCDEFGHIJKLMNOPQRSTUVXWYZabcdefghijklmnopqrstuvwxyz;
    comment 0123456789~!@#$%&*()_+=-|\}\{[]:/.,<>?\
    comment Hello ;
    # chain_block
    chain C {
        # common_block
        include "/directory/subdirectory/filename.filetype";
        define A = 1
        redefine A = 2
        undefine A
        # hook_spec
        type filter hook ingress device $ETHERNAME policy accept
        policy $CHAINPOLICY
        # set_flags
        flags offload
        # rule/rule_alloc/stmt/stateful_stmt/counter_stmt
        counter;
        # devices
        devices = { "eth0", $BRIDGEVAR };
        # comment_spec
        comment 'ABCDEFGHIJKLMNOPQRSTUVXWYZabcdefghijklmnopqrstuvwxyz' ;
    };
    # set_block
    set S {
        # common_block
        include "/directory/subdirectory/filename.filetype";
        define A = 1
        redefine A = 2
        undefine A
        # typeof_key_expr
        typeof ether : ip interval ip;
        type classid : limit;
        # set_flags
        flags constant, interval, timeout, dynamic;
        timeout 14h;
        gc-interval 30s;
        # rule/rule_alloc/stmt/stateful_stmt/counter_stmt
        counter;
        # rule/rule_alloc/stmt/stateful_stmt/limit_stmt
        limit rate 15 / second;
        limit rate over 15 / second;
        limit rate until 15 / second burst 15 packets;
        limit rate 15 Mbytes / second;
        limit rate over 15 Kbytes / second burst 15 kbytes;
        # rule/rule_alloc/stmt/stateful_stmt/quota_stmt
        quota over 15 bytes
        quota over 15 bytes used 15 Mbytes
        # rule/rule_alloc/stmt/stateful_stmt/connlimit_stmt
        ct count over 20
        # rule/rule_alloc/stmt/stateful_stmt/last_stmt
        last
        last used never
        last used 15m
        # set_mechanism
        policy performance;
        policy memory;
        # comment_spec
        comment 'ABCDEFGHIJKLMNOPQRSTUVXWYZabcdefghijklmnopqrstuvwxyz' ;
        # 'elements'/set_block_expr
        elements = $VARNAME;
        # elements = { "tesdf",2,3,4 };
        auto-merge;
    };
    # map_block
    map M {
        # common_block
        include "/directory/subdirectory/filename.filetype";
        define A = 1
        redefine A = 2
        undefine A
        # 'timeout'
        timeout 14h;
        # 'gc-interval'
        gc-interval 30s;
        # set_flags
        flags constant, interval, timeout, dynamic;
        # stateful_stmt/counter_stmt
        counter;
        # stateful_stmt/limit_stmt
        limit rate 15 / second;
        limit rate over 15 / second;
        limit rate until 15 / second burst 15 packets;
        limit rate 15 Mbytes / second;
        limit rate over 15 Bytes / second burst 15 bytes;
        # stateful_stmt/quota_stmt
        quota over 15 bytes
        quota over 15 bytes used 15 Mbytes
        # stateful_stmt/connlimit_stmt
        ct count over 20
        # stateful_stmt/last_stmt
        last
        last used never
        last used 15m
        # comment_spec
        comment 'ABCDEFGHIJKLMNOPQRSTUVXWYZabcdefghijklmnopqrstuvwxyz' ;
        # set_mechanism
        policy performance;
        policy memory;
        size 1230;
        # typeof_data_expr
        typeof ether : ip interval ip;
        type classid : limit;
        # 'elements'/set_block_expr
        elements = $VARNAME;
        #elements = { "tesdf",2,3,4 };
        auto-merge
    };
    flowtable FT {
        hook ABC priority -150
        devices = { eth0, wlan0 }
        flags offload
        counter
    } ;

    # counter_block
    counter CT { };
    # quota_block
    quota Q { };
    # ct_helper_block
    ct helper Q { };
    # ct_timeout_block
    ct timeout Q { };
    # ct_expect_block
    ct expectation Q { };
    # secmark_block
    secmark SM { };
    # synproxy_block
    synproxy SP { };
};



element filter blackhole { 192.168.0.1, 192.168.0.10 }

#!/usr/sbin/nft -f
# File: chain-type
# Description: A test NFT file to exercise 'chain-type' Vim syntax highlighting
#
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# Note that only jump and goto actions to regular chains are allowed. 

chain T C { ip protocol jump C2 };
chain ip T C { ip protocol jump C2 };
chain ip T C { counter };


add chain T C { ip protocol jump C2 };
add chain ip T C { ip protocol jump C2 };
add chain ip T C { counter };
table T {

    chain C {
        ip protocol jump C2;
    }  ;
    chain C {
        ip protocol jump C2;
    } 
    chain C {
        ip protocol jump C2
    }
    chain C {
        ip protocol jump C2
    }

}

#!/usr/sbin/nft -f
# File: include-syntaxes.nft
# Description: A test NFT file to exercise 'include' Vim syntax highlightings.
#
#
# base_cmd include_cmd
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_set
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

include ";";
 include ";";
include ";;;;;;;;;";
include ";;;;;;;;;;";
include 'Fil"espec'
include "Fil'espec"
include "Filespec"

include "Filespec" ;


include "Filespec";   
include "Filespec"  ;
include "Filespec"  ;   

include "File spec" # space in filename
include "File spec";  #  
include " Filespec";  # space at pos 0
include " Filespec ";  # space at pos 0 & len-1
include "Filespec ";  # space at pos len-1
include "Filespec" # inline comment
include "Filespec"        # inline comment
include "Filespec";   # inline comment
include "Filespec";      # inline comment
include "Filespec"  ;      # inline comment
include "File\"spec";  # OK, double-quote inside double-quotes
include 'Fil\'espec'
include 'File\'spec';  # OK, double-quote inside double-quotes

include "Fil'espec"
include 'Fil"espec'

include "./defines.nft"  # periods are allowed
include "/home/device/Filespec"
include "/dev/hd0/Filespec\win0-15 5;1"  ;   
include "/dev/hd0/Filespec\win0-15 [5;1]"  ;   
include "/dev/hd0/Filespec\win0-15 [5;1]{value}"  ;   
include "Filespec???<>|\~`!@#$%^&*()\=+{}] /;:,._0123abcXYZ"  ;   # inline comment


#!/usr/sbin/nft -f
# File: common_block.nft
# Description: A test NFT file to exercise common_block Vim syntax group.
#
# nft_line/nft_common_block
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

;
  ;
 ;  

# line/common_block/INCLUDE
include "directory/filename.filetype"
# line/common_block/INCLUDE/stmt_separator
include "directory/filename.filetype";
include "directory/filename.filetype"; 
include "directory/filename.filetype" ;
include "directory/filename.filetype" ; 
# line common_block 'include' <QUOTED_STRING>
include "filespec"
include "filename.filetype"
include "directory/filename.filetype"
include "https://directory/filename.filetype"  # valid filespec but URL are not processed here (filesystem reject)
include "file:///directory/filename.filetype"  # valid filespec but URL are not processed here (filesystem reject)

# line common_block 'define' identifier '=' initializer_expr
# line/common_block/DEFINE
define A=1
define A= 1
define A =1
define A = 1
define last=1
define last= 1
define last =1
define last = 1
define ABC= 1  # missing stmt_separator
define ABC = 1  ;
define ABC = 1, 2, 3  ;  # set
define ABC = 127.0.0.1  # missing stmt_separator
define ABC = 127.0.0.1;
define ABC = 127.0.0.1, 192.168.1.1;  # set
define ABC =-1   # missing stmt_separator
define ABC = -1   # missing stmt_separator
define ABC = -1;
define ABC = -1; 
define ABC = -1 ;
define ABC = -1 ; 
define port_range = 1024-32767
define port_range = 1024-32767 ;
define ABC = identifier # missing stmt_separator
define ABC = identifier ;
define ABC = $identifier # missing stmt_separator
define ABC = $identifier;
define ABC = "string"  # missing stmt_separator
define ABC = "string";

# line/common_block/DEFINE/initializer_expr/rhs_expr/.../primary_rhs_expr/set_expr/{}
define ABC = {};
define last = {   }
define ABC = { }
define ABC = { }
define ABC = {            }

# Set section
define ABC = { 1 };
define MY_SET = { 1, 2 }
define MY_SET = { 1, 2, 3, 4 };

define MY_IP = { 127.0.0.1 };
define MY_IP_SET = { 127.0.0.1, 192.168.1.1, 192.168.10.10 };

define ABC = { x };
define MY_PORTS = { test };
define MY_PORTS_SET = { test, ssh, tcp, icmp };

define MY_DEV = { "eth0" };

define MY_DEV = { 1024-2048 };

# Map section
define MY_MAP = { 1:1 };
define MY_MAP = { 1:tcp };
define MY_MAP = { 1:"abc" };
define MY_MAP = { 1 : "abc" };
define MY_MAP = { 1:"eth0",  2:"br0" };
define MY_MAP = { tcp : tcp };
define MY_MAP = { eth0:127.0.0.1 };
define MY_MAP = { eth0 : 127.0.0.1 };
define MY_MAP = { eth0:127.0.0.1, bro0:192.168.1.1 };
define MY_MAP = { 192.168.20.20: ssh };
define MY_MAP = { 192.168.20.20: ssh, 127.0.0.1: http };
define MY_MAP = { 192.168.20.20: 127.0.0.1 };
define MY_MAP = { 192.168.20.20: 127.0.0.1, 127.0.0.1: 127.0.0.1};

# line/common_block/DEFINE/initializer_expr/DASH_NUM
define negative_value = -1000
define negative_value = -1000 ;
#
# line common_block 'redefine' identifier '=' initializer_expr
# line/common_block/REDEFINE
redefine last = {}
redefine A = {}
redefine A={}
redefine last = {}
redefine A = { 1 }
redefine A = { 1,2, 3, 4 }
redefine A = { 127.0.0.1 }
redefine A = { 127.0.0.1, 192.168.1.7 }
redefine A = { };
redefine A = { x }; 
redefine A = { } ;
redefine A = { } ; 
redefine A = 2
redefine A = 123  # missing stmt_separator
redefine A = -123  # missing stmt_separator
redefine A = $ABC  # missing stmt_separator

# line common_block 'undefine' identifier 
# line/common_block/UNDEFINE
undefine last
undefine last;
undefine last; 
undefine last ; 
undefine A
undefine ABC
# line/common_block/UNDEFINE/stmt_separator
undefine A;
undefine A$BCDE;
undefine A_BCDE;
undefine A123DF; 
undefine A123DG ;
undefine A123DH ; 

error
error;
  error;
error ;
    error ;
error ;
error ; 
error  # inline comment line

# base_cmd add_cmd 'table' table_spec table_block common_block 'include'
table T {
    include "file"
}

# base_cmd add_cmd 'table' table_spec table_block common_block 'define'
table T { define A = 1 }
table T {
    define A = 1
    define A = 1 ;
    define last = 1
    define last = 1 ;
    define A = {} ;
}
# base_cmd add_cmd 'table' table_spec table_block common_block 'redefine'
table T { redefine A = 1 }
table T { redefine A = 1; }
table T {
    redefine A = 1
    redefine A = 1 ;
}
# base_cmd add_cmd 'table' table_spec table_block common_block 'undefine'
table T {
    undefine A
    undefine B
}
table xxxx { undefine abc ; }
table xxxx { undefine abc ; } ;

# base_cmd add_cmd 'table' table_spec table_block table_options 'comment'
# base_cmd add_cmd 'table' table_spec table_block 'comment' string
table T {
    comment Hello
    comment Hello
    comment Hello
    comment Hello
}
table bridge T { comment 'Hello world!' }
table T { comment "Hello world!" }
table netdev xxxx { comment "test" } ;
table xxxx { comment 'test' };
table arp xxxx { comment test;  };

# base_cmd add_cmd 'table' table_spec table_block 'policy' 'offload'
# base_cmd add_cmd 'table' table_spec table_block hook_spec 'type'
# base_cmd add_cmd 'table' table_spec table_block 'flags' flag_spec
table T {flags persist}
table T {flags dormant;}
table T {flags owner, persist,dormant };
table T {flags owner,persist ;}
table T {flags dormant,owner; }
table T {flags persist,dormant ; }
# base_cmd add_cmd 'table' table_spec table_block { table_options ';' }
table ip xxxx { flags persist, owner, dormant};
table xxxx { ; flags owner; comment "new stuff"; };
table T { flags dormant; chain C { type ; }; };

table myIpTable { flags dormant; }
table netdev myNetdev { flags dormant; }
table bridge myBridge { flags dormant; }
table arp myArpTable { flags dormant; }
table ip myIpTable { flags dormant; }
table ip6 myIp6Table { flags dormant; }
table inet myInetTable { flags dormant; }


#!/usr/sbin/nft -f
# File: counter.nft
# Description: A test NFT file to exercise 'counter' keyword Vim syntax highlightings.
#
# bison symbol:   counter_stmt
# syntax pathway: counter_stmt->stateful_stmt->(stmt|stateful_stmt_list)
#
#
# First-Order, First-encountered keywords after 'counter' keyword
# Keyword  Type of stmt    Description
# log      log_stmt        Packet logging
# accept   verdict_stmt    Verdict: accept
# drop     verdict_stmt    Verdict: drop
# continue verdict_stmt    Verdict: continue
# jump     verdict_stmt    Control flow
# return   verdict_stmt    Return from chain
# meta     expr_stmt       Expression involving meta keys
# ip       expr_stmt       Match IP headers
# tcp      expr_stmt       Match TCP headers
# ct       stateful_stmt   Conntrack match or assignment
# limit    stateful_stmt   Rate limiting
# mark     expr_stmt or match_stmt    Firewall mark matching or assignment
# payload  expr_stmt       Match protocol payload
# quota    stateful_stmt   Match on bytes used
# set      set_stmt        Set element addition or update (in update-only rules)
# reject   verdict_stmt    ICMP/TCP rejection
# audit    log_stmt        Similar to log
# synproxy stateful_stmt   TCP SYN proxy setup
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################


add counter ip table_id counter_id packets 5 bytes 1500
add counter ip table_id counter_id packets 5 bytes 1500;
add counter ip table_id counter_id packets 5 bytes 1500;
add counter ip table_id counter_id packets 5 bytes 1500 ;
add counter ip table_id counter_id packets 5 bytes 1500 ;

# 'counter' as a statement ('stmt')
add counter table_id counter_id
add counter table_id counter_id;
add counter table_id counter_id;
add counter table_id counter_id ;
add counter table_id counter_id ;


add counter inet mytable my_counter_name


add counter table_id counter_id { comment "Nice to say things" }

add counter table_id counter_id { packets 5 bytes 1500 };
add counter table_id counter_id { packets 5 bytes 1500 };
add counter table_id counter_id { packets 5 bytes 1500 } ;
add counter table_id counter_id { packets 5 bytes 1500 } ;

add counter table_id counter_id { packets 5 bytes 1500 };
add counter table_id counter_id { packets 5 bytes 1500 } ;
add counter table_id counter_id { packets 5 bytes 1500 } ;

add counter table_id counter_id {
    define A = 1
    packets 5 bytes 1500
};

counter table_id counter_id
counter table_id counter_id; 
counter table_id counter_id ;
counter table_id counter_id ; 
counter last counter_id
counter table_id last
counter last last
counter ip table_id counter_id
counter ip6 table_id counter_id;
counter inet table_id counter_id ;
counter netdev table_id counter_id; 
counter bridge table_id counter_id ; 
counter arp table_id counter_id
counter arp last counter_id
counter arp table_id last
counter arp last counter_id
counter arp last last
counter bridge table_id counter_id name mycountername; 

counter table_id counter_id packets 5 bytes 1500
counter table_id counter_id packets 5 bytes 1500; 
counter table_id counter_id packets 5 bytes 1500 ;
counter table_id counter_id packets 5 bytes 1500 ; 

counter table_id counter_id { packets 5 bytes 1500 }; 
counter table_id counter_id { packets 5 bytes 1500;}; 
counter table_id counter_id { packets 5 bytes 1500; }; 
counter table_id counter_id { packets 5 bytes 1500 ; }; 
counter table_id counter_id { packets 5 bytes 1500 } ;
counter table_id counter_id { packets 5 bytes 1500 } ;
counter table_id counter_id { packets 5 bytes 1500 } ; 

# inline comment
counter table_id counter_id { 
    # inline comments
    define A = 1  # inline comments
    redefine A = 2  # inline comments
    undefine A  # inline comments
    error; 
    packets 5 bytes 1500  # inline comments
    include "global_firewall.nft";
    include "lou_s_firewall.nft"
    comment "this stuff!`~@#$%^&*()_+-={}[]|\\:\"<>?/";
};


# base_cmd add_cmd 'table' table_spec table_block 'counter' counter_block
table T { counter C { } }
table ip T { counter C { } }
table ip6 T { counter C { } }
table inet T { counter C { } }
table netdev T { counter C { } };
table netdev T { counter C { } } ;
table netdev T { counter C { } };
table netdev T { counter C { } } ;
table bridge T { counter C { } }
table arp T { counter C { } }
table T { counter C { packets 123 bytes 15 } }
table T {
    counter C {
        # common_block
        include "/directory/subdirectory/filename.filetype"
        define A = 1
        redefine A = 2
        undefine A
        packets 123 bytes 123;
        packets 123 bytes 123
    }
}



table inet mytable {
    comment "asdfasdfasdff"
    # table_block/common_block
    include "global_firewall.nft";
    # inline comments
    define A = 1  # inline comments
    redefine A = 2  # inline comments
    undefine A  # inline comments
    error; 
    # table_options
    flags dormant, persist, owner
    #counter { counter_config };
    # 'counter' keyword is under add_cmd->table_block->'counter'
    counter packets 123;  # THIS IS AN ERROR
    counter name my_counter_name;  # THIS IS AN ERROR
    counter C {
        # table_block/counter_block/comment_spec
        comment "comment part"
        # counter_config
        # table_block/common_block
        include "global_firewall.nft";
        packets 123
        bytes 123
        # inline comments
        define A = 1  # inline comments
        redefine A = 2  # inline comments
        undefine A  # inline comments
        error; 
    }
};

table inet mytable {
    chain mychain {
        # common_block
        include "global_firewall.nft";
        define A = 1  # inline comments
        redefine A = 2  # inline comments
        undefine A  # inline comments
        error; 
        # chain_block/flags_spec
        flags offload
        # chain_block/rule/rule_alloc/stmt/stateful_stmt/counter_stmt
        counter
        counter packets 123 bytes 123123
        # chain_block/rule/rule_alloc/stmt/objref_stmt/objref_stmt_counter
        counter name my_counter_name
        counter name my_counter_name;
        comment "asdfasdfasdff"
    };
};

# 'counter' as an expression ('expr')
# counter_stmt->stateful_stmt->stateful_stmt_list->set_spec
# counter_stmt->stateful_stmt->(stmt|stateful_stmt_list)

add set T S { counter }
add set T S { counter } ;

add set T S { counter bytes 2048 }
add set T S { counter packets 3 }

# repeated stateful_stmt
add set T S { counter packets 3 counter packets 3 }

delete counter T CC
delete counter ip T CC
delete counter ip6 T CC
delete counter inet T CC
delete counter netdev T CC
delete counter bridge T CC
delete counter arp T CC

delete counter T handle 1
delete counter ip T handle 1
delete counter ip6 T handle 1
delete counter inet T handle 1
delete counter netdev T handle 1
delete counter bridge T handle 1
delete counter arp T handle 1

destroy counter T CC
destroy counter ip T CC
destroy counter ip6 T CC
destroy counter inet T CC
destroy counter netdev T CC
destroy counter bridge T CC
destroy counter arp T CC

destroy counter T handle 1
destroy counter ip T handle 1
destroy counter ip6 T handle 1
destroy counter inet T handle 1
destroy counter netdev T handle 1
destroy counter bridge T handle 1
destroy counter arp T handle 1

list counter T C

reset counter T C

add table T {
    chain C {
        iif == "eth0" counter;
        counter name $MY_COUNTER_VARNAME;
        counter name "named_counter_identifier";
        counter name 'named_counter_identifier';
        counter name named_counter_identifier;
    }
};

# counter_stmt (used in rule/stmt and table-counter counter_block)
table T {
    counter last {
        # inline comments
        define A = 1  # inline comments
        redefine A = 2  # inline comments
        undefine A  # inline comments
        error; 
        include "global_firewall.nft";
        include "lou_s_firewall.nft"
        comment "this stuff!`~@#$%^&*()_+-={}[]|\\:\"<>?/";
    }
    counter name my_count;
} ;


#!/usr/sbin/nft -f
# File: create.nft
# Description: A test NFT file to exercise 'create' Vim syntax highlightings.
#
# Section: base_cmd/ADD/CREATE
# CREATE (create_cmd)
#  create is similar to the add command, but returns
#  an error if the chain already exists.
#
# base_cmd 'create'
# nft_line/nft_base_cmd/nft_base_cmd_create
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# TODO : Finish nft_base_cmd_create_cmd_table_keyword

create table myIpTable 
create table my.IpTable
create table my/IpTable
create table my_IpTable
create table my./_IpTable
create table netdev myNetdev 
create table bridge myBridge 
create table arp myArpTable 
create table ip myIpTable 
create table ip6 myIp6Table 
create table inet myInetTable 
create table myIpTable { flags dormant; }
create table netdev myNetdev { flags dormant; }
create table bridge myBridge { flags dormant; }
create table arp myArpTable { flags dormant; }
create table ip myIpTable { flags dormant; }
create table ip6 myIp6Table { flags dormant; }
create table inet myInetTable { flags dormant; }


# Two kinds of a base chain for syntax handling:
#  1. Unidentified family chain
#  2. Explictly-identified family chain

# create chain <chain_spec>
create chain myIpTable myIpChain
create chain netdev myNetdevTable myNetdevTable 
create chain bridge myBridgeTable myBridgeChain 
create chain arp myArpTable myArpChain 
create chain ip myIpTable myIpChain 
create chain ip6 myIp6Table myIp6Chain 
create chain inet myInetTable myInetChain 

# create chain <chain_spec> { <chain_block> }
create chain myIpTable myIpChain { type filter hook prerouting priority 0; policy drop; } ;
create chain myIpTable myIpChain { type filter hook input priority 0; policy drop;};
create chain myIpTable myIpChain { type filter hook forward priority 0; policy drop;}
create chain myIpTable myIpChain { type filter hook output priority 0; policy drop;}
create chain myIpTable myIpChain { type filter hook postrouting priority 0; policy drop;}
create chain myIpTable myIpChain { type filter hook input device eth0 priority 0; policy drop;}
create chain arp myArpTable myArpChain { type filter hook input priority 0; policy accept; }
create chain arp myArpTable myArpChain { type filter hook input priority 0; policy accept; }
create chain arp myArpTable myArpChain { type filter hook output priority 0; policy accept; }
create chain arp myArpTable myArpChain { type filter hook input device eth0 priority 0; policy accept; }
create chain bridge myBridgeTable myBridgeChain { type filter hook input priority 0; policy accept; }
create chain bridge myBridgeTable myBridgeChain { type filter hook output priority 0; policy accept; }
create chain bridge myBridgeTable myBridgeChain { type filter hook input device eth0 priority 0; policy accept; }
create chain netdev myNetdevTable myNetdevChain 
create chain netdev myNetdevTable myNetdevChain { type filter hook ingress device vlan0 priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook prerouting priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook input priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook forward priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook output priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook postrouting priority 0; policy accept; }
create chain ip myIpTable myIpChain { type nat hook prerouting priority 0; policy accept; }
create chain ip myIpTable myIpChain { type nat hook input priority 0; policy accept; }
create chain ip myIpTable myIpChain { type nat hook output priority 0; policy accept; }
create chain ip myIpTable myIpChain { type nat hook postrouting priority 0; policy accept; }
create chain ip myIpTable myIpChain { type route hook output priority 0; policy accept; }

create chain ip myIpTable myIpChain { type filter hook input device eth0 priority 0; policy accept; }

create chain ip6 myIp6Table myIp6Chain { type filter hook prerouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook input priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook forward priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook output priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook postrouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type nat hook prerouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type nat hook input priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type nat hook output priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type nat hook postrouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type route hook output priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook input device eth0 priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook prerouting priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook input priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook forward priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook output priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook postrouting priority 0; policy accept; }
create chain inet myInetTable myInetChain { type nat hook prerouting priority 0; policy accept; }
create chain inet myInetTable myInetChain { type nat hook input priority 0; policy accept; }
create chain inet myInetTable myInetChain { type nat hook output priority 0; policy accept; }
create chain inet myInetTable myInetChain { type nat hook postrouting priority 0; policy accept; }
create chain inet myInetTable myInetChain { type route hook output priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook input device eth0 priority 0; policy accept; }

create chain netdev myIpTable myIpChain { type filter hook ingress devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create chain bridge myBridgeTable myBridgeChain { type filter hook prerouting devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create chain arp myArpTable myArpChain { type filter hook input devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create chain ip myIpTable myIpChain { type nat hook postrouting devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create chain ip6 myIp6Table myIp6Chain { type filter hook input devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create chain inet myInetTable myInetChain { type route hook output devices = { eth0, eth1, eth2 } priority 0; policy drop;}

# create set <set_spec> { <set_block> }
create set my_filter_table my_ssh_meter { type ipv4_addr . inet_proto; flags dynamic ;}
create set my_filter_table my_ssh_meter { type ipv4_addr . inet_service; flags timeout;}
####create set my_filter_table my_ssh_meter { type ipv4_addr . inet_service; flags timeout . dynamic ;}

# create map <set_spec> { <map_block> }
create map myIpTable myIpMap { flags interval; elements = { ipv4_addr }; size 1200; policy performance; }
####create map myIpTable myIpMap { type mark : 5; flags interval; elements = { ipv4_addr }; size 1200; policy performance; }
create map netdev myNetdevTable myNetdevMap { flags interval; elements = { ether_addr }; size 1200; policy performance; }
####create map netdev myNetdevTable myNetdevMap { type mark; flags interval; elements = { ether_addr }; size 1200; policy performance; }
create map bridge myBridgeTable myBridgeMap { flags interval; elements = { ether_addr }; size 1200; policy performance; }
####create map bridge myBridgeTable myBridgeMap { type mark; flags interval; elements = { ether_addr }; size 1200; policy performance; }
create map arp myArpTable myArpMap { flags interval; elements = { ipv4_addr }; size 1200; policy performance; }
####create map arp myArpTable myArpMap { type mark; flags interval; elements = { ipv4_addr }; size 1200; policy performance; }
create map ip myIpTable myIpMap { type inet_service: ipv4_addr; flags interval; elements = { ipv4_addr }; size 1200; policy performance; }
create map ip6 myIp6Table myIp6Map { flags interval; elements = { ipv6_addr }; size 1200; policy performance; }
####create map ip6 myIp6Table myIp6Map { type mark; flags interval; elements = { ipv6_addr }; size 1200; policy performance; }
create map inet myInetTable myInetMap { 
    flags interval; 
    size 1200; 
    elements = { $inet_proto;  }  
    elements = { inet_proto };  
    policy performance; 
};
create map inet myInetTable myInetMap { type mark; flags interval; elements = { inet_proto }; size 1200; policy performance; }
create map inet myInetTable myInetMap { 
    type mark; 
    flags interval; 
    elements = { inet_proto }; 
    size 1200; 
    policy performance; 
};


# create flowtable <flowtable_spec> { <flowtable_block> }
create flowtable myIpTable myIpFT { hook input priority 0; devices = { br0, eth0, eth1} ; }
create flowtable ip myIpTable myIpFT { hook input priority 0; devices = { eth0, eth1 } ; }
create flowtable ip6 myIp6Table myIp6FT { hook input priority 0; devices = { br0, eth0 } ; }
create flowtable inet myInetTable myInetFT { hook input priority 0; devices = { br0, eth1 } ; }

# create element <set_spec> <set_block_expr>
#create element myIpTable myIpSet { element, element }
create element netdev myNetdevTable myNetdevSet { 10.20.255.48/29 : goto group_114, 10.20.255.88/29 : goto group_114, 10.20.255.128/29 : goto group_114 } 
create element bridge myBridgeTable myBridgeSet { 8.8.8.8, 8.8.4.4 }
create element arp myArpTable myArpSet { 10.20.255.50 : 1:ffd8, 10.20.255.90 : 1:ffd5, 10.20.255.130 : 1:ffd2 }
create element ip myIpTable myIpSet { 10.20.255.88/29 : goto group_114 }
create element ip6 myIp6Table myIp6Set { 10.20.255.128/29 : goto group_114 }
create element inet myInetTable myInetSet { 10.20.255.50/32 : "1:0xffd9" }

# create counter <obj_spec> close_scope_counter 
# create counter <obj_spec> counter_obj counter_config close_scope_counter  
create counter ip myIpTable https-filter
create counter ip myIpTable https-filter
create counter netdev myNetdevTable https-filter  
create counter bridge myBridgeTable https-filter  
create counter arp myArpTable https-filter  
create counter ip myIpTable https-filter  
create counter ip6 myIp6Table https-filter  
create counter inet myInetTable https-filter  

# create quota <obj_spec> <quota_odj> <quota_config>
create quota filter http-quota over 25 mbytes
###create quota filter http-quota { over 25 mbytes };
###create quota filter ssh-quota { 10 kbytes }
create quota netdev myIpfilter http-quota over 25 mbytes;
create quota bridge myIpfilter http-quota over 25 mbytes
create quota arp myIpfilter http-quota over 25 mbytes
create quota ip myIpfilter http-quota over 25 mbytes
create quota ip6 myIpfilter http-quota until 525 kbytes
create quota inet myIpfilter http-quota over 25 mbytes

# create ct helper  obj_spec ct_obj_alloc { ct_helper_block } close_scope_ct
create ct helper myIpTable myCTHchain { };
create ct helper myIpTable myCTHchain { ; }
create ct helper myIpTable myCTHchain { ; };
create ct helper myIpTable myCTHchain { type "sip" protocol tcp; l3proto ip; }
create ct helper ip myIpTable cth { type "sip" protocol tcp; l3proto ip; }

# create ct timeout  obj_spec ct_obj_alloc { ct_timeout_block } 
create ct timeout myIpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout netdev myNetdevTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout bridge myBridgeTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout arp myArpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout ip myIpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout ip6 myIp6Table ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout inet myInetTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout myTable agressive-tcp {
        l3proto ip;
        protocol tcp;
        policy = {established: 100, close_wait: 4, close: 4}
    }

# create ct expectation  obj_spec ct_obj_alloc { ct_expect_block } close_scope_ct
create ct expectation myTable myExpectation { ; }
create ct expectation myTable myExpectation { ; } 
create ct expectation myTable e_pgsql {
        protocol tcp
        dport 5432
        timeout 1h
        size 12
        l3proto ip
    }


# create limit <obj_spec> <limit_obj> <limit_config>
create limit myIpTable myIpLimit rate 1/second
create limit netdev myNetdevTable myNetdevLimit rate 1/minute
create limit bridge myBridgeTable myBridgeLimit rate 1/hour
create limit ip myIpTable myIpLimit rate 1/day
create limit ip6 myIp6Table myIp6Limit rate 1/week
create limit inet myInetTable myInetLimit rate 1/second
create limit myIpTable myIpLimit rate 1/second burst 15 packets
###create limit myIpTable myIpLimit rate 1/second burst 1514 bytes

# create secmark obj_spec secmark_obj secmark_config close_scope_secmark
# Bison: CREATE SECMARK obj_spec secmark_obj secmark_config { secmark_block } close_scope_secmark 
create secmark myTable myTable mySecMark 
# Bison: CREATE SECMARK obj_spec secmark_obj secmark_config { common_block } close_scope_secmark 
####create secmark myTable sshtag { "system_u:object_r:ssh_server_packet_t:s0" }

# create synproxy obj_spec synproxy_obj synproxy_config close_scope_synproxy
#   Bison: ADD SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy 
create synproxy myTable synproxy_obj mss 1500 wscale 7;
create synproxy ip myTable synproxy_obj mss 1492 wscale 5;
create synproxy ip6 myTable synproxy_obj mss 1498 wscale 6;
create synproxy inet myTable synproxy_obj mss 1496 wscale 4;
create synproxy arp myTable synproxy_obj mss 1512  wscale 2;
create synproxy bridge myTable synproxy_obj mss 1518 wscale 3;
create synproxy netdev myTable synproxy_obj mss 1593 wscale 1
#   Bison: SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy (w/o 'add')
###create synproxy myTable https-synproxy {
###    mss 1460
###    wscale 7
###    timestamp sack-perm
###}
###create synproxy myTable other-synproxy {
###    mss 1460
###    wscale 5
###}


#!/usr/sbin/nft -f
# File: ct.nft
# Description: A test NFT file to exercise 'ct' Vim syntax highlightings.
#
# There are two syntaxes for 'ct' that must be kept separate due to the 
# following convolution of primary_expr->basic_expr->primary_expr that
# connects two syntaxes together to its top-level base_cmd/primary_expr:
#
#    ct_stmt
#    ct_expr
#
# ct_stmt->stmt is used ONLY within add_cmd, rule_alloc, chain_block, chain_stmt, insert_cmd replace_cmd & meter_stmt_alloc
# custom ct is used in list_cmd, delete_cmd, destroy_cmd
# ct_expr is used ONLY after expr syntax
#
# ct_stmt/ct_expr are used in:
#
#   ct_stmt
#   table ip filter {
#     ct_stmt
#     chain x {
#         goto { ct_stmt }
#         jump { ct_stmt }
#         tcp dport 22 add @ssh_flood '{ ip saddr ct ct_expr}' reject
#     }
#   }
#
#
# Both ct_stmt and ct_expr have nearly all identical 2nd sub-keywords
# (except for breakaway standalone 'list ct helpers' syntax, note plural
# form) but only ct_stmt have a mandatory 3rd keyword 'set' after
# its sub-keywords.
#
# NFTABLES MANPAGE details the following syntaxes:
#
#   Connection Tracking Statement (ct_stmt)
#
#     The enforced syntax are:
#
#       [add rule ] ct {mark | event | label | zone} set value
#
#   Connection Tracking Expression (ct_expr)
#
#     The enforced syntax are:
#
#       ct {state | direction | status | mark | expiration | helper | label | count | id}
#       ct [original | reply] {l3proto | protocol | bytes | packets | avgpkt | zone}
#       ct {original | reply} {proto-src | proto-dst}
#       ct {original | reply} {ip | ip6} {saddr | daddr}
#
#   Listing (list_cmd)
#     The enforced syntax are:
#
#       list ct { timeout | expectation | helper | helpers } table [family] table
#
#   Delete (delete_cmd)
#
#       delete ct helper [family] table name
#
#   Connection Limit Statement (connlimit_stmt->stateful_stmt)
#
#       add rule tcp port 15 ct count over 15
#
# PARSER (BISON) details the following:
#   According to parser_bison.y, the possible 2nd keywords after 'ct' in ct_expr syntax are
#
#     [add rule ] ct avgpkt
#     ct bytes
#     ct count   # not found in ct_stmt
#     ct daddr
#     ct direction
#     ct event
#     ct expiration
#     ct helper
#     ct id
#     ct label
#     ct l3proto
#     ct mark
#     ct original avgpkt
#     ct original bytes
#     ct original daddr
#     ct original ip saddr
#     ct original ip daddr
#     ct original ip6 saddr
#     ct original ip6 daddr
#     ct original l3proto
#     ct original packets
#     ct original proto-src
#     ct original proto-dst
#     ct original protocol
#     ct original saddr
#     ct original zone
#     ct packets
#     ct proto-src
#     ct proto-dst
#     ct protocol
#     ct reply avgpkt
#     ct reply bytes
#     ct reply daddr
#     ct reply ip saddr
#     ct reply ip daddr
#     ct reply ip6 saddr
#     ct reply ip6 daddr
#     ct reply l3proto
#     ct reply packets
#     ct reply proto-src
#     ct reply proto-dst
#     ct reply protocol
#     ct reply saddr
#     ct reply zone
#     ct saddr
#     ct state
#     ct status
#     ct secmark
#     ct zone
#
#   For ct_stmt, 2nd keywords after 'ct' syntax:
#     [ add rule ] ct avgpkt set
#     ct bytes set
#     ct daddr set
#     ct direction set
#     ct event set
#     ct expectation set
#     ct expiration set
#     ct helper set
#     ct id set
#     ct l3proto set
#     ct label set
#     ct mark set
#     ct original bytes set
#     ct original packets set
#     ct original avgpkt set
#     ct original zone set
#     ct original set $VARIABLE
#     ct packets
#     ct proto-src set
#     ct proto-dst set
#     ct protocol set
#     ct reply avgpkt set
#     ct reply bytes set
#     ct reply packets set
#     ct reply set
#     ct reply zone set
#     ct saddr set
#     ct secmark set
#     ct state set
#     ct status set
#     ct zone
#
# Other syntax usage of 'ct' are given below for completeness:
#
#   list_cmd
#     list ct expectations family_spec
#     list ct expectations [ family_spec ] table_id ct_id
#     list ct expectations table [ family_spec ] table_id
#     list ct helper family_spec
#     list ct helper  [ family_spec ] table_id ct_id
#     list ct helpers table [ family_spec ] table_id
#     list ct timeout family_spec
#     list ct timeout [ family_spec ] table_id ct_id
#     list ct timeout table [ family_spec ] table_id
#   counter_cmd
#     counter ct count <NUM>
#     counter ct count over <NUM>
#   add_cmd
#     ct helper
#     ct timeout
#     ct expectation
#     add ct helper
#     add ct timeout
#     add ct expectation
#   create_cmd
#     create ct helper
#     create ct timeout
#     create ct expectation
#   delete_cmd
#     delete ct helper
#     delete ct timeout
#     delete ct expectation
#   destroy_cmd
#     destroy ct helper
#     destroy ct timeout
#     destroy ct expectation
#
# Because of the different syntax pathway after ct's 2nd subkeyword,
# all ct sub-keywords must be kept separate (and duplicated) between
# ct_stmt and ct_expr.  This is important for a simple follow-on
# parser used by syntax highlighters like Vim/NeoVim.
#
# Furthermore, a breakout of 2nd-subkeyword 'helpers' will be created
# apart from
#
# The following keywords after ANY 'ct' keyword are (in lexical order):
#
#     avgpkt     ct_key_dir_optional->ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     bytes      ct_key_dir_optional->ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     daddr      ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     direction  ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     expiration ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     event      ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     helper     ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     id         ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     l3proto    ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     label      ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     mark       ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     original   ct_dir->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     packets    ct_key_dir_optional->ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     proto-src  ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     proto-dst  ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     protocol   ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     reply      ct_dir->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     saddr       ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     state      ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     status     ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     secmark    ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#     zone       ct_key_dir_optional->ct_key->'ct'->ct_expr->(primary_expr|primary_stmt_expr)
#
#     expectation ct_obj_type->'delete'->delete_cmd->base_cmd
#     expectation ct_obj_type->'destroy'->destroy_cmd->base_cmd
#     expectation ct_obj_type->'list'->list_cmd->base_cmd
#     expectation ct_cmd_type->'list'->list_cmd->base_cmd
#     expectation 'ct'->add_cmd->base_cmd
#     expectation create_cmd->base_cmd
#     expectation table_block->'table'->add_cmd->base_cmd
#     expectation table_block->create_cmd->base_cmd
#     helper     'ct'->add_cmd->base_cmd
#     helper     create_cmd->base_cmd
#     helper     ct_obj_type->'delete'->delete_cmd->base_cmd
#     helper     ct_obj_type->'destroy'->destroy_cmd->base_cmd
#     helper     ct_obj_type->'list'->list_cmd->base_cmd
#     helper     table_block->add_cmd->base_cmd
#     helper     table_block->create_cmd->base_cmd
#
#     helpers    ct_cmd_type->'list'->list_cmd->base_cmd
#     timeout    'ct'->add_cmd->base_cmd
#     timeout    create_cmd->base_cmd
#     timeout    ct_obj_type->'delete'->delete_cmd->base_cmd
#     timeout    ct_obj_type->'destroy'->destroy_cmd->base_cmd
#     timeout    ct_cmd_type->'list'->list_cmd->base_cmd
#     timeout    ct_obj_type->'list'->list_cmd->base_cmd
#     timeout    table_block->add_cmd->base_cmd
#     timeout    table_block->create_cmd->base_cmd
#
#     avgpkt     'set' ct_key_dir_optional->ct_key->'ct'->ct_stmt->stmt
#     bytes      'set' ct_key_dir_optional->ct_key->'ct'->ct_stmt->stmt
#     daddr      'set' ct_key->'ct'->ct_stmt->stmt
#     direction  'set' ct_key->'ct'->ct_stmt->stmt
#     expiration 'set' ct_key->'ct'->ct_stmt->stmt
#     event      'set' ct_key->'ct'->ct_stmt->stmt
#     helper     'set' ct_key->'ct'->ct_stmt->stmt
#     id         'set' ct_key->'ct'->ct_stmt->stmt
#     l3proto    'set' ct_key->'ct'->ct_stmt->stmt
#     label      'set' ct_key->'ct'->ct_stmt->stmt
#     mark       'set' ct_key->'ct'->ct_stmt->stmt
#     expectation 'set' 'ct'->objref_stmt_ct->objref_stmt->stmt
#     original   'set' ct_dir->'ct'->ct_stmt->stmt
#     packets    'set' ct_key_dir_optional->ct_key->'ct'->ct_stmt->stmt
#     proto-src  'set' ct_key->'ct'->ct_stmt->stmt
#     proto-dst  'set' ct_key->'ct'->ct_stmt->stmt
#     protocol   'set' ct_key->'ct'->ct_stmt->stmt
#     reply      'set' ct_dir->'ct'->ct_stmt->stmt
#     saddr      'set' ct_key->'ct'->ct_stmt->stmt
#     secmark    'set' ct_key->'ct'->ct_stmt->stmt
#     state      'set' ct_key->'ct'->ct_stmt->stmt
#     status     'set' ct_key->'ct'->ct_stmt->stmt
#     zone       'set' ct_key_dir_optional->ct_key->'ct'->ct_stmt->stmt
#     timeout    'set' 'ct'->objref_stmt_ct->objref_stmt->stmt
#
#
# clarification on stmt, top-down approach
#  stmt->
#  concat_expr->basic_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  primary_expr->basic_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  base_cmd->describe_cmd->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  base_cmd->add_cmd->map_block->typeof_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  base_cmd->create_cmd->map_block->typeof_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  base_cmd->add_cmd->table_block->map_block->typeof_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  base_cmd->add_cmd->table_block->map_block->typeof_data_expr->typeof_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  base_cmd->add_cmd->set_block->typeof_key_expr->typeof_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  base_cmd->create_cmd->set_block->typeof_key_expr->typeof_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  base_cmd->add_cmd->table_block->set_block->typeof_key_expr->typeof_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#
#  base_cmd->add_cmd->table_block->map_block->typeof_data_expr->typeof_verdict_expr->typeof_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  base_cmd->add_cmd->table_block->map_block->typeof_verdict_expr->primary_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->ct_stmt->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->dup_stmt->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->fwd_stmt->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->masq_stmt->masq_stmt_args->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->meta_stmt->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->nat_stmt->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->objref_stmt->objref_stmt_counter->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->objref_stmt->objref_stmt_ct->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->objref_stmt->objref_stmt_limit->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->objref_stmt->objref_stmt_quota->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->objref_stmt->objref_stmt_synproxy->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->payload_stmt->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->redir_stmt->redir_stmt_arg->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->tproxy_stmt->stmt_expr->map_stmt_expr->concat_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->*->stmt_expr->map_stmt_expr->concat_stmt_expr->basic_stmt_expr->exclusive_or_stmt_expr->and_stmt_expr->shift_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->*->stmt_expr->multiton_stmt_expr->prefix_stmt_expr->basic_stmt_expr->exclusive_or_stmt_expr->and_stmt_expr->shift_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  concat_stmt_expr->primary_stmt_expr->basic_stmt_expr->exclusive_or_stmt_expr->and_stmt_expr->shift_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->*->stmt_expr->map_stmt_expr->shift_stmt_expr->primary_stmt_expr->basic_stmt_expr->exclusive_or_stmt_expr->and_stmt_expr->shift_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->*->stmt_expr->multiton_stmt_expr->range_stmt_expr->basic_stmt_expr->exclusive_or_stmt_expr->and_stmt_expr->shift_stmt_expr->primary_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->queue_stmt->queue_stmt_expr->hash_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->match_stmt->relational_expr->expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->*->hash_expr->expr->map_expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->match_stmt->relational_expr->expr->map_expr->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->queue_stmt->queue_stmt_expr->map_expr->concat_expr->basic-expr->primary_expr->ct_expr
#
#  stmt->meter_stmt->meter_stmt_alloc->meter_key_expr->meter_key_expr_alloc->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->map_stmt->set_elem_expr_stmt->set_elem_expr_stmt_alloc->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->set_stmt->set_elem_expr_stmt->set_elem_expr_stmt_alloc->concat_expr->basic-expr->primary_expr->ct_expr
#  stmt->verdict_stmt->verdict_map_stmt->concat_expr->basic-expr->primary_expr->ct_expr
#
#  primary_expr->basic-expr->primary_expr->ct_expr
#  basic-expr->primary_expr->ct_expr
#  base_cmd->describe_cmd->primary_expr->ct_expr
#  typeof_expr->>primary_expr->ct_expr
#  typeof_verdict_expr->>primary_expr->ct_expr
#  primary_expr->ct_expr
#  primary_stmt_expr->ct_expr
#
# Note:
#   Syntax '*_cmd' is the command, often at the beginning of a line, block, or group.
#   Syntax '*_stmt' is the statement, almost always after the 'add rule',
#       'rule' or alone by itself on a line.
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# Lexical: [ [ 'add' ] 'rule' ] ct_stmt
# add_cmd without the 'add'
#
# Bison: ct helper <obj_spec> '{' }
ct helper table_id ct_id { }

# Bison: ct helper <obj_spec> '{' ';' '}'
ct helper ip table_id ct_id { ; };

# ct helper <obj_spec> '{' <common_block> '}'
# ct helper <obj_spec> '{' <include> '}'
ct helper ip table_id ct_id { 
    include "ct-helper-rules.nft"; 
};
# ct helper <obj_spec> '{' <define> '}'
ct helper ip table_id ct_id { 
    define X = 1;
};
# ct helper <obj_spec> '{' <redefine> '}'
ct helper ip table_id ct_id { 
    redefine X = 1;
};
# ct helper <obj_spec> '{' <undefine> '}'
ct helper ip table_id ct_id { 
    undefine X;
};

# ct helper <obj_spec> '{' type <quoted_str> protocol <ct_l4protoname> '}'
ct helper table_id { type "sip" protocol tcp; l3proto ip; }
ct helper ip table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper ip6 table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper inet table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper arp table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper bridge table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper netdev table_id cth { type "sip" protocol tcp; l3proto ip; }


# Bison: CT HELPER obj_spec ct_obj ct_config '{' ct_block } close_scope_ct 
# Bison: ct helper <obj_spec> '{' <ct_helper_block> }
# Bison: ct helper <table_spec> '{' <ct_helper_block> }
# Bison: ct helper <family_spec> <table_id> '{' <ct_helper_block> }
# Syntax: obj_spec->'helper'->'ct'->add_cmd->base_cmd
ct helper ip table_id ct_id l3proto zone set ip6 table_id { };
ct helper ip6 table_id ct_id l3proto type sip zone set ip6 { };
ct helper inet table_id ct_id l3proto zone set ip6 table_id { };
ct helper netdev table_id ct_id l3proto zone set ip6 table_id { };
ct helper bridge table_id ct_id l3proto zone set ip6 table_id { };
ct helper arp table_id ct_id l3proto zone set ip6 table_id { };

# obj_spec->'helper'->'ct'->'rule'->add_cmd->base_cmd
rule ct helper ip table_id ct_id l3proto zone set ip6 table_id { };
rule ct helper ip6 table_id ct_id l3proto type sip zone set ip6 { };
rule ct helper inet table_id ct_id l3proto zone set ip6 table_id { };
rule ct helper netdev table_id ct_id l3proto zone set ip6 table_id { };
rule ct helper bridge table_id ct_id l3proto zone set ip6 table_id { };
rule ct helper arp table_id ct_id l3proto zone set ip6 table_id { };

# base_cmd add_cmd 'table' table_spec table_block 'ct' 'helper' ct_helper_block

table T { ct helper CT {; }; };
table ip T { ct helper CT {;} }
table ip6 T { ct helper CT { };}
table inet T { ct helper CT { } };
table netdev T { ct helper CT { } }
table bridge T { ct helper CT { } }
table arp T { ct helper CT { } }
table T { ct helper CT { type "MYTYPE" protocol tcp } }
table T { ct helper CT { l3proto ip6 } }
table T { ct helper CT { l3proto ip6; } }
table T {
    ct helper CT {
        type "MYTYPE" protocol tcp;
        l3proto bridge;
    }
}
table T {
    ct helper CT {
        # common_block
        include "/directory/subdirectory/filename.filetype"
        define A = 1
        redefine A = 2
        undefine A;
    }
}

# base_cmd add_cmd 'table' table_spec table_block 'ct' 'timeout' ct_timeout_block
table T {
    ct timeout CT {
        protocol tcp
        policy = { established : 1h };
        protocol udp
        policy = { replied : 1h, unreplied : 15 };
        l3proto ip6;
        # common_block
        include "/directory/subdirectory/filename.filetype"
        define A = 1
        redefine A = 2
        undefine A;
        comment "some comments"
    }
}
table T { ct timeout TO { } }
table ip T { ct timeout TO { } }
table ip6 T { ct timeout TO { } }
table inet T { ct timeout TO { } }
table netdev T { ct timeout TO { } }
table bridge T { ct timeout TO { } }
table arp T { ct timeout TO { } }
table T { ct timeout TO { protocol tcp } }
table T { ct timeout TO { l3proto ip6 } }
table T { ct timeout TO { protocol udp policy = { unreplied : 126; }; }; };
table T { ct timeout TO { protocol udp policy = { replied : 126; }; }; };
table T { ct timeout TO { protocol udp policy = { unreplied:126, replied : 126; }; }; };
table T { ct timeout TO { protocol tcp policy = { last_ack:15s, established : 1H15M } } }

# base_cmd add_cmd 'table' table_spec table_block 'ct' 'expectation' ct_expect_block
table T {
    ct expectation CE {
        # common_block
        include "/directory/subdirectory/filename.filetype"
        define A = 1
        redefine A = 2
        undefine A
    }
}
table T { ct expectation CE { } }
table ip T { ct expectation CE { } }
table ip6 T { ct expectation CE { } }
table inet T { ct expectation CE { } }
table netdev T { ct expectation CE { } }
table bridge T { ct expectation CE { } }
table arp T { ct expectation CE { } }
table T { ct expectation CE { protocol tcp } }
table T { ct expectation CE { dport 23 } }
table T { ct expectation CE { size 123 } }
table T { ct expectation CE { timeout 15h } }
table T { ct expectation CE { l3proto netdev } }
table T {
    ct expectation CE {
        protocol tcp
        dport 23
        size 123
        timeout 15h
        l3proto netdev
    }
}

# 'helper'->'ct'->'rule'->'add'->add_cmd->base_cmd
add rule ct helper ip table_id l3proto zone set ip6 table_id { };
add rule ct helper ip6 table_id l3proto type sip zone set ip6 { };
add rule ct helper inet table_id l3proto zone set ip6 table_id { };
add rule ct helper netdev table_id l3proto zone set ip6 table_id { };
add rule ct helper bridge table_id l3proto zone set ip6 table_id { };
add rule ct helper arp table_id l3proto zone set ip6 table_id { };
#
add rule table_id chain_id { ct helper ip table_id type l3proto zone set ip6 { }; }

# ct helper <obj_spec> '{' <ct_helper_config> '}'
add rule table_id chain_id { ct helper ip table_id type l3proto zone set ip6 { }; }

# ct timeout obj_spec ct_obj_alloc '{' ct_timeout_block '}' close_scope_ct
ct timeout  l3proto zone set ip6 table_id { };
ct timeout table_id ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout netdev myNetdevTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout bridge myBridgeTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout arp myArpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout ip table_id ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout ip6 myIp6Table ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout inet myInetTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }

ct timeout table_id agressive-tcp {
        l3proto ip;
        protocol tcp;
        policy = {established: 100, close_wait: 4, close: 4}
    }

table ip filter {  # nftables manpage
    ct timeout customtimeout {
        protocol tcp;
        l3proto ip
        policy = { established: 120, close: 20 }
    }

    chain output {
        type filter hook output priority filter; policy accept;
        ct timeout set "customtimeout"
    }
}

# Bison: ADD CT EXPECTATION obj_spec ct_obj_alloc '{' ct_expect_block '}' close_scope_ct
ct expectation  l3proto zone set ip6 table_id { };
ct expectation table_id myExpectation { ; } 
ct expectation table_id e_pgsql {
        protocol tcp
        dport 5432
        timeout 1h
        size 12
        l3proto ip
    }

# create_cmd
# create ct helper  obj_spec ct_obj_alloc '{' ct_helper_block '}' close_scope_ct
create ct helper table_id { };
create ct helper table_id { ; }
create ct helper table_id { ; };
create ct helper table_id { type "sip" protocol tcp; l3proto ip; }
create ct helper ip table_id cth { type "sip" protocol tcp; l3proto ip; }

# create ct timeout  obj_spec ct_obj_alloc '{' ct_timeout_block '}' 
create ct timeout
create ct timeout table_id ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout netdev myNetdevTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout bridge myBridgeTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout arp myArpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout ip table_id ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout ip6 myIp6Table ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout inet myInetTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout table_id agressive-tcp {
        l3proto ip;
        protocol tcp;
        policy = {established: 100, close_wait: 4, close: 4}
    }

# create ct expectation  obj_spec ct_obj_alloc '{' ct_expect_block '}' close_scope_ct
create ct expectation table_id myExpectation { ; }
create ct expectation table_id myExpectation { ; } 
create ct expectation table_id e_pgsql {
        protocol tcp
        dport 5432
        timeout 1h
        size 12
        l3proto ip
    }

# list_cmd
list ct expectation table_id ct_id
list ct expectation ip table_id ct_id
list ct expectation ip6 table_id ct_id
list ct expectation inet table_id ct_id
list ct expectation netdev table_id ct_id
list ct expectation bridge table_id ct_id
list ct expectation arp table_id ct_id
list ct expectation table table_id
list ct expectation table ip table_id
list ct expectation table ip6 table_id
list ct expectation table inet table_id
list ct expectation table netdev table_id
list ct expectation table bridge table_id
list ct expectation table arp table_id
list ct helper table_id ct_id
list ct helper ip table_id ct_id
list ct helper ip6 table_id ct_id
list ct helper net table_id ct_id
list ct helper netdev table_id ct_id
list ct helper bridge table_id ct_id
list ct helper arp table_id ct_id

# table_spec->'table'->'helpers'->list_cmd->base_cmd
list ct helpers table table_id
list ct helpers table ip table_id
list ct helpers table ip6 table_id
list ct helpers table inet table_id
list ct helpers table netdev table_id
list ct helpers table bridge table_id
list ct helpers table arp table_id


# table_spec->'table'->'helpers'->list_cmd->base_cmd
list ct timeout table_id ct_id
list ct timeout ip table_id ct_id
list ct timeout ip6 table_id ct_id
list ct timeout inet table_id ct_id
list ct timeout netdev table_id ct_id
list ct timeout bridge table_id ct_id
list ct timeout arp table_id ct_id
list ct timeout table table_id
list ct timeout table ip table_id
list ct timeout table ip6 table_id
list ct timeout table inet table_id
list ct timeout table netdev table_id
list ct timeout table bridge table_id
list ct timeout table arp table_id

list ct helper table_id {}
list ct helper table_id { };
list ct helper table_id { ; }
list ct helper table_id { ; };

# delete_cmd
# delete ct <ct_obj_type> <obj_spec> <ct_obj_alloc>
delete ct helper table_id ct_id
delete ct helper ip table_id ct_id
delete ct helper ip6 table_id ct_id
delete ct helper inet table_id ct_id
delete ct helper netdev table_id ct_id
delete ct helper bridge table_id ct_id
delete ct helper arp table_id ct_id

delete ct helper table_id {}
delete ct helper table_id { };
delete ct timeout
delete ct expectation

# destroy_cmd
destroy ct helper
destroy ct timeout
destroy ct expectation

destroy ct helper table_id {}
destroy ct helper table_id { };


# ct_expr
T C position 1 ct helper set ip6 table_id myCTHchain { };
T C position 1 ct original set ip table_id myCTHchain { };
T C position 1 ct reply set inet table_id myCTHchain { };

ip6 T C position 1 ct helper set ip6 table_id myCTHchain { };
ip6 T C position 1 ct original set ip table_id myCTHchain { };
ip6 T C position 1 ct reply set inet table_id myCTHchain { };

rule ip6 table_id myChain position 1 ct helper set ip6 table_id myCTHchain { };
rule ip6 table_id myChain position 1 ct original set ip table_id myCTHchain { };
rule ip6 table_id myChain position 1 ct reply set inet table_id myCTHchain { };

add rule ip6 table_id myChain position 1 ct proto zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct mark zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct state zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct direction zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct status zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct expiration zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct helper zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct saddr zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct daddr zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct proto-src zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct proto-dst zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct label zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct event zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct secmark zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct id zone set ip6 table_id myCTHchain { };

add rule ip6 table_id myChain position 1 ct bytes set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct packets set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct avgpkt set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct zone set ip6 table_id myCTHchain { };

add rule table_id myChain ct state { new, established, related, untracked }
add rule table_id myChain ct state != related
add rule table_id myChain ct state established
add rule table_id myChain ct state 8
add rule table_id myChain ct direction original
add rule table_id myChain ct direction != original
add rule table_id myChain ct direction { reply, original }
add rule table_id myChain ct status expected
add rule table_id myChain (ct status & expected) != expected
add rule table_id myChain ct status { expected, seen-reply, assured, confirmed, snat, dnat, dying }
add rule table_id myChain ct mark 0
add rule table_id myChain ct mark or 0x23 == 0x11
add rule table_id myChain ct mark or 0x3 != 0x1
add rule table_id myChain ct mark and 0x23 == 0x11
add rule table_id myChain ct mark and 0x3 != 0x1
add rule table_id myChain ct mark xor 0x23 == 0x11
add rule table_id myChain ct mark xor 0x3 != 0x1
add rule table_id myChain ct mark 0x00000032
add rule table_id myChain ct mark != 0x00000032
add rule table_id myChain ct mark 0x00000032-0x00000045
add rule table_id myChain ct mark != 0x00000032-0x00000045
add rule table_id myChain ct mark { 0x32, 0x2222, 0x42de3 }
add rule table_id myChain ct mark { 0x32-0x2222, 0x4444-0x42de3 }
add rule table_id myChain ct mark set 0x11 xor 0x1331
add rule table_id myChain ct mark set 0x11333 and 0x11
add rule table_id myChain ct mark set 0x12 or 0x11
add rule table_id myChain ct mark set 0x11
add rule table_id myChain ct mark set mark
add rule table_id myChain ct mark set mark map { 1 : 10, 2 : 20, 3 : 30 }
add rule table_id myChain ct expiration 30
add rule table_id myChain ct expiration 30s
add rule table_id myChain ct expiration != 233
add rule table_id myChain ct expiration != 3m53s
add rule table_id myChain ct expiration 33-45
add rule table_id myChain ct expiration 33s-45s
add rule table_id myChain ct expiration != 33-45
add rule table_id myChain ct expiration != 33s-45s
add rule table_id myChain ct expiration { 33, 55, 67, 88 }
add rule table_id myChain ct expiration { 1m7s, 33s, 55s, 1m28s }
add rule table_id myChain ct helper "ftp"
add rule table_id myChain ct original bytes > 100000
add rule table_id myChain ct bytes > 100000
add rule table_id myChain ct reply packets < 100
add rule table_id myChain ct original ip saddr 192.168.0.1
add rule table_id myChain ct reply ip saddr 192.168.0.1
add rule table_id myChain ct original ip saddr 192.168.1.0/24
add rule table_id myChain ct reply ip saddr 192.168.1.0/24
add rule table_id myChain ct original ip daddr 192.168.0.1
add rule table_id myChain ct reply ip daddr 192.168.0.1
add rule table_id myChain ct original ip daddr 192.168.1.0/24
add rule table_id myChain ct reply ip daddr 192.168.1.0/24
add rule table_id myChain ct original l3proto ipv4
add rule table_id myChain ct original protocol 6
add rule table_id myChain ct original proto-dst 22
add rule table_id myChain ct reply proto-src 53
add rule table_id myChain ct count 2
add rule table_id myChain ct count over 4

# delete ct <ct_obj_type> <obj_spec> <ct_obj_alloc>
delete ct timeout table_id ctt
delete ct timeout ip table_id ctt
delete ct timeout ip6 myIp6Table ctt
delete ct timeout inet myInetTable ctt
delete ct timeout netdev myNetdevTable ctt
delete ct timeout bridge myBridgeTable ctt
delete ct timeout arp myArpTable ctt

delete ct expectation table_name quota_name 
delete ct expectation ip table_name quota_name
delete ct expectation ip6 table_name quota_name
delete ct expectation inet table_name quota_name
delete ct expectation netdev table_name quota_name
delete ct expectation arp table_name quota_name
delete ct expectation bridge table_name quota_name

list chain table_name chain_name ct

# 
# connlimit_stmt->stateful_stmt->stmt->rule_position->rule->add_cmd
ct count 123
ct count 123
rule ct count over 123
add rule ct count over 15

##########################################################################
# complex
##########################################################################
table inet raw {  # nftables manpage
  table inet raw
  chain prerouting {
      type filter hook prerouting priority raw;
      ct zone set iif map { "eth1" : 1, "veth1" : 2 }
  }
  chain output {
      type filter hook output priority raw;
      ct zone set oif map { "eth1" : 1, "veth1" : 2 }
  }
}

table ip filter {  # nftables manpage
    ct timeout customtimeout {
        protocol tcp;
        l3proto ip
        policy = { established: 120, close: 20 }
    }
    chain output {
        type filter hook output priority filter; policy accept;
        ct timeout set "customtimeout"
    }
}

table inet myhelpers {  # nftables manpage
    ct helper ftp-standard {
        type "ftp" protocol tcp
    }
    chain prerouting {
        type filter hook prerouting priority filter;
        tcp dport 21 ct helper set "ftp-standard"
    }
}

table inet raw {  # nftables manpage
    chain prerouting {
        type filter hook prerouting priority raw;
        ct zone set iif map { "eth1" : 1, "veth1" : 2 }
    }
    chain output {
        type filter hook output priority raw;
        ct zone set oif map { "eth1" : 1, "veth1" : 2 }
    }
}
ct event set new,related,destroy  # nftables manpage
table ip x {
    chain z {
        type filter hook input priority filter; policy accept;
        ct state invalid, untracked synproxy mss 1460 wscale 9 timestamp sack-perm
        ct state invalid drop
    }
}

table inet filter {  # nftables manpage
    chain input {
        type filter hook input priority filter; policy accept;
        ct state established,related accept # handle 4
        ip saddr 10.1.1.1 tcp dport ssh accept # handle 5
    }
}

#!/usr/sbin/nft -f
# File: dccp.nft
# Description: A test NFT file to exercise 'dccp_hdr_field' Vim syntax highlightings.
#
# base_cmd add_cmd 'set'
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_set
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

add rule table_id chain_id dccp sport;
add rule table_id chain_id dccp dport;
add rule table_id chain_id dccp type;

add rule table_id chain_id dccp option 15;


#!/usr/sbin/nft -f
# File: delete.nft
# Description: A test NFT file to exercise 'delete' Vim syntax highlightings.
#
# base_cmd 'delete' delete_cmd 
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_set
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################


delete table ;

# delete table <table_spec>
# 'table'->delete_cmd->'delete'->base_cmd->line
delete table T
delete table last
delete table ip T
delete table ip6 T
delete table inet T
delete table netdev T
delete table bridge T
delete table arp T
delete table handle 123
delete table ip handle 123
delete table ip6 handle 123
delete table inet handle 123
delete table netdev handle 123
delete table bridge handle 123
delete table arp handle 123

# delete chain <chainid_spec>
# common_block->chain_block->'{'->'chain'->delete_cmd->'delete'->base_cmd->line
delete chain T C
delete chain ip T C
delete chain ip6 T C
delete chain inet T C
delete chain netdev T C
delete chain bridge T C
delete chain arp T C

delete chain T C { }
delete chain ip T C {  }
delete chain ip6 T C {  }
delete chain inet T C {  }
delete chain netdev T C {  }
delete chain bridge T C {  }
delete chain arp T C { }

delete chain T C { define my_var; };

delete chain T handle 123123
delete chain ip T handle 15
delete chain inet T handle 15
delete chain inet T handle 42  # comment
delete chain ip6 T handle 15
delete chain bridge T handle 15
delete chain arp T handle 15
delete chain netdev T handle 15

# delete rule <ruleid_spec>
delete rule T C handle 16
delete rule last C handle 16
delete rule T last handle 16
delete rule last last handle 16
delete rule arp T C handle 16
delete rule bridge T C handle 16
delete rule filter output handle 5
delete rule filter output ip saddr 192.168.1.1 counter  # not implemented yet
delete rule inet T C handle 16
delete rule ip6 T C handle 16
delete rule ip T C handle 42
delete rule netdev T C handle 16
delete rule T C handle 42
delete rule T C ip saddr 127.0.0.1
delete rule T C ct l3proto set $MYMAP map { *eth0 }
delete rule T C ct proto set 1 / 1
delete rule T C ct mark set 1-1
delete rule T C ct state set ether 12:23:34:45:56:67  # keyword_expr
delete rule T C ct direction set ip 127.0.0.1  # keyword_expr
delete rule T C ct status set vlan 1  # keyword_expr
delete rule T C ct expiration set arp  # keyword_expr
delete rule T C ct helper set dnat  # keyword_expr
delete rule T C ct saddr set ecn  # keyword_expr
delete rule T C ct daddr set reset  # keyword_expr
delete rule T C ct proto-src set destroy  # keyword_expr
delete rule T C ct proto-dst set original  # keyword_expr
delete rule T C ct label set reply  # keyword_expr
delete rule T C ct event set label  # keyword_expr
delete rule T C ct secmark set last  # keyword_expr
delete rule T C ct id set
delete rule T C ct bytes set
delete rule T C ct packets set
delete rule T C ct avgpkt set
delete rule T C ct zone set
delete rule T C ct original set
delete rule T C ct reply set last 

# delete set <set_spec>
delete set T S
delete set ip T S
delete set ip6 T S
delete set inet T S
delete set netdev T S
delete set bridge T S
delete set arp T S

# delete set <setid_spec>
delete set T handle 123
delete set ip T handle 123
delete set inet T handle 42  # comment

# delete map <set_spec>
delete map T M 
delete map ip T M 
delete map ip6 T M 
delete map inet T M 
delete map netdev T M 
delete map bridge T M 
delete map arp T M 

# delete element <set_spec> <set_block_expr>
delete element T M { 4.4.4.4 }
delete element T M { elements = { element, element }; }
delete element ip T M { 4.4.4.4 }
delete element ip T M { element, element }
delete element ip T M { elements = { element, element } ; }
delete element ip6 T M { 4.4.4.4 }
delete element ip6 T M { element, element }
delete element ip6 T M { elements = { element, element } ; }
delete element inet T M { 10.0.0.1 }
delete element inet T M { element, element }
delete element inet T M { elements = { element, element } ; }
delete element netdev T M { 10.0.0.1, 127.0.0.1 }
delete element netdev T M { element, element }
delete element netdev T M { elements = { element, element } ; }
delete element bridge T M { 4.4.4.4 }
delete element bridge T M { element, element }
delete element bridge T M { elements = { element, element } ; }
delete element arp T M { 4.4.4.4 }
delete element arp T M { element, element }
delete element arp T M { elements = { element, element } ; }

# delete counter <obj_spec>
delete counter T CounterName
delete counter ip T CounterName
delete counter ip6 T CounterName
delete counter inet T CounterName
delete counter netdev T CounterName
delete counter bridge T CounterName
delete counter arp T CounterName

# 'delete' 'flowtable' <flowtable_spec>
# common_block->flowtable_block->'{'->'flowtable'->delete_cmd->'delete'->base_cmd->line
delete flowtable T FT 
delete flowtable ip T FT 
delete flowtable ip6 T FT 
delete flowtable inet T FT 
delete flowtable netdev T FT 
delete flowtable bridge T FT 
delete flowtable arp T FT 

delete flowtable T FT { define my_var; };
delete flowtable T FT { hook input priority 0; devices = { br0, eth0, eth1} ; }
delete flowtable ip T FT { hook input priority 0; devices = { eth0, eth1 } ; }
delete flowtable ip6 T FT { hook input priority 0; devices = { br0, eth0 } ; }
delete flowtable inet T FT { hook input priority 0; devices = { br0, eth1 } ; }
delete flowtable netdev T FT { flowtable_block }
delete flowtable bridge T FT { hook input priority 0; devices = { br0, eth1 } ; }
delete flowtable arp T FT { hook input priority 0; devices = { br0, eth1 } ; }

delete flowtable T handle 15 
delete flowtable ip T handle 15
delete flowtable ip6 T handle 15 
delete flowtable inet T handle 15 
delete flowtable netdev T handle 15 
delete flowtable bridge T handle 15 
delete flowtable arp T handle 15 

# delete counter <objid_spec>
delete counter netdev T handle 1

# delete quota <obj_spec>
delete quota T Q 
delete quota ip T Q
delete quota ip6 T Q
delete quota inet T Q
delete quota netdev T Q
delete quota bridge T Q
delete quota arp T Q

# delete quota <objid_spec>
delete quota T handle 15
delete quota ip T handle 15
delete quota ip6 T handle 15
delete quota inet T handle 123
delete quota netdev T handle 15
#delete quota inet T index 345  # not yet available
#delete quota inet T position 234  # not yet available
delete quota bridge T handle 15
delete quota arp T handle 15

# delete ct <ct_obj_type> <obj_spec> <ct_obj_alloc>
delete ct helper T ct_id
delete ct helper ip T ct_id
delete ct helper ip6 T ct_id
delete ct helper inet T ct_id
delete ct helper netdev T ct_id
delete ct helper bridge T ct_id
delete ct helper arp T ct_id
delete ct helper T { };
delete ct helper T {}

delete ct timeout
delete ct timeout T ct_id
delete ct timeout ip T ct_id
delete ct timeout ip6 T ct_id
delete ct timeout inet T ct_id
delete ct timeout netdev T ct_id
delete ct timeout bridge T ct_id
delete ct timeout arp T ct_id

delete ct expectation
delete ct expectation T Q 
delete ct expectation ip T Q
delete ct expectation ip6 T Q
delete ct expectation inet T Q
delete ct expectation netdev T Q
delete ct expectation bridge T Q
delete ct expectation arp T Q

#   'delete' 'limit' ( obj_spec | objid_spec ) 
# limit_config->identifier->family_spec->table_spec->'limit'->'delete'->delete_cmd->base_cmd
delete limit T L 
delete limit ip T L
delete limit ip6 T L
delete limit inet T L
delete limit netdev T L
delete limit bridge T L
delete limit arp T L

delete limit T handle 15
delete limit ip T handle 15
delete limit ip6 T handle 15
delete limit inet T handle 15
delete limit netdev T handle 15
delete limit bridge T handle 15
delete limit arp T handle 15

delete limit T L rate 1 /hour 
delete limit T L rate 1 / week
delete limit T L rate over 3600000/ day
delete limit T L rate until 1/second
delete limit T L rate 1/minute burst 5 packets
delete limit ip T L rate 1/ day
delete limit ip6 T L rate 1 / week
delete limit inet T L rate 1/second
delete limit netdev T L rate 1/minute 
delete limit bridge T L rate 1 /hour 
delete limit arp T L rate 1 /hour 

delete secmark arp T handle 15
delete secmark arp T secmark_name
delete secmark bridge T handle 15
delete secmark bridge T secmark_name
delete secmark inet T handle 15
delete secmark inet T secmark_name
delete secmark ip6 T handle 15
delete secmark ip6 T secmark_name
delete secmark ip T handle 15
delete secmark ip T secmark_name
delete secmark netdev T handle 15
delete secmark netdev T secmark_name
delete secmark T handle 15
delete secmark T secmark_name 

delete synproxy arp T handle 15
delete synproxy arp T synproxy_name
delete synproxy bridge T handle 15
delete synproxy bridge T synproxy_name
delete synproxy inet T handle 15
delete synproxy inet T synproxy_name
delete synproxy ip6 T handle 15
delete synproxy ip6 T synproxy_name
delete synproxy ip T handle 15
delete synproxy ip T synproxy_name
delete synproxy netdev T handle 15
delete synproxy netdev T synproxy_name
delete synproxy T handle 15
delete synproxy T synproxy_name 


#!/usr/sbin/nft -f
# File: describe.nft
# Description: A test NFT file to exercise 'describe' Vim syntax highlightings.
#
# base_cmd 'describe'
# nft_line/nft_base_cmd/nft_base_cmd_describe
#
################################################################################
# true positive test: properly hightlighted; has good content; perfect
################################################################################

# base_cmd 'describe'

describe $abcde
describe "string"
describe 'string'
describe *string*

# base_cmd 'describe' integer_expr
describe 1;
describe  1

# base_cmd 'describe' payload_expr
# base_cmd 'describe' payload_expr 'at'
describe at 
# base_cmd 'describe' payload_expr 'ethhdr'
describe ethhdr
# base_cmd 'describe' payload_expr 'vlan'
describe vlan
# base_cmd 'describe' payload_expr 'arp'
describe arp
# base_cmd 'describe' payload_expr 'ip'
describe ip
describe icmp
describe igmp
describe ip6
describe auth
describe esp
describe comp
describe udp
describe udplite
describe tcp
describe dccp
describe sctp
describe th
describe vxlan
describe geneve
describe gre
describe gretap

# nft_line/nft_base_cmd_describe/nft_c_primary_expr/nft_c_exthdr_expr/nft_hbh_hdr_expr
describe hbh nexthdr
describe hbh hdrlength

# nft_line/nft_base_cmd_describe/nft_c_primary_expr/nft_c_exthdr_expr/nft_frag_hdr_expr
describe frag nexthdr
describe frag reserved
describe frag frag-off
describe frag reserved2
describe frag more-fragments
describe frag id

# nft_line/nft_base_cmd_describe/nft_c_primary_expr/nft_c_exthdr_expr/nft_dst_hdr_expr
describe dst nexthdr
describe dst hdrlength

# nft_line/nft_base_cmd_describe/nft_c_primary_expr/nft_c_exthdr_expr/nft_mh_hdr_expr
describe mh nexthdr
describe mh hdrlength
describe mh type
describe mh reserved
describe mh checksum

# nft_line/nft_base_cmd_describe/nft_c_primary_expr/nft_exthdr_exists_expr/nft_exthdr_key
describe exthdr frag;
describe exthdr dst
describe exthdr mh
describe exthdr ah
describe exthdr rt
describe exthdr hbh

# TODO:  base_cmd 'describe' meta_expr
# TODO:  base_cmd 'describe' socket_expr

# nft_line/nft_base_cmd_describe/nft_c_primary_expr/nft_c_exthdr_expr/nft_rt_hdr_expr
describe rt nexthdr
describe  rt nexthdr
describe   rt nexthdr
describe rt  nexthdr
describe rt   nexthdr
describe rt hdrlength
describe rt type
describe rt seg-left
# nft_line/nft_base_cmd_describe/nft_c_primary_expr/nft_c_exthdr_expr/nft_rt0_hdr_expr
describe rt0 addr [1]
describe rt0 addr [ 1 ]
describe rt0 addr [ 12345691 ]
describe  rt0 addr [1]
describe rt0  addr [1]
describe rt0 addr  [1]
describe rt0 addr [ 1]
describe rt0 addr [1 ]
# nft_line/nft_base_cmd_describe/nft_c_primary_expr/nft_c_exthdr_expr/nft_rt2_hdr_expr
describe rt2 addr
describe  rt2 addr
describe rt2  addr
# nft_line/nft_base_cmd_describe/nft_c_primary_expr/nft_c_exthdr_expr/nft_rt4_hdr_expr
describe rt4 last-entry;
describe rt4 tag
describe rt4 sid
describe rt4 sid [ 1 ]
describe rt4 sid[1]

# base_cmd 'describe' ct_expr

# base_cmd 'describe' numgen_expr
describe numgen inc mod 256
describe numgen random mod 16
# base_cmd 'describe' hash_expr
describe jhash
describe symhash mod 1
describe symhash mod 1 offset 8
# base_cmd 'describe' fib_expr
describe saddr
describe daddr
describe mark
describe iif
describe oif
# base_cmd 'describe' osf_expr
describe osf name
describe osf version
describe osf ttl loose name
describe osf ttl skip name
describe osf ttl loose version
describe osf ttl skip version
# base_cmd 'describe' xfrm_expr
describe ipsec in ip saddr
describe ipsec in ip6 saddr
describe ipsec in spi
describe ipsec in reqid
describe ipsec out ip daddr
describe ipsec out ip6 daddr
describe ipsec out spi
describe ipsec out reqid
# TODO:  base_cmd 'describe' '{' basic_expr '}'
#
#
#!/usr/sbin/nft -f
# File: destroy.nft
# Description: A test NFT file to exercise 'destroy' Vim syntax highlightings.
#
# base_cmd 'destroy' destroy_cmd 
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_set
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# destroy table <table_spec>
# table_spec->'table'->destroy_cmd->'destroy'->base_cmd->line
destroy table T
destroy table last
destroy table ip T
destroy table ip6 T
destroy table inet T
destroy table netdev T
destroy table bridge T
destroy table arp T
# tableid_spec->'table'->destroy_cmd->'destroy'->base_cmd->line
destroy table handle 123
destroy table ip handle 123
destroy table ip6 handle 123
destroy table inet handle 123
destroy table netdev handle 123
destroy table bridge handle 123
destroy table arp handle 123

# destroy chain <chainid_spec>
# common_block->chain_block->'{'->'chain'->destroy_cmd->'destroy'->base_cmd->line
destroy chain T C
destroy chain last C
destroy chain T last
destroy chain last last
destroy chain ip T C
destroy chain ip6 T C
destroy chain inet T C
destroy chain netdev T C
destroy chain bridge T C
destroy chain arp T C

destroy chain T C { }
destroy chain ip T C {  }
destroy chain ip6 T C {  }
destroy chain inet T C {  }
destroy chain netdev T C {  }
destroy chain bridge T C {  }
destroy chain arp T C { }


destroy chain T handle 123123
destroy chain ip T handle 15
destroy chain inet T handle 15
destroy chain inet T handle 42  # comment
destroy chain ip6 T handle 15
destroy chain bridge T handle 15
destroy chain arp T handle 15
destroy chain netdev T handle 15

# destroy counter <obj_spec>
destroy counter T CounterName
destroy counter ip T CounterName
destroy counter ip6 T CounterName
destroy counter inet T CounterName
destroy counter netdev T CounterName
destroy counter bridge T CounterName
destroy counter arp T CounterName

# destroy counter <objid_spec>
destroy counter netdev T handle 1
#destroy counter bridge T position 1  # not yet available
#destroy counter arp T index 1  # not yet available
destroy counter T CounterName index index_id

# destroy ct <ct_obj_type> <obj_spec> <ct_obj_alloc>
destroy ct expectation
destroy ct expectation T Q 
destroy ct expectation ip T Q
destroy ct expectation ip6 T Q
destroy ct expectation inet T Q
destroy ct expectation netdev T Q
destroy ct expectation bridge T Q
destroy ct expectation arp T Q

destroy ct helper T ct_id
destroy ct helper ip T ct_id
destroy ct helper ip6 T ct_id
destroy ct helper inet T ct_id
destroy ct helper netdev T ct_id
destroy ct helper bridge T ct_id
destroy ct helper arp T ct_id
destroy ct helper T { };
destroy ct helper T {}

destroy ct timeout
destroy ct timeout T ct_id
destroy ct timeout ip T ct_id
destroy ct timeout ip6 T ct_id
destroy ct timeout inet T ct_id
destroy ct timeout netdev T ct_id
destroy ct timeout bridge T ct_id
destroy ct timeout arp T ct_id

# destroy element <set_spec> <set_block_expr>
destroy element T M { 4.4.4.4 }
destroy element T M { elements = { element, element }; }
destroy element ip T M { 4.4.4.4 }
destroy element ip T M { element, element }
destroy element ip T M { elements = { element, element } ; }
destroy element ip6 T M { 4.4.4.4 }
destroy element ip6 T M { element, element }
destroy element ip6 T M { elements = { element, element } ; }
destroy element inet T M { 10.0.0.1 }
destroy element inet T M { element, element }
destroy element inet T M { elements = { element, element } ; }
destroy element netdev T M { 10.0.0.1, 127.0.0.1 }
destroy element netdev T M { element, element }
destroy element netdev T M { elements = { element, element } ; }
destroy element bridge T M { 4.4.4.4 }
destroy element bridge T M { element, element }
destroy element bridge T M { elements = { element, element } ; }
destroy element arp T M { 4.4.4.4 }
destroy element arp T M { element, element }
destroy element arp T M { elements = { element, element } ; }

# 'destroy' 'flowtable' <flowtable_spec>
# common_block->flowtable_block->'{'->'flowtable'->destroy_cmd->'destroy'->base_cmd->line
destroy flowtable T FT 
destroy flowtable ip T FT 
destroy flowtable ip6 T FT 
destroy flowtable inet T FT 
destroy flowtable netdev T FT 
destroy flowtable bridge T FT 
destroy flowtable arp T FT 

destroy flowtable T FT { define my_var; };
destroy flowtable T FT { hook input priority out+1; devices = { br0, eth0, eth1} ; hook input priority false }
destroy flowtable ip T FT { hook input priority 0; devices = { eth0, eth1 } ; }
destroy flowtable ip6 T FT { hook input priority 0; devices = { br0, eth0 } ; }
destroy flowtable inet T FT { hook input priority 0; devices = { br0, eth1 } ; }
destroy flowtable netdev T FT { flowtable_block }
destroy flowtable bridge T FT { hook input priority 0; devices = { br0, eth1 } ; }
destroy flowtable arp T FT { hook input priority 0; devices = { br0, eth1 } ; }

destroy flowtable T handle 15 
destroy flowtable ip T handle 15
destroy flowtable ip6 T handle 15 
destroy flowtable inet T handle 15 
destroy flowtable netdev T handle 15 
destroy flowtable bridge T handle 15 
destroy flowtable arp T handle 15 

#   'destroy' 'limit' ( obj_spec | objid_spec ) 
# limit_config->identifier->family_spec->table_spec->'limit'->'destroy'->destroy_cmd->base_cmd
destroy limit T L 
destroy limit ip T L
destroy limit ip6 T L
destroy limit inet T L
destroy limit netdev T L
destroy limit bridge T L
destroy limit arp T L

destroy limit T handle 15
destroy limit ip T handle 15
destroy limit ip6 T handle 15
destroy limit inet T handle 15
destroy limit netdev T handle 15
destroy limit bridge T handle 15
destroy limit arp T handle 15

destroy limit T L rate 1 /hour 
destroy limit T L rate 1 / week
destroy limit T L rate over 3600000/ day
destroy limit T L rate until 1/second
destroy limit T L rate 1/minute burst 5 packets
destroy limit ip T L rate 1/ day
destroy limit ip6 T L rate 1 / week
destroy limit inet T L rate 1/second
destroy limit netdev T L rate 1/minute 
destroy limit bridge T L rate 1 /hour 
destroy limit arp T L rate 1 /hour 

# destroy map <set_spec>
destroy map T M 
destroy map ip T M 
destroy map ip6 T M 
destroy map inet T M 
destroy map netdev T M 
destroy map bridge T M 
destroy map arp T M 

# destroy quota <obj_spec>
destroy quota T Q 
destroy quota ip T Q
destroy quota ip6 T Q
destroy quota inet T Q
destroy quota netdev T Q
destroy quota bridge T Q
destroy quota arp T Q

# destroy quota <objid_spec>
destroy quota T handle 15
destroy quota ip T handle 15
destroy quota ip6 T handle 15
destroy quota inet T handle 123
destroy quota netdev T handle 15
#destroy quota inet T index 345  # not yet available
#destroy quota inet T position 234  # not yet available
destroy quota bridge T handle 15
destroy quota arp T handle 15

# destroy rule <ruleid_spec>
destroy rule arp T C handle 16
destroy rule bridge T C handle 16
destroy rule filter output handle 5
destroy rule filter output ip saddr 192.168.1.1 counter  # not implemented yet
destroy rule inet T C handle 16
destroy rule ip6 T C handle 16
destroy rule ip T C handle 42
destroy rule ip T handle 42
destroy rule netdev T C handle 16
destroy rule T C handle 42
destroy rule T handle 42
destroy secmark arp T handle 15
destroy secmark arp T secmark_name
destroy secmark bridge T handle 15
destroy secmark bridge T secmark_name
destroy secmark inet T handle 15
destroy secmark inet T secmark_name
destroy secmark ip6 T handle 15
destroy secmark ip6 T secmark_name
destroy secmark ip T handle 15
destroy secmark ip T secmark_name
destroy secmark netdev T handle 15
destroy secmark netdev T secmark_name
destroy secmark T handle 15
destroy secmark T secmark_name 

# destroy set <set_spec>
destroy set T S
destroy set ip T S
destroy set ip6 T S
destroy set inet T S
destroy set netdev T S
destroy set bridge T S
destroy set arp T S

# destroy set <setid_spec>
destroy set T handle 123
destroy set ip T handle 123
destroy set inet T handle 42  # comment

delete synproxy arp T handle 15
destroy synproxy arp T handle 15
destroy synproxy arp T synproxy_name
destroy synproxy bridge T handle 15
destroy synproxy bridge T synproxy_name
destroy synproxy inet T handle 15
destroy synproxy inet T synproxy_name
destroy synproxy ip6 T handle 15
destroy synproxy ip6 T synproxy_name
destroy synproxy ip T handle 15
destroy synproxy ip T synproxy_name
destroy synproxy netdev T handle 15
destroy synproxy netdev T synproxy_name
destroy synproxy T handle 15
destroy synproxy T synproxy_name 
destroy synproxy T synproxy_name;
destroy synproxy T synproxy_name; 
destroy synproxy T synproxy_name ;
destroy synproxy T synproxy_name ; 


#!/usr/sbin/nft -f
# File: element.nft
# Description: A test NFT file to exercise 'element' m syntax highlightings.
#
# base_cmd add_cmd 'element'
# base_cmd create_cmd 'element'
# base_cmd destroy_cmd 'element'
# base_cmd delete_cmd 'element'
# base_cmd get_cmd 'element'
# base_cmd reset_cmd 'element'
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# base_cmd add_cmd 'set'

# set_expr->set_block_expr->'element'->add_cmd->base_cmd->line
element T S { };
element last S { };
element T last { };
element last last { };
element ip T S { };
element ip6 T S { };
element inet T S { };
element netdev T S { };
element bridge T S { };
element arp T S { };

# variable_expr->set_block_expr->'element'->add_cmd->base_cmd->line
element ip T last $MY_ELEMENT;
element ip T S $MY_ELEMENT ;

# set_expr->set_block_expr->'element'->add_cmd->'add'->base_cmd->line
# 'add element' only takes map key-value
# 'add element' will not take anonymous set (that occurs in 'rule'->set_expr, not 'add element')
element ip filter service_map { 1.2.3.4 : accept, 5.6.7.8 timeout 30s : drop comment "spam host" }
# CORRECT — timeout is applied to the element, value follows after colon
add element ip filter blocked_ips { 192.168.1.10 expires 1h }
add element ip filter blocked_ips { 192.168.1.10 timeout 1h }
add element ip filter action_map { 10.0.0.1 timeout 1h : continue }
add element ip filter action_map { 10.0.0.1 timeout 1h : return }
add element ip filter action_map { 10.0.0.1 timeout 1h : accept }
add element ip filter action_map { 10.0.0.1 timeout 1h : jump LIBVIRT_IN }
add element ip filter action_map { 10.0.0.1 timeout 1h : jump $my_LIBVIRT_IN }
add element ip filter action_map { 10.0.0.1 timeout 1h : goto $my_LIBVIRT_FWD}
add element ip filter action_map { 10.0.0.1 timeout 1h : goto LIBVIRT_FWD}
add element ip filter action_map { 10.0.0.1 timeout 1h : drop }

add element ip filter action_map { 
    10.0.0.1 timeout 1h : goto $my_LIBVIRT_FWD,
    10.0.0.1 timeout 1h : goto LIBVIRT_FWD,
    10.0.0.1 timeout 1h : goto $my_LIBVIRT_FWD,
    10.0.0.1 timeout 1h : goto LIBVIRT_FWD,
}


# variable_expr->set_block_expr->'element'->add_cmd->'add'->base_cmd->line
add element T S $MY_ELEMENT

add element T S { };

# set_expr->set_block_expr->'element'->create_cmd->'create'->base_cmd->line
create element T S { };
# variable_expr->set_block_expr->'element'->create_cmd->'create'->base_cmd->line
create element T S $MY_ELEMENT

# set_expr->set_block_expr->'element'->destroy_cmd->'destroy'->base_cmd->line
destroy element T S { };
# variable_expr->set_block_expr->'element'->destroy_cmd->'destroy'->base_cmd->line
destroy element T S $MY_ELEMENT

# set_expr->set_block_expr->'element'->get_cmd->'get'->base_cmd->line
get element T S { };
# variable_expr->set_block_expr->'element'->get_cmd->'get'->base_cmd->line
get element T S $MY_ELEM!NT

# set_expr->set_block_expr->'element'->reset_cmd->'reset'->base_cmd->line
reset element T S { };
# variable_expr->set_block_expr->'element'->reset_cmd->'reset'->base_cmd->line
reset element T S $MY_ELEMENT


#!/usr/sbin/nft -f
# File: export.nft
# Description: Test NFT file to exercise 'export' Vim syntax highlightings.
#
# base_cmd  export_cmd
#

################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

export ruleset xml
export ruleset json
export ruleset vm json


#!/usr/sbin/nft -f
# File: flush.nft
# Description: Test NFT file to exercise 'flush' Vim syntax highlightings.
#
# base_cmd  flush_cmd
#

################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

flush table MyTable
flush table ip MyTable
flush table ip6 MyTable
flush table inet MyTable
flush table netdev MyTable
flush table bridge MyTable
flush table arp MyTable 
flush table MyTable;
flush table MyTable; 
flush table MyTable ;
flush table MyTable ; 


flush chain MyTable MyChain
flush chain ip MyTable MyChain
flush chain ip6 MyTable MyChain
flush chain inet MyTable MyChain
flush chain netdev MyTable MyChain
flush chain bridge MyTable MyChain
flush chain arp MyTable MyChain
flush chain MyTable MyChain;
flush chain MyTable MyChain; 
flush chain MyTable MyChain ;
flush chain MyTable MyChain ; 

# set_spec->'table'->'flow'->flush_cmd->base_cmd
flush flow table table_id flow_id
flush flow table ip table_id flow_id
flush flow table ip6 table_id flow_id
flush flow table inet table_id flow_id
flush flow table netdev table_id flow_id
flush flow table bridge table_id flow_id

flush map ip table_id MyMap
flush map ip6 table_id MyMap
flush map inet table_id MyMap
flush map netdev table_id MyMap
flush map bridge table_id MyMap
flush map arp table_id MyMap

flush meter table_id MyMap
flush meter ip table_id MyMap
flush meter ip6 table_id MyMap
flush meter inet table_id MyMap
flush meter netdev table_id MyMap
flush meter arp table_id MyMap

flush ruleset 
flush ruleset ip 
flush ruleset ip6
flush ruleset inet

flush set table_id set_id
flush set ip6 table_id set_id
flush set inet table_id set_id
flush set netdev table_id set_id
flush set bridge table_id set_id
flush set arp table_id set_id


#!/usr/sbin/nft -f
# File: get.nft
# Description: A test NFT file to exercise 'get' Vim syntax highlightings.
#
# nft_line/nft_base_cmd/nft_c_base_cmd_get
# base_cmd 'get' get_cmd
# base_cmd 'get' 'element' set_spec set_block_expr
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

get element table_id set_id
get element ip T S
get element ip6 T S
get element inet T S
get element netdev T S
get element bridge T S
get element arp T S

get element T S ;
get element T S $variable_id
get element T S $a;
get element T S { ~ ~ typeof b };
get element T S { * ~ typeof b };
get element T S { ~typeof b };
get element ip T S { typeof b };
get element T S { typeof a.b.c.d.e.f };
get element T S { flags constant }
get element T S { flags interval; }
get element T S { flags timeout };
get element T S { flags dynamic ; } ;
get element T S { flags constant, interval, timeout, dynamic };
get element T S { flags constant; flags interval; flags timeout; flags dynamic };
get element T S { timeout 15:00:01 }
get element T S { gc-interval 1:00:1 }
get element T S { elements = 1:00:1 }
get element T S { comment *A comment string* }
get element T S { comment "A comment string" }
get element T S { comment 'A comment string' }
get element T S { comment single-word }


#!/usr/sbin/nft -f
# File: identifier.nft
# Title: Test file for the initial 'identifier ' highlightings.
# Description:
#   Identifier that starts with from 1st column may imply
#   a '[add] table' command.
#
# nftables manpage shows:
#
#   <table_id> <object_id> ...
#   <family> <table_id> <object_id> ...
#   rule <table_id> <object_id> ...
#   rule <family> <table_id> <object_id> ...
#   [rule] [family] table_id object_id ...
#
# Vim: nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_table
# Bison: identifier/table_spec/chain_spec/rule_position/add_cmd/base_cmd/line
# Bison: identifier/table_spec/chain_spec/rule_position/'rule'/add_cmd/base_cmd/line
# Bison: identifier/'ip|ip6|inet|netdev|bridge|arp'/family_spec_explicit/family_spec/table_spec/chain_spec/rule_position/add_cmd/base_cmd/line
# Bison: identifier/'ip|ip6|inet|netdev|bridge|arp'/family_spec_explicit/family_spec/table_spec/chain_spec/rule_position/'rule'/add_cmd/base_cmd/line
#
################################################################################
# true positive test (properly hightlighted correctly; has good content; perfect)
################################################################################

# Bison: identifier/table_spec/chain_spec/rule_position/add_cmd/base_cmd/line
# NOTE: Stuck nft_common_block_undefine_error into nft_line
myTableID myChainID accept ;
my_table_id my_chain_id drop;

# Bison: identifier/'ip|ip6|inet|netdev|bridge|arp'/family_spec_explicit/family_spec/table_spec/chain_spec/rule_position/add_cmd/base_cmd/line
ip my_table_id my_chain_id goto X;
ip6 my_table_id my_chain_id jump X;
inet my_table_id my_chain_id continue;
netdev my_table_id my_chain_id accept;
bridge my_table_id my_chain_id drop;
arp my_table_id my_chain_id continue;

# Bison: identifier/'ip|ip6|inet|netdev|bridge|arp'/family_spec_explicit/family_spec/table_spec/chain_spec/rule_position/'rule'/add_cmd/base_cmd/line
rule ip myTableID myChainID { };
rule ip6 myTableID myChainID { };
rule inet myTableID myChainID { };
rule netdev myTableID myChainID { };
rule bridge myTableID myChainID { };
rule arp myTableID myChainID { };

# multi-line
table myTableID {
    chain myChainID { };
};

#!/usr/sbin/nft -f
# File: import.nft
# Description: Test NFT file to exercise 'import' Vim syntax highlightings.
#
# base_cmd  import_cmd
#

################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

import ruleset xml
import ruleset vm json
import ruleset json


#!/usr/sbin/nft -f
# File: insert.nft
# Description: A test NFT file to exercise 'insert' Vim syntax highlightings.
#
# base_cmd add_cmd 'insert'
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# base_cmd 'insert'
# 'rule'->insert_cmd->'insert'->line
# chain_spec->table_spec->'rule'->insert_cmd->'insert'->line

insert rule T C
insert rule ip T C
insert rule ip6 T C
insert rule inet T C
insert rule netdev T C
insert rule bridge T C
insert rule arp T C

insert rule T C position 123
insert rule T C handle 123
insert rule T C index 123
insert rule ip T C position 123
insert rule ip T C handle 123
insert rule ip T C index 123
insert rule ip6 T C position 123
insert rule ip6 T C handle 123
insert rule ip6 T C index 123
insert rule inet T C position 123
insert rule inet T C handle 123
insert rule inet T C index 123
insert rule netdev T C position 123
insert rule netdev T C handle 123
insert rule netdev T C index 123
insert rule bridge T C position 123
insert rule bridge T C handle 123
insert rule bridge T C index 123
insert rule arp T C position 123
insert rule arp T C handle 123
insert rule arp T C index 123


#!/usr/sbin/nft -f
# File: last.nft
# Description: A test NFT file to exercise 'last_stmt' Vim syntax highlightings.
#
# nftables syntax name: last_stmt
# syntax pathway: last_stmt->stateful_stmt->stmt
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# 'last'->last_stmt->stateful_stmt->stmt->rule_alloc->rule->add_cmd->base_cmd->line
last
last used 
last used time_spec
rule last
rule last used never
rule last used time_spec

# 'last'->last_stmt->stateful_stmt->stmt->rule_alloc->rule->chain_block
table T {
    chain C {
        last
        last used never
        last used +1h5m
    }
}
# 'last'->last_stmt->stateful_stmt->stmt->rule_alloc->rule->chain_stmt
jump { 
    last
    last used never
    last used 2w1d
}
goto { 
    last
    last used never
    last used 2w1d
}

# 'last'->last_stmt->stateful_stmt->stmt->rule_alloc->rule->insert_cmd
insert rule T C {
    last
    last used never
    last used time_spec
}
# 'last'->last_stmt->stateful_stmt->stmt->rule_alloc->rule->replace_cmd
replace rule T C handle 1 last
replace rule T C handle 2 last never
replace rule ip6 T C handle 3 last used

#!/usr/sbin/nft -f
# File: limit.nft
# Description: A test NFT file to exercise '[add] limit' Vim syntax highlightings.
#
# Supports following syntaxes:
#
#   [ [ 'add' ] 'rule' ] 'limit' obj_spec limit_obj limit_config close_scope_limit
#   [ [ 'add' ] 'rule' ] 'limit' obj_spec limit_obj '{' limit_block '}' close_scope_limit
#   'create' 'limit' obj_spec limit_obj limit_config close_scope_limit
#   'delete' 'limit' obj_spec
#   'delete' 'limit' objid_spec
#   'delete' 'limit' ( obj_spec | objid_spec )
#   [ [ 'add' ] 'rule' ] 'limit'
#   [ [ 'add' ] 'rule' ] 'limit' 'table' table_spec
#
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################


# limit_burst_pkts->limit_rate_pkts->limit_config->identifier->table_spec->'limit'->'add'->add_cmd->base_cmd
add limit myIpTable myIpLimit rate 1/second
add limit myIpTable myIpLimit rate 1/second burst 1514 packet
add limit myIpTable myIpLimit rate 1/second burst 15 packets

# limit_burst_pkts->limit_rate_pkts->limit_config->identifier->family_spec->table_spec->'limit'->'add'->add_cmd->base_cmd
add limit ip6 myIp6Table myIp6Limit rate 1 / week burst 1 packet
add limit ip6 myIp6Table myIp6Limit rate 1 / week burst 1 packets
add limit ip myIpTable myIpLimit rate 1/ day burst 1 packet
add limit inet myInetTable myInetLimit rate 1/second burst 1 packets
add limit inet myInetTable myInetLimit rate 1/second burst 10 packets
add limit inet myInetTable myInetLimit rate 1/second burst 100000 packets
add limit inet myInetTable myInetLimit rate 1/second burst 1000000000 packets
add limit inet myInetTable myInetLimit rate 1/second burst 10000000000000 packets
add limit inet myInetTable myInetLimit rate 1/second burst 10000000000000000 packets
add limit inet myInetTable myInetLimit rate 1/second burst 10000000000000000000 packets
add limit netdev myNetdevTable myNetdevLimit rate 1/minute burst 1 packets
add limit bridge myBridgeTable myBridgeLimit rate 1 /hour burst 1T packets
add limit arp myBridgeTable myBridgeLimit rate 1 /hour burst 1000000 packets

# limit_rate_pkts->obj_spec->'limit'->'rule'->'add'->add_cmd->base_cmd
# limit_rate_pkts->identifier->table_spec->'limit'->'rule'->'add'->add_cmd->base_cmd
add limit myIp6Table myIp6Limit rate 1 / week

# 'limit'->'add'->add_cmd->base_cmd
# 'limit'->add_cmd->base_cmd
# identifier->table_spec->obj_spec->'limit'->add_cmd->base_cmd
# identifier->obj_spec->'limit'->add_cmd->base_cmd
# 'rate'->limit_config->'limit'->add_cmd->base_cmd
# NUM->limit_rate_pkts->'rate'->limit_config->'limit'->add_cmd->base_cmd
# SLASH->limit_rate_pkts->'rate'->limit_config->'limit'->add_cmd->base_cmd
limit myIp6Table myIp6Limit rate 1/second
limit myIp6Table myIp6Limit rate 12/second
limit myIp6Table myIp6Limit rate 123/second
limit myIp6Table myIp6Limit rate 1234/second
limit myIp6Table myIp6Limit rate 12345/second
limit myIp6Table myIp6Limit rate 123456/second
limit myIp6Table myIp6Limit rate 1234567/second
limit myIp6Table myIp6Limit rate 12345678/second
limit myIp6Table myIp6Limit rate 123456789/second
limit myIp6Table myIp6Limit rate 1234567890/second

limit myIp6Table myIp6Limit rate 1/second
limit myIp6Table myIp6Limit rate 1/ second
limit myIp6Table myIp6Limit rate 1 /second
limit myIp6Table myIp6Limit rate 1 / second
limit myIp6Table myIp6Limit rate 1 / seconds
limit myIp6Table myIp6Limit rate 1 / minute
limit myIp6Table myIp6Limit rate 1 / minutes
limit myIp6Table myIp6Limit rate 1 / hour
limit myIp6Table myIp6Limit rate 1 / hours
limit myIp6Table myIp6Limit rate 1 / day
limit myIp6Table myIp6Limit rate 1 / days
limit myIp6Table myIp6Limit rate 1 / week
limit myIp6Table myIp6Limit rate 1 / weeks 

limit myIp6Table myIp6Limit rate 1 / second;
limit myIp6Table myIp6Limit rate 1 / second; 
limit myIp6Table myIp6Limit rate 1 / second ;
limit myIp6Table myIp6Limit rate 1 / second ; 

# 'rate'->limit_config->'limit'->add_cmd->base_cmd
# limit_mode->'rate'->limit_config->'limit'->add_cmd->base_cmd
# NUM->limit_rate_pkts->'rate'->limit_config->'limit'->add_cmd->base_cmd
# SLASH->limit_rate_pkts->'rate'->limit_config->'limit'->add_cmd->base_cmd
# time_unit->limit_rate_pkts->'rate'->limit_config->'limit'->add_cmd->base_cmd
limit myIpTable myIpLimit rate over 3600000 / days
limit myIpTable myIpLimit rate over 3600000 / days;
limit myInetTable myInetLimit rate until 1/seconds

# 'rate'->limit_config->'limit'->add_cmd->base_cmd
# limit_mode->'rate'->limit_config->'limit'->add_cmd->base_cmd
# NUM->limit_rate_bytes->'rate'->limit_config->'limit'->add_cmd->base_cmd
# SLASH->limit_rate_bytes->'rate'->limit_config->'limit'->add_cmd->base_cmd
# time_unit->limit_rate_bytes->'rate'->limit_config->'limit'->add_cmd->base_cmd
# 'burst'->limit_burst_bytes->'rate'->limit_config->'limit'->add_cmd->base_cmd
# NUM->limit_burst_bytes->'rate'->limit_config->'limit'->add_cmd->base_cmd
# time_unit->limit_burst_pkts->'rate'->limit_config->'limit'->add_cmd->base_cmd
limit myNetdevTable myNetdevLimit rate 1 byte/minute
limit myNetdevTable myNetdevLimit rate 1 bytes/minute
limit myNetdevTable myNetdevLimit rate 1 kbyte/minute
limit myNetdevTable myNetdevLimit rate 1 kbytes/minute
limit myNetdevTable myNetdevLimit rate 1 Mbyte/minute
limit myNetdevTable myNetdevLimit rate 1 Mbytes/minute
limit myNetdevTable myNetdevLimit rate 1 Gbyte/minute
limit myNetdevTable myNetdevLimit rate 1 Gbytes/minute
limit myNetdevTable myNetdevLimit rate 1 Pbyte/minute
limit myNetdevTable myNetdevLimit rate 1 Pbytes/minute

limit myNetdevTable myNetdevLimit rate 1 byte/ minute
limit myNetdevTable myNetdevLimit rate 1 byte /minute
limit myNetdevTable myNetdevLimit rate 1 byte / minute

limit myNetdevTable myNetdevLimit rate 1 kbyte/second
limit myNetdevTable myNetdevLimit rate 1 kbyte/seconds
limit myNetdevTable myNetdevLimit rate 1 kbyte/minute
limit myNetdevTable myNetdevLimit rate 1 kbyte/minutes
limit myNetdevTable myNetdevLimit rate 1 kbyte/hour
limit myNetdevTable myNetdevLimit rate 1 kbyte/hours
limit myNetdevTable myNetdevLimit rate 1 kbyte/day
limit myNetdevTable myNetdevLimit rate 1 kbyte/days
limit myNetdevTable myNetdevLimit rate 1 kbyte/week
limit myNetdevTable myNetdevLimit rate 1 kbyte/weeks

limit myNetdevTable myNetdevLimit rate 1 kbyte/weeks;
limit myNetdevTable myNetdevLimit rate 1 kbyte/weeks; 
limit myNetdevTable myNetdevLimit rate 1 kbyte/weeks ;
limit myNetdevTable myNetdevLimit rate 1 kbyte/weeks ; 

limit myNetdevTable myNetdevLimit rate 1 byte/minute burst 5 byte
limit myNetdevTable myNetdevLimit rate 1 Gbytes/minute burst 5 byte 
limit myNetdevTable myNetdevLimit rate 1 Gbytes/minute burst 5 bytes 
limit myNetdevTable myNetdevLimit rate 1 Gbytes/minute burst 5 kbyte
limit myNetdevTable myNetdevLimit rate 1 Gbytes/minute burst 5 kbytes
limit myNetdevTable myNetdevLimit rate 1 Gbytes/minute burst 5 Mbyte
limit myNetdevTable myNetdevLimit rate 1 Gbytes/minute burst 5 Mbytes
limit myNetdevTable myNetdevLimit rate 1 Gbytes/minute burst 5 GBYTE
limit myNetdevTable myNetdevLimit rate 1 Gbytes/minute burst 5 GBYTES

# limit_config->obj_spec->'limit'->add_cmd->base_cmd
# limit_config->identifier->family_spec->table_spec->'limit'->add_cmd->base_cmd
limit ip6 myIp6Table myIp6Limit rate 1 / week
limit ip myIpTable myIpLimit rate 1/ day
limit inet myInetTable myInetLimit rate 1/second
limit netdev myNetdevTable myNetdevLimit rate 1/minute 
limit bridge myBridgeTable myBridgeLimit rate 1 /hour 
limit arp myBridgeTable myBridgeLimit rate 1 /hour

# [ add rule ] limit obj_spec limit_obj { limit_config } close_scope_limit
# limit_block->'{'->identifier->family_spec->table_spec->'limit'->'rule'->'add'->add_cmd->base_cmd
#limit myTable lim_400ppm { rate 400/minute ; comment "use to limit incoming icmp" ; }
limit myTable lim_1kbps  { 
    rate over 1024 bytes/second burst 512 bytes ;
    comment "use to limit incoming smtp" ; }

# limit obj_spec limit_obj { stmt_separator } close_scope_limit
limit myTable lim_400ppm { ; }

# limit obj_spec limit_obj { comment_spec } close_scope_limit
limit myTable lim_400ppm { comment "comments here"; }

# limit obj_spec limit_obj { common_block } close_scope_limit
limit myTable lim_400ppm { 
    include "rate-limit.nft"
    rate 400/minute ; comment "use to limit incoming icmp" ; 
}

# base_cmd add_cmd 'table' table_spec table_block 'limit' limit_block
table ip T { limit L { } }
table ip6 T { limit L { } }
table inet T { limit L { } }
table netdev T { limit L { } }
table bridge T { limit L { } }
table arp T { limit L { } }
table T { limit L { rate 15 byte } }
table T { limit L { rate 15 bytes } }
table T { limit L { rate over 15 / second } }
table T { limit L { rate over 15 / minute } }
table T { limit L { rate over 15 / hour } }
table T { limit L { rate over 15 / day } }
table T { limit L { rate over 15 / week } }
table T { limit L { rate over 15 bytes / second } }
table T { limit L { rate over 15 kbytes / minute } }
table T { limit L { rate over 15 mbytes / hour } }
table T { limit L { rate over 15 gbytes / day } }
table T { limit L { rate over 15 pbytes / week } }
table T { limit L { rate until 15 / second } }
table T { limit L { rate until 15 / minute } }
table T { limit L { rate until 15 / hour } }
table T { limit L { rate until 15 / day } }
table T { limit L { rate until 15 / week } }
table T { limit L { rate until 15 bytes / second } }
table T { limit L { rate until 15 bytes / minute } }
table T { limit L { rate until 15 bytes / hour } }
table T { limit L { rate until 15 bytes / day } }
table T { limit L { rate until 15 bytes / week } }
table T {
    limit L {
        rate 1 / second
        rate 1 / second burst 1 packet
        rate over 1 / second
        rate over 1 / second burst 15 packets
        rate until 60 / minutes burst 360 packets
        rate 1 mbytes / second
        rate 1 mbytes / second burst 1 gbyte
        rate over 1 mbytes / second
        rate over 1 mbytes / second burst 15 gbyte
        rate until 60 mbytes / minutes burst 360 gbyte
        # common_block
        include "/directory/subdirectory/filename.filetype"
        define A = 1
        redefine A = 2
        undefine A
    }
}
table T { limit L { } }


table T {
    set S {
        limit rate 15 / second
        limit rate 15 / second burst 15 / hour
        limit rate 15 mbytes / second
        limit rate 15 mbytes / second burst 15 kbytes / hour
    }
}


table T {
    limit L { 
        # comment line
        include "my_secret_limits.nft";
        rate 10/second 
        rate over 1/minute burst 5 packets
        rate until 3/hour burst 30 packets
        rate until 3 Mbytes/hour burst 30 bytes 
        comment "nice limits there"
    }
};

# TODO create limit
# limit_rate_pkts->limit_config->obj_spec->'limit'->'create'->add_cmd->base_cmd
# limit_rate_pkts->limit_config->identifier->table_spec->'limit'->'create'->create_cmd->base_cmd
create limit myIp6Table myIp6Limit rate 1 / week

# limit_rate_pkts->limit_config->identifier->table_spec->'limit'->'create'->create_cmd->base_cmd
create limit myIpTable myIpLimit rate over 3600000/ day
create limit myInetTable myInetLimit rate until 1/second

# limit_rate_pkts->limit_config->identifier->table_spec->'limit'->'create'->create_cmd->base_cmd
create limit myNetdevTable myNetdevLimit rate 1/minute burst 5 packets
create limit myBridgeTable myBridgeLimit rate 1 /hour 

# limit_config->obj_spec->'limit'->'create'->add_cmd->base_cmd
# limit_config->identifier->family_spec->table_spec->'limit'->'create'->create_cmd->base_cmd
create limit ip6 myIp6Table myIp6Limit rate 1 / week
create limit ip myIpTable myIpLimit rate 1/ day
create limit inet myInetTable myInetLimit rate 1/second
create limit netdev myNetdevTable myNetdevLimit rate 1/minute 
create limit bridge myBridgeTable myBridgeLimit rate 1 /hour 
create limit arp myBridgeTable myBridgeLimit rate 1 /hour 

# TODO delete limit
# limit_rate_pkts->limit_config->obj_spec->'limit'->'delete'->add_cmd->base_cmd
# limit_rate_pkts->limit_config->identifier->table_spec->'limit'->'delete'->delete_cmd->base_cmd
delete 


delete limit 


delete limit last 
delete limit T 

delete limit T handle 1 
delete limit last handle 1 

delete limit last H      
delete limit last last      
delete limit T last      
delete limit T H      
delete limit T H
delete limit T H;
delete limit T H; 
delete limit T H ;
delete limit T H ; 

delete limit ip T H; 
delete limit ip6 T H; 
delete limit inet T H; 
delete limit netdev T H; 
delete limit bridge T H; 
delete limit arp T H; 
delete limit T handle 1

# Syntax:  delete limit objid_spec
delete limit table_id handle 15
delete limit ip table_id handle 15
delete limit ip6 table_id handle 15
delete limit inet table_id handle 15
delete limit netdev table_id handle 15
delete limit bridge table_id handle 15
delete limit arp table_id handle 15


# TODO list limit
# obj_spec->'limit'->list_cmd->base_cmd
list limit table_id limit_id
list limit ip table_id limit_id
list limit ip6 table_id limit_id
list limit inet table_id limit_id
list limit netdev table_id limit_id
list limit bridge table_id limit_id
list limit arp table_id limit_id

# ruleset_spec->'limits'->'list'->list_cmd->base_cmd
list limits ip 
list limits ip6
list limits inet 
list limits netdev 
list limits bridge 
list limits arp 

# 'table'->'limits'->'list'->list_cmd->base_cmd
list limits table table_id
list limits table ip table_id
list limits table ip6 table_id
list limits table inet table_id
list limits table netdev table_id
list limits table bridge table_id
list limits table arp table_id


#!/usr/sbin/nft -f
# File: line.nft
# Description: A test NFT file to exercise Vim syntax highlightings for 'line' syntax group.
#

################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# line
#
# line common_block 'include' <QUOTED_STRING>
include "filespec"
include "filename.filetype"
include "directory/filename.filetype"
include "https://directory/filename.filetype"

# line common_block 'define' identifier '=' initializer_expr
define ABC = 1  # missing stmt_separator
define A = $ABC  # missing stmt_separator
#
# line common_block 'redefine' identifier '=' initializer_expr
redefine A = 123  # missing stmt_separator
redefine A = $ABC  # missing stmt_separator

# line common_block 'undefine' identifier 
undefine ABC
undefine A


#!/usr/sbin/nft -f
# File: list.nft
# Description: A test NFT file to exercise 'list' command's Vim syntax highlightings.
#
# base_cmd list_cmd
#


################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# 'table'->'list'->list_cmd->base_cmd
list table last
list table table_id
list table ip table_id
list table ip6 table_id
list table inet table_id
list table netdev table_id
list table bridge table_id
list table arp table_id
list table MyTable;
list table MyTable; 
list table MyTable ;
list table ip MyTable ; 


# 'tables'->'list'->list_cmd->base_cmd
list tables
list tables ip 
list tables ip6;
list tables inet ;
list tables netdev ; 
list tables bridge 
list tables arp;

# 'chains'->'list'->list_cmd->base_cmd
list chains 
list chains ip; 
list chains ip6 ;
list chains inet ; 
list chains netdev 
list chains bridge 
list chains arp 

# 'ruleset'->'list'->list_cmd->base_cmd
list ruleset 
list ruleset ip 
list ruleset ip6
list ruleset inet 
list ruleset netdev 
list ruleset bridge 
list ruleset arp 

# 'meters'->'list'->list_cmd->base_cmd
list meters 
list meters ip 
list meters ip6
list meters inet 
list meters netdev 
list meters bridge 
list meters arp 

# 'maps'->'list'->list_cmd->base_cmd
list maps 
list maps ip 
list maps ip6
list maps inet 
list maps netdev 
list maps bridge 
list maps arp 

# chain_spec->'chain'->'list'->list_cmd->base_cmd
list chain last chain_id
list chain table_id last
list chain last last
list chain ip table_id chain_id
list chain ip last chain_id
list chain ip table_id last
list chain ip last last
list chain ip6 table_id chain_id
list chain inet table_id chain_id
list chain netdev table_id chain_id
list chain bridge table_id chain_id
list chain arp table_id chain_id

# ruleset_spec->'sets'->'list'->list_cmd->base_cmd
list sets 
list sets ip 
list sets ip6
list sets inet 
list sets netdev 
list sets bridge 
list sets arp 

# 'table'->'sets'->'list'->list_cmd->base_cmd
list sets table table_id
list sets table last
list sets table ip table_id
list sets table ip last
list sets table ip6 table_id
list sets table inet table_id
list sets table netdev table_id
list sets table bridge table_id
list sets table arp table_id

# ruleset_spec->'counters'->'list'->list_cmd->base_cmd
list counters 
list counters ip 
list counters ip6
list counters inet 
list counters netdev 
list counters bridge 
list counters arp 

# 'table'->'counters'->'list'->list_cmd->base_cmd
list counters table table_id
list counters table last
list counters table ip table_id
list counters table ip last
list counters table ip6 table_id
list counters table inet table_id
list counters table netdev table_id
list counters table bridge table_id
list counters table arp table_id

# ruleset_spec->'quotas'->'list'->list_cmd->base_cmd
list quotas 
list quotas ip 
list quotas ip6
list quotas inet 
list quotas netdev 
list quotas bridge 
list quotas arp 

# 'table'->'quotas'->'list'->list_cmd->base_cmd
list quotas table table_id
list quotas table last
list quotas table ip table_id
list quotas table ip last
list quotas table ip6 table_id
list quotas table inet table_id
list quotas table netdev table_id
list quotas table bridge table_id
list quotas table arp table_id

# ruleset_spec->'limits'->'list'->list_cmd->base_cmd
list limits 
list limits ip 
list limits ip6
list limits inet 
list limits netdev 
list limits bridge 
list limits arp 

# 'table'->'limits'->'list'->list_cmd->base_cmd
list limits table table_id
list limits table last
list limits table ip table_id
list limits table ip last
list limits table ip6 table_id
list limits table inet table_id
list limits table netdev table_id
list limits table bridge table_id
list limits table arp table_id

# ruleset_spec->'secmarks'->'list'->list_cmd->base_cmd
list secmarks 
list secmarks ip 
list secmarks ip6
list secmarks inet 
list secmarks netdev 
list secmarks bridge 
list secmarks arp 

# 'table'->'secmarks'->'list'->list_cmd->base_cmd
list secmarks table table_id
list secmarks table last
list secmarks table ip table_id
list secmarks table ip last
list secmarks table ip6 table_id
list secmarks table inet table_id
list secmarks table netdev table_id
list secmarks table bridge table_id
list secmarks table arp table_id

# ruleset_spec->'synproxys'->'list'->list_cmd->base_cmd
list synproxys 
list synproxys ip 
list synproxys ip6
list synproxys inet 
list synproxys netdev 
list synproxys bridge 
list synproxys arp 

# 'table'->'synproxys'->'list'->list_cmd->base_cmd
list synproxys table table_id
list synproxys table last
list synproxys table ip table_id
list synproxys table ip last
list synproxys table ip6 table_id
list synproxys table inet table_id
list synproxys table netdev table_id
list synproxys table bridge table_id
list synproxys table arp table_id

# set_spec->'set'->list_cmd->base_cmd
list set table_id set_id
list set last set_id
list set table_id last
list set last last
list set ip table_id set_id
list set ip6 table_id set_id
list set inet table_id set_id
list set netdev table_id set_id
list set bridge table_id set_id
list set arp table_id set_id

# set_spec->'meter'->list_cmd->base_cmd
list meter table_id meter_id
list meter last meter_id
list meter table_id last
list meter last last
list meter ip table_id meter_id
list meter ip6 table_id meter_id
list meter inet table_id meter_id
list meter netdev table_id meter_id
list meter bridge table_id meter_id
list meter arp table_id meter_id

# set_spec->'map'->list_cmd->base_cmd
list map table_id map_id
list map last map_id
list map table_id last
list map last last
list map ip table_id map_id
list map ip6 table_id map_id
list map inet table_id map_id
list map netdev table_id map_id
list map bridge table_id map_id
list map arp table_id map_id

# obj_spec->'counter'->list_cmd->base_cmd
list counter table_id counter_id
list counter last counter_id
list counter table_id last
list counter last last
list counter ip table_id counter_id
list counter ip6 table_id counter_id
list counter inet table_id counter_id
list counter netdev table_id counter_id
list counter bridge table_id counter_id
list counter arp table_id counter_id

# obj_spec->'quota'->list_cmd->base_cmd
list quota table_id quota_id
list quota last quota_id
list quota table_id last
list quota last last
list quota ip table_id quota_id
list quota ip6 table_id quota_id
list quota inet table_id quota_id
list quota netdev table_id quota_id
list quota bridge table_id quota_id
list quota arp table_id quota_id

# obj_spec->'limit'->list_cmd->base_cmd
list limit table_id limit_id
list limit last limit_id
list limit table_id last
list limit last last
list limit ip table_id limit_id
list limit ip6 table_id limit_id
list limit inet table_id limit_id
list limit netdev table_id limit_id
list limit bridge table_id limit_id
list limit arp table_id limit_id

# obj_spec->'secmark'->list_cmd->base_cmd
list secmark table_id secmark_id
list secmark last secmark_id
list secmark table_id last
list secmark last last
list secmark ip table_id secmark_id
list secmark ip6 table_id secmark_id
list secmark inet table_id secmark_id
list secmark netdev table_id secmark_id
list secmark bridge table_id secmark_id
list secmark arp table_id secmark_id

# obj_spec->'synproxy'->list_cmd->base_cmd
list synproxy table_id synproxy_id
list synproxy last synproxy_id
list synproxy table_id last
list synproxy last last
list synproxy ip table_id synproxy_id
list synproxy ip table_id last
list synproxy ip6 table_id synproxy_id
list synproxy inet table_id synproxy_id
list synproxy netdev table_id synproxy_id
list synproxy bridge table_id synproxy_id
list synproxy arp table_id synproxy_id

# ruleset_spec->'tables'->'flow'->list_cmd->base_cmd
list flow tables 
list flow tables ip
list flow tables ip6
list flow tables inet

# set_spec->'table'->'flow'->list_cmd->base_cmd
list flow table table_id synproxy_id
list flow table ip table_id synproxy_id
list flow table ip6 table_id synproxy_id
list flow table inet table_id synproxy_id

# ruleset_spec->'tables'->'flow'->list_cmd->base_cmd
list flowtable last 


list flowtable table_id 


list flowtable ip table_id 


list flowtable ip6 table_id 


list flowtable inet table_id 

# obj_spec->'helper'->ct_obj_type->'ct'->list_cmd->base_cmd
list ct helper table_id ct_id x

list ct helper last ct_id
list ct helper table_id last
list ct helper last last
list ct helper ip table_id ct_id
list ct helper ip6 table_id ct_id
list ct helper inet table_id ct_id
list ct helper netdev table_id ct_id
list ct helper bridge table_id ct_id
list ct helper arp table_id ct_id

# obj_spec->'timeout'->ct_obj_type->'ct'->list_cmd->base_cmd
list ct timeout
list ct timeout table_id ct_id
list ct timeout ip table_id ct_id
list ct timeout ip6 table_id ct_id
list ct timeout inet table_id ct_id
list ct timeout netdev table_id ct_id
list ct timeout bridge table_id ct_id
list ct timeout arp table_id ct_id

# obj_spec->'timeout'->ct_cmd_type->'ct'->list_cmd->base_cmd
list ct timeout table table_id
list ct timeout table last
list ct timeout table ip table_id
list ct timeout table ip6 table_id
list ct timeout table inet table_id
list ct timeout table netdev table_id
list ct timeout table bridge table_id
list ct timeout table arp table_id
list ct timeout table arp last

# obj_spec->'expectation'->ct_obj_type->'ct'->list_cmd->base_cmd
list ct expectation
list ct expectation table_id ct_id
list ct expectation ip table_id ct_id
list ct expectation ip6 table_id ct_id
list ct expectation inet table_id ct_id
list ct expectation netdev table_id ct_id
list ct expectation bridge table_id ct_id
list ct expectation arp table_id ct_id

# obj_spec->'expectation'->ct_cmd_type->'ct'->list_cmd->base_cmd
list ct expectation table table_id
list ct expectation table last
list ct expectation table ip table_id
list ct expectation table ip6 table_id
list ct expectation table inet table_id
list ct expectation table netdev table_id
list ct expectation table bridge table_id
list ct expectation table arp table_id
list ct expectation table arp last

# obj_spec->'helpers'->ct_cmd_type->'ct'->list_cmd->base_cmd
list ct helpers table table_id 
list ct helpers table last 
list ct helpers table ip table_id
list ct helpers table ip6 table_id
list ct helpers table inet table_id
list ct helpers table netdev table_id
list ct helpers table bridge table_id
list ct helpers table arp table_id
list ct helpers table arp last

# basehook_spec->'hooks'->list_cmd->base_cmd
list hooks 
list hooks ip
list hooks ip6
list hooks inet
list hooks netdev
list hooks bridge
list hooks arp

# basehook_device_name->basehook_spec->'hooks'->list_cmd->base_cmd
list hooks ip device eth0


# basehook_device_name->ruleset_spec->basehook_spec->'hooks'->list_cmd->base_cmd
list hooks ip device eth0
list hooks ip6 device wlan1
list hooks inet device vlan2
list hooks netdev device net3
list hooks bridge device br4
list hooks arp device arp5




.PHONY: check

NFT_FILES := $(wildcard *.tp.nft)
VIM_FILES := $(wildcard *.vim)

highlight: $(NFT_FILES)
	@for f in $^; do \
		echo "Highlight-checking $$NFT $$f (disabled)"; \
	done



check: $(NFT_FILES)
	@for f in $^; do \
		echo "Checking $$f"; \
		sudo /opt/nftables/sbin/nft --version; \
		if ! sudo -v >/dev/null 2>&1; then \
			echo "Need sudo for 'nft -c' check."; \
		fi; \
		sudo /opt/nftables/sbin/nft -c -f "$$f" || exit 1; \
	done

test: $(NFT_FILES)
	@for f in $^; do \
		echo "Checking $$NFT $$f"; \
		sudo /opt/nftables/sbin/nft --version; \
		sudo /opt/nftables/sbin/nft -c -f "$$f" || exit 1; \
	done

# Optional lint rule if you use a linter like `nftables` checker or `shellcheck`
lint: $(VIM_FILES)
	@for f in $^; do \
		echo "Checking $$f"; \
		vint "$$f" || exit 1; \
	done



#!/usr/sbin/nft -f
# File: meta-expr.nft
# Description: A test NFT file to exercise 'meta' Vim syntax highlightings.
#
# Note: for 'meta' as an expression ('meta_expr') see test/meta-expr.nft
# Note: for 'meta' as a key ('meta_key'), see test/meta-key.nft
# Note: for unqualified 'meta', see test/meta-key-unqualified.nft
# Note: for qualified 'meta', see test/meta-key-qualified.nft
#
# If it's followed by a set, it's likely meta_stmt. 
# If it's followed by a field name and then a comparison (==, <, etc.),
# it's meta_expr.
#
# meta_stmt is followed by a set.
# meta_expr is followed by a comparison.
# meta_expr is followed by a field name.
#
#     meta subkey  Operand Type  Notes / Example
#     iif          integer       Interface index
#     oif          integer       Interface index
#     iifname      string        "eth0"
#     oifname      string        "wlan0"
#     iifgroup     integer       Interface group ID
#     oifgroup     integer       Interface group ID
#     iiftype      integer       Interface type (see Linux if_arp.h)
#     oiftype      integer       Interface type
#     ibrname      string        Ingress bridge name
#     obrname      string        Egress bridge name
#     ibriport     string        Ingress bridge port name
#     obriport     string        Egress bridge port name
#     mark         integer       Packet mark
#     priority     integer       Priority of packet (qdisc)
#     length       integer       Packet length
#     protocol     integer/symbolic    Layer 4 protocol (e.g., tcp)
#     pkttype      symbolic      unicast, broadcast, multicast
#     nfproto      symbolic      ip, ip6, inet, etc.
#     rtclassid    integer       Routing class ID
#     skuid        integer       Socket UID
#     skgid        integer       Socket GID
#     secmark      integer       SELinux security mark
#     nftrace      boolean (0/1)    Packet tracing flag
#     cgroup       integer       CGroup v2 classid
#     ipsec        boolean (0/1)    Whether packet is IPsec encapsulated
#     cpu          integer       CPU ID that handled the packet
#     time         integer       Seconds since epoch
#     day          symbolic      monday, tuesday, ..., sunday
#     hour         integer (0–23)    Hour of day
#
# 'meta' keyword is almost always followed by a value (except for 'random', 'nftrace', 'ipsec')
#
# There are a few meta keys that do not require a value and behave like flags:
#    Meta key    Notes
#    random      Used as a condition; no operand
#    nftrace     Used as a condition; defaults to "set"
#    ipsec       Acts like a boolean flag in conditionals
#
# But in some contexts (like expressions), they may still support an explicit value:
#
# meta nftrace == 1
# meta ipsec == 0
#
# So:
#
#     In statements, meta nftrace can appear without a value.
#
#     In expressions, it usually appears with == 0/1 or similar.
#
#     Form               Requires Operand?    Example
#     meta iifname       ✅ Yes               meta iifname "eth0"
#     meta rtclassid     ✅ Yes               meta rtclassid 10
#     meta random        ❌ No                meta random
#     meta nftrace       ❌ No (usually)      meta nftrace
#     meta nftrace == 1  ✅ Yes (expr)        meta nftrace == 1
#     meta ipsec         ❌/✅ Depends        meta ipsec or meta ipsec 0
#
# Key Diagnostic: Try putting meta xyz in a log or set
#
#    If it makes sense to assign or print it, it’s being used as a meta_expr.
#
#    If it makes sense to use as a match, it’s a meta_stmt.
#
#⚠️ Gotchas
#
#    You cannot write meta random as a meta_expr. It’s only valid as a statement.
#
#    Some meta keys like secmark, nftrace, random are statement-only, not expressions.

#
# Semantic Action Pathways (parser_bison.y):
#
# Pathway: describe_cmd/primary_expr/hash_expr/expr/concat_expr/basic_expr/primary_expr/meta_expr
# Pathway: describe_cmd/primary_expr/meta_expr
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# 'describe primary_expr meta_stmt - flags only (support expression only in meta_expr)
describe meta random;  # qualified META (requires 'meta' before it)
describe ipsec;  # 'meta ipsec 0' only in meta_expr
describe meta ipsec;  # 'meta ipsec 0' only in meta_expr
describe nftrace;  # 'meta nftrace == 1' only in meta_expr
describe meta nftrace;  # 'meta nftrace == 1' only in meta_expr

# 'describe' primary_expr meta_stmt - unqualified META, with a value (no 'meta' needed)
describe mark;  # length
describe iif;
describe iifname;  # L3 layer, by interface name
describe iiftype;
describe oif;
describe oifname;  # L3 layer, by interface name
describe oiftype;
describe skgid;
describe skuid;
describe rtclassid;
describe ibriport;  # L2 layer, by interface name
describe obriport;  # L2 layer, by interface name
describe ibrname;
describe obrname;
describe pkttype;
describe cpu;
describe iifgroup;
describe oifgroup;
describe cgroup;
describe time;
describe day;
describe hour;
describe meta mark;  # length
describe meta iif;
describe meta iifname;  # L3 layer, by interface name
describe meta iiftype;
describe meta oif;
describe meta oifname;  # L3 layer, by interface name
describe meta oiftype;
describe meta skgid;
describe meta skuid;
describe meta rtclassid;
describe meta ibriport;  # L2 layer, by interface name
describe meta obriport;  # L2 layer, by interface name
describe meta ibrname;
describe meta obrname;
describe meta pkttype;
describe meta cpu;
describe meta iifgroup;
describe meta oifgroup;
describe meta cgroup;
describe meta time;
describe meta day;
describe meta hour;


#!/usr/sbin/nft -f
# File: meta-key-unqualified.nft
# Description: A test NFT file to exercise 'meta_key' Vim syntax highlightings.
#
# Note: for 'meta' as an statement ('meta_stmt') see test/meta-stmt.nft
# Note: for 'meta' as an expression ('meta_expr') see test/meta-expr.nft
# Note: for 'meta' as a key ('meta_key'), see test/meta-key.nft
# Note: for unqualified 'meta', see test/meta-key-unqualified.nft
# Note: for qualified 'meta', see test/meta-key-qualified.nft
#
# If it's followed by a set, it's likely meta_stmt.
# If it's followed by a field name and then a comparison (==, <, etc.),
# it's meta_expr.
#
# meta_stmt is followed by a set.
# meta_expr is followed by a comparison.
# meta_expr is followed by a field name.
#
#     meta subkey  Operand Type  Notes / Example
#     iif          integer       Interface index
#     oif          integer       Interface index
#     iifname      string        "eth0"
#     oifname      string        "wlan0"
#     iifgroup     integer       Interface group ID
#     oifgroup     integer       Interface group ID
#     iiftype      integer       Interface type (see Linux if_arp.h)
#     oiftype      integer       Interface type
#     ibrname      string        Ingress bridge name
#     obrname      string        Egress bridge name
#     ibriport     string        Ingress bridge port name
#     obriport     string        Egress bridge port name
#     mark         integer       Packet mark
#     priority     integer       Priority of packet (qdisc)
#     length       integer       Packet length
#     protocol     integer/symbolic    Layer 4 protocol (e.g., tcp)
#     pkttype      symbolic      unicast, broadcast, multicast
#     nfproto      symbolic      ip, ip6, inet, etc.
#     rtclassid    integer       Routing class ID
#     skuid        integer       Socket UID
#     skgid        integer       Socket GID
#     secmark      integer       SELinux security mark
#     nftrace      boolean (0/1)    Packet tracing flag
#     cgroup       integer       CGroup v2 classid
#     ipsec        boolean (0/1)    Whether packet is IPsec encapsulated
#     cpu          integer       CPU ID that handled the packet
#     time         integer       Seconds since epoch
#     day          symbolic      monday, tuesday, ..., sunday
#     hour         integer (0–23)    Hour of day
#
# 'meta' keyword is almost always followed by a value (except maybe for 'random', 'nftrace', 'ipsec')
#
# There are a few meta keys that do not require a value and behave like flags:
#    Meta key    Notes
#    random      Used as a condition; no operand
#    nftrace     Used as a condition; defaults to "set"
#    ipsec       Acts like a boolean flag in conditionals
#
# But in some contexts (like expressions), they may still support an explicit value:
#
# meta nftrace == 1
# meta ipsec == 0
#
# So:
#
#     In statements, meta nftrace can appear without a value.
#
#     In expressions, it usually appears with == 0/1 or similar.
#
#     Form               Requires Operand?    Example
#     meta iifname       ✅ Yes               meta iifname "eth0"
#     meta rtclassid     ✅ Yes               meta rtclassid 10
#     meta random        ❌ No                meta random
#     meta nftrace       ❌ No (usually)      meta nftrace
#     meta nftrace == 1  ✅ Yes (expr)        meta nftrace == 1
#     meta ipsec         ❌/✅ Depends        meta ipsec or meta ipsec 0
#
# Key Diagnostic: Try putting meta xyz in a log or set
#
#    If it makes sense to assign or print it, it’s being used as a meta_expr.
#
#    If it makes sense to use as a match, it’s a meta_stmt.
#
#⚠️ Gotchas
#
#    You cannot write meta random as a meta_expr. It’s only valid as a statement.
#
#    Some meta keys like secmark, nftrace, random are statement-only, not expressions.
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# meta_stmt
#
# meta_stmt - flags only (support expression only in meta_expr)
rule T C meta random;  # qualified META (requires 'meta' before it)
rule T C ipsec;  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec;  # 'meta ipsec 0' only in meta_expr
rule T C nftrace 0;  # 'meta nftrace == 1' only in meta_expr
rule T C meta nftrace set 1;  # 'meta nftrace == 1' only in meta_expr

# meta_stmt - INTERNALS; found in scanner.c (not in parser_bison.y)
# 'meta nfproto' is integer or string (as listed in /etc/protocol)
rule inet T C meta nfproto 1;
rule inet T C meta nfproto 1;
rule inet T C meta nfproto inet;
rule inet T C meta nfproto 2;
rule inet T C meta nfproto ip;
rule inet T C meta nfproto 3;
rule inet T C meta nfproto arp;
rule inet T C meta nfproto 7;
rule inet T C meta nfproto bridge;
rule inet T C meta nfproto 10;
rule inet T C meta nfproto ip6;
rule inet T C meta nfproto 12;
rule inet T C meta nfproto netdev;
# 'meta l4proto' is integer or string (as listed in Linux kernel include/uapi/linux/netfilter.h)
rule inet T C meta l4proto 1;
rule inet T C meta l4proto icmp;
rule inet T C meta l4proto 6;
rule inet T C meta l4proto tcp;
rule inet T C meta l4proto 17;
rule inet T C meta l4proto udp;

# meta_stmt - unqualified META, with a value (no 'meta' needed)
rule T C mark 64;  # length
rule T C iif 2;
rule T C iifname "eth0";  # L3 layer, by interface name
rule T C iiftype 1;
rule T C oif 4;
rule T C oifname "wlan0";  # L3 layer, by interface name
rule T C oiftype 1;
rule T C skgid 14;
rule T C skuid 14;
rule T C rtclassid 14;
rule T C ibriport "br0";  # L2 layer, by interface name
rule T C obriport "br1";  # L2 layer, by interface name
rule T C ibrname "under-bridge";
rule T C obrname "over-bridge";
rule T C pkttype broadcast;
rule T C cpu 1;
rule T C iifgroup 0;
rule T C oifgroup 0;
rule T C cgroup 1048577;
rule T C time 12;
rule T C day sunday;
rule T C hour 0;
rule T C hour 00;
rule T C hour 9;
rule T C hour 09;
rule T C hour 10;
rule T C hour 19;
rule T C hour 20;
rule T C hour 23;

# meta_stmt - unqualified META, with a value (optional 'meta' used here)
rule t c meta mark 0x01;
rule t c meta mark 1234;
rule T C meta mark 64;  # length
rule T C meta mark 0x4;
rule T C meta mark 0x1234;
rule T C meta mark 0x00000032;
rule T C meta iif 2;
rule T C meta iifname "eth0";
# iiftype/oiftype are listed in Linux kernel linux/if_arp.h file.
rule T C meta iiftype 1;
rule T C meta oif 4;
rule T C meta oifname "wlan0";
rule T C meta oiftype 1;
rule T C meta skgid 14;
rule T C meta skuid 14;
# 'meta nftace' requires no argument, but still 'unqualified' (no 'meta' needed).
# 'meta rtclassid' is used with 'realm' keyword, mnemonics are in /etc/iproute2/rt_realms
rule T C meta rtclassid 14;
rule T C meta ibriport "br0";
rule T C meta obriport "br1";
rule T C meta ibrname "under-bridge";
rule T C meta ibrname "br0";
rule T C meta obrname "under-bridge";
rule T C meta pkttype broadcast;
rule T C meta pkttype unicast;
rule T C meta pkttype multicast;
rule T C meta pkttype loopback;
rule T C meta pkttype otherhost;
rule T C meta pkttype outgoing;
rule T C meta cpu 1;
rule T C meta iifgroup 0;
rule T C meta oifgroup 0;
rule T C meta cgroup 1048577;
rule T C meta cgroup 0x1;
rule T C meta cgroup 0x01;
rule T C meta cgroup 0x0123;
rule T C meta cgroup 0x01234567;
rule T C meta time 12;
rule T C meta day Monday;
rule T C meta day saturday;
rule T C meta hour 23;
rule T C meta hour 15;

# meta_stmt - qualified META, with a value (requires 'meta' before it)
rule T C meta length 1512;

rule T C meta protocol loopback;
rule T C meta protocol ip;
rule T C meta protocol ip6;
rule T C meta protocol arp;
rule T C meta protocol mpls_uc;
rule T C meta protocol mpls_mc;
rule T C meta protocol 802_1q;
rule T C meta protocol pppoe;
rule T C meta protocol lldp;
rule T C meta protocol qinq;
rule T C meta protocol arp;

rule T C meta priority none;

rule T C meta secmark set 14;
rule T C meta secmark set 42;


#!/usr/sbin/nft -f
# File: meta-stmt.nft
# Description: A test NFT file to exercise 'meta' Vim syntax highlightings.
#
# Note: for 'meta' as an expression ('meta_expr') see test/meta-expr.nft
# Note: for 'meta' as a key ('meta_key'), see test/meta-key.nft
# Note: for unqualified 'meta', see test/meta-key-unqualified.nft
# Note: for qualified 'meta', see test/meta-key-qualified.nft
#
# If it's followed by a set, it's likely meta_stmt.
# If it's followed by a field name and then a comparison (==, <, etc.),
# it's meta_expr.
#
# meta_stmt is followed by a set.
# meta_expr is followed by a comparison.
# meta_expr is followed by a field name.
#
#     meta subkey  Operand Type  Notes / Example
#     iif          integer       Interface index
#     oif          integer       Interface index
#     iifname      string        "eth0"
#     oifname      string        "wlan0"
#     iifgroup     integer       Interface group ID
#     oifgroup     integer       Interface group ID
#     iiftype      integer       Interface type (see Linux if_arp.h)
#     oiftype      integer       Interface type
#     ibrname      string        Ingress bridge name
#     obrname      string        Egress bridge name
#     ibriport     string        Ingress bridge port name
#     obriport     string        Egress bridge port name
#     mark         integer       Packet mark
#     priority     integer       Priority of packet (qdisc)
#     length       integer       Packet length
#     protocol     integer/symbolic    Layer 4 protocol (e.g., tcp)
#     pkttype      symbolic      unicast, broadcast, multicast
#     nfproto      symbolic      ip, ip6, inet, etc.
#     rtclassid    integer       Routing class ID
#     skuid        integer       Socket UID
#     skgid        integer       Socket GID
#     secmark      integer       SELinux security mark
#     nftrace      boolean (0/1)    Packet tracing flag
#     cgroup       integer       CGroup v2 classid
#     ipsec        boolean (0/1)    Whether packet is IPsec encapsulated
#     cpu          integer       CPU ID that handled the packet
#     time         integer       Seconds since epoch
#     day          symbolic      monday, tuesday, ..., sunday
#     hour         integer (0–23)    Hour of day
#     random       integer (0-1)  Used as a condition; no operand
#
# 'meta' keyword is almost always followed by a value
#
# There are a few meta keys that do not require a value and behave like flags:
#    Meta key    Notes
#    nftrace     Used as a condition; defaults to "set"
#
# But in some contexts (like expressions), they may still support an explicit value:
#
# meta nftrace == 1
# meta ipsec == 0
#
# So:
#
#     In statements, meta nftrace can appear without a value.
#
#     In expressions, it usually appears with == 0/1 or similar.
#
#     Form               Requires Operand?    Example
#     meta iifname       ✅ Yes               meta iifname "eth0"
#     meta rtclassid     ✅ Yes               meta rtclassid 10
#     meta random        ❌ No                meta random
#     meta nftrace       ❌ No (usually)      meta nftrace
#     meta nftrace == 1  ✅ Yes (expr)        meta nftrace == 1
#     meta ipsec         ❌/✅ Depends        meta ipsec or meta ipsec 0
#
# Key Diagnostic: Try putting meta xyz in a log or set
#
#    If it makes sense to assign or print it, it’s being used as a meta_expr.
#
#    If it makes sense to use as a match, it’s a meta_stmt.
#
#⚠️ Gotchas
#
#    You cannot write meta random as a meta_expr. It’s only valid as a statement.
#
#    Some meta keys like secmark, nftrace, random are statement-only, not expressions.
#
# Semantic action pathways (via parser_bison.y):
#
# basic_expr/primary_expr/hash_expr/expr/concat_expr/basic_expr/primary_expr/meta_expr
# concat_stmt_expr/primary_stmt_expr/hash_expr/expr/concat_expr/basic_expr/primary_expr/meta_expr
# expr/'map'/map_expr/concat_expr/basic_expr/primary_expr/meta_expr
# 'match'/match_stmt/relational_expr/expr/concat_expr/basic_expr/primary_expr/meta_expr
# 'meta'/meta_stmt/stmt_expr/map_stmt_expr/concat_stmt_expr/basic_stmt_expr/expr/exclusive_or_stmt_expr/and_stmt_expr/shift_stmt_expr/primary_stmt_expr/basic_stmt_expr/expr/exclusive_or_stmt_expr/and_stmt_expr/shift_stmt_expr/primary_stmt_expr/meta_expr
# 'meta'/meta_stmt/stmt_expr/map_stmt_expr/concat_stmt_expr/basic_stmt_expr/expr/exclusive_or_stmt_expr/and_stmt_expr/shift_stmt_expr/primary_stmt_expr/meta_expr
# 'meta'/meta_stmt/stmt_expr/map_stmt_expr/concat_stmt_expr/primary_stmt_expr/basic_stmt_expr/expr/exclusive_or_stmt_expr/and_stmt_expr/shift_stmt_expr/primary_stmt_expr/meta_expr
# 'meta'/meta_stmt/stmt_expr/multion_stmt_expr/prefix_stmt_expr/basic_stmt_expr/expr/exclusive_or_stmt_expr/and_stmt_expr/shift_stmt_expr/primary_stmt_expr/meta_expr
# 'meta'/meta_stmt/stmt_expr/multion_stmt_expr/range_stmt_expr/basic_stmt_expr/expr/exclusive_or_stmt_expr/and_stmt_expr/shift_stmt_expr/primary_stmt_expr/meta_expr
# meta_stmt/stmt_expr/map_stmt_expr/concat_stmt_expr/primary_stmt_expr/meta_expr
# meter_key_expr_alloc/concat_expr/basic_expr/primary_expr/meta_expr
# primary_expr/basic_expr/primary_expr/meta_expr
# 'queue'/queue_stmt/queue_stmt_expr/hash_expr/expr/concat_expr/basic_expr/primary_expr/meta_expr
# 'queue'/queue_stmt/queue_stmt_expr/'map'/map_expr/concat_expr/basic_expr/primary_expr/meta_expr
# set_elem_expr_stmt_alloc/concat_expr/basic_expr/primary_expr/meta_expr
# shift_stmt_expr/primary_stmt_expr/hash_expr/expr/concat_expr/basic_expr/primary_expr/meta_expr
# typeof_expr/primary_expr/hash_expr/expr/concat_expr/basic_expr/primary_expr/meta_expr
# typeof_expr/primary_expr/meta_expr
# typeof_verdict_expr/primary_expr/hash_expr/expr/concat_expr/basic_expr/primary_expr/meta_expr
# typeof_verdict_expr/primary_expr/meta_expr
# verdict_map_stmt/concat_expr/basic_expr/primary_expr/meta_expr

#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# top-level meta
# 'meta flow' is a top-level meta action (not a meta key, meta_expr, nor meta_stmt)
rule T C meta notrack;
rule T C meta flow at MyDevice;
rule T C meta flow offload at MyDevice;  # 'flow' is a top-level action (not a meta key)
rule T C meta flow add at MyDevice;  # 'flow' meta key found only in 'meta_stmt'

# meta keys, both qualified and unqualified
# meta_stmt - flags only (support expression only in meta_expr)
rule T C meta random <= 0;  # qualified META (requires 'meta' before it)
rule T C meta random >= 0;  # qualified META (requires 'meta' before it)
rule T C meta random == 0;  # qualified META (requires 'meta' before it)
rule T C meta random != 1;  # qualified META (requires 'meta' before it)
rule T C meta random mod 2 == 0;  # qualified META (requires 'meta' before it)
rule T C meta random == 0;  # qualified META (requires 'meta' before it)

rule T C meta ipsec 0;  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec == 1;  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec exists; # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec missing; # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec missing; # 'meta ipsec 0' only in meta_expr
rule T C nftrace;  # 'meta nftrace == 1' only in meta_expr
rule T C meta nftrace;  # 'meta nftrace == 1' only in meta_expr

# meta_stmt - INTERNALS; found in scanner.c (not in parser_bison.y)
# 'meta nfproto' is integer or string (as listed in /etc/protocol)
rule inet T C meta nfproto 1; rule inet T C meta nfproto 1;
rule inet T C meta nfproto 1;
rule inet T C meta nfproto inet;
rule inet T C meta nfproto 2;
rule inet T C meta nfproto ip;
rule inet T C meta nfproto 3;
rule inet T C meta nfproto arp;
rule inet T C meta nfproto 7;
rule inet T C meta nfproto bridge;
rule inet T C meta nfproto 10;
rule inet T C meta nfproto ip6;
rule inet T C meta nfproto 12;
rule inet T C meta nfproto netdev;
rule inet T C meta nfproto netdev;

# 'meta l4proto' is integer or string (as listed in Linux kernel include/uapi/linux/netfilter.h)
rule inet T C meta l4proto 1;
rule inet T C meta l4proto icmp;
rule inet T C meta l4proto 6;
rule inet T C meta l4proto tcp;
rule inet T C meta l4proto 17;
rule inet T C meta l4proto udp;
rule inet T C meta l4proto udp;

# meta_stmt - unqualified META, with a value (no 'meta' needed)
rule T C mark 64;  # length
rule T C mark 64;  # length
rule T C iif 2;
rule T C iifname "eth0";  # L3 layer, by interface name
rule T C iiftype 1;
rule T C oif 4;
rule T C oifname "wlan0";  # L3 layer, by interface name
rule T C oiftype 1;
rule T C skgid 14;
rule T C skuid 14;
rule T C rtclassid 14;
rule T C ibriport "br0";  # L2 layer, by interface name
rule T C obriport "br1";  # L2 layer, by interface name
rule T C ibrname "under-bridge";
rule T C obrname "over-bridge";
rule T C pkttype broadcast;
rule T C ipsec 0;  # 'meta ipsec 0' only in meta_expr
rule T C cpu 1;
rule T C iifgroup 0;
rule T C oifgroup 0;
rule T C cgroup 1048577;
rule T C time 12;
rule T C day sunday;
rule T C hour 23;

# meta_stmt - unqualified META, with a value (optional 'meta' used here)
rule t c meta mark 0x01;
rule t c meta mark 1234;
rule T C meta mark 64;  # length
rule T C meta mark 0x4;
rule T C meta mark 0x1234;
rule T C meta mark 0x00000032;
rule T C meta mark == 0x1;
rule T C meta mark == @my_set_of_marks;
rule T C meta mark == { 0x1234, 0x4 };
rule T C meta mark != 64;
rule T C meta mark != @my_set_of_marks;
rule T C meta mark != { 0x1234, 0x4 };
rule T C meta mark >= 64;
rule T C meta mark <= 64;
rule T C meta mark & 0x02 == 0x02;
rule T C meta mark in { 0x1234567, 0x0001 };
rule T C meta mark in @my_set_of_marks;
rule T C meta mark not in @my_set_of_marks;
rule T C meta iif any;
rule T C meta iif 2;
rule T C meta iif == 2;
rule T C meta iif != 2;
rule T C meta iif eth0;
rule T C meta iif "eth0";
rule T C meta iif in { 1, "eth0" };
rule T C meta iif in @mySetofInterfaceNames;
rule T C meta iif not in { 1, "eth0" };
rule T C meta iif == eth0;
rule T C meta iif == "eth0";
rule T C meta iif == @set_of_interface_names;
rule T C meta iif == { "eth0", "wlan0", "br0" };
rule T C meta iif != eth0;
rule T C meta iif != "eth0";
rule T C meta iif != { "eth0", "wlan0", "br0" };
rule T C meta iif != { "eth0", "wlan0", "br0" };
rule T C meta iifname "eth0";
rule T C meta iifname { "eth0" };
rule T C meta iifname in { "eth0" };
rule T C meta iifname any;
rule T C meta iifname in @set_name_of_interfaces;
rule T C meta iifname == "eth0";
rule T C meta iifname == { "eth0" };
rule T C meta iifname == @set_name_of_interfaces;
rule T C meta iifname != "eth0";
rule T C meta iifname != @set_name_of_interfaces;
rule T C meta iifname != { "eth0" };
rule T C meta iifname in { "eth0" };
rule T C meta iifname not in { "eth0" };
rule T C meta iifname ~ "^eth.*";  # regex
rule T C meta iifname !~ "^eth.*";  # regex
rule T C meta iifname !~ "^eth.*";  # regex
# iiftype/oiftype are listed in Linux kernel linux/if_arp.h file.
rule T C meta iiftype 1;
rule T C meta iiftype == 1;
rule T C meta iiftype == { 1, 2, 3};
rule T C meta iiftype == @set_name_of_interfaces;
rule T C meta iiftype != 1;
rule T C meta iiftype != { 1, 2, 3};
rule T C meta iiftype != @set_name_of_interfaces;
rule T C meta iiftype >= 1;
rule T C meta iiftype <= 1;
rule T C meta iiftype in {1, 2, 6};
rule T C meta iiftype in {1, 2, 6};
rule T C meta iiftype not in {1, 2, 6};
rule T C meta oif any;
rule T C meta oif 2;
rule T C meta oif == 2;
rule T C meta oif != 2;
rule T C meta oif eth0;
rule T C meta oif "eth0";
rule T C meta oif in { 1, "eth0" };
rule T C meta oif in @mySetofInterfaceNames;
rule T C meta oif not in @mySetofInterfaceNames;
rule T C meta oif == eth0;
rule T C meta oif == "eth0";
rule T C meta oif == @set_of_interface_names;
rule T C meta oif == { "eth0", "wlan0", "br0" };
rule T C meta oif != eth0;
rule T C meta oif != "eth0";
rule T C meta oif != { "eth0", "wlan0", "br0" };
rule T C meta oif != { "eth0", "wlan0", "br0" };
rule T C meta oifname "eth0";
rule T C meta oifname { "eth0" };
rule T C meta oifname in { "eth0" };
rule T C meta oifname any;
rule T C meta oifname in @set_name_of_interfaces;
rule T C meta oifname not in @set_name_of_interfaces;
rule T C meta oifname == "eth0";
rule T C meta oifname == { "eth0" };
rule T C meta oifname == @set_name_of_interfaces;
rule T C meta oifname != "eth0";
rule T C meta oifname != @set_name_of_interfaces;
rule T C meta oifname != { "eth0" };
rule T C meta oifname ~ "^eth.*";  # regex
rule T C meta oifname !~ "^eth.*";  # regex
rule T C meta oifname !~ "^eth.*";  # regex
rule T C meta oiftype 1;
rule T C meta oiftype == 1;
rule T C meta oiftype == { 1, 2, 3};
rule T C meta oiftype == @set_name_of_interfaces;
rule T C meta oiftype != 1;
rule T C meta oiftype != { 1, 2, 3};
rule T C meta oiftype != @set_name_of_interfaces;
rule T C meta oiftype >= 1;
rule T C meta oiftype <= 1;
rule T C meta oiftype in {1, 2, 6};
rule T C meta oiftype not in {1, 2, 6};
rule T C meta skgid 64;  # length
rule t c meta skgid 0x01;
rule t c meta skgid 1234;
rule T C meta skgid 0x4;
rule T C meta skgid 0x1234;
rule T C meta skgid 0x00000032;
rule T C meta skgid == 0x1;
rule T C meta skgid == @my_set_of_skgid;
rule T C meta skgid == { 0x1234, 0x4 };
rule T C meta skgid != 64;
rule T C meta skgid != @my_set_of_skgid;
rule T C meta skgid != { 0x1234, 0x4 };
rule T C meta skgid >= 64;
rule T C meta skgid <= 64;
rule T C meta skgid & 0x02 == 0x02;
rule T C meta skgid in { 0x1234567, 0x0001 };
rule T C meta skgid in @my_set_of_skgid;
rule T C meta skgid not in @my_set_of_skgid;
rule T C meta skuid 64;  # length
rule t c meta skuid 0x01;
rule t c meta skuid 1234;
rule T C meta skuid 0x4;
rule T C meta skuid 0x1234;
rule T C meta skuid 0x00000032;
rule T C meta skuid == 0x1;
rule T C meta skuid == @my_set_of_skuid;
rule T C meta skuid == { 0x1234, 0x4 };
rule T C meta skuid != 64;
rule T C meta skuid != @my_set_of_skuid;
rule T C meta skuid != { 0x1234, 0x4 };
rule T C meta skuid >= 64;
rule T C meta skuid <= 64;
rule T C meta skuid & 0x02 == 0x02;
rule T C meta skuid in { 0x1234567, 0x0001 };
rule T C meta skuid in @my_set_of_skuid;
rule T C meta skuid not in @my_set_of_skuid;
# 'meta nftace' requires no argument, but still 'unqualified' (no 'meta' needed).
# 'meta rtclassid' is used with 'realm' keyword, mnemonics are in /etc/iproute2/rt_realms
#
rule T C meta rtclassid any;
rule T C meta rtclassid 14;
rule T C meta ibriport "br0";
rule T C meta ibriport { "br0" };
rule T C meta ibriport { "br0", "br1" };
rule T C meta ibriport in { "br0" };
rule T C meta ibriport any;
rule T C meta ibriport in @set_name_of_interfaces;
rule T C meta ibriport not in @set_name_of_interfaces;
rule T C meta ibriport == "br0";
rule T C meta ibriport == { "br0" };
rule T C meta ibriport == @set_name_of_interfaces;
rule T C meta ibriport != "br0";
rule T C meta ibriport != @set_name_of_interfaces;
rule T C meta ibriport != { "br0" };
rule T C meta ibriport ~ "^br.*";  # regex
rule T C meta ibriport !~ "^br.*";  # regex
rule T C meta ibriport !~ "^br.*";  # regex
rule T C meta obriport "br0";
rule T C meta obriport { "br0" };
rule T C meta obriport in { "br0" };
rule T C meta obriport any;
rule T C meta obriport in @set_name_of_interfaces;
rule T C meta obriport == "br0";
rule T C meta obriport == { "br0" };
rule T C meta obriport == @set_name_of_interfaces;
rule T C meta obriport != "br0";
rule T C meta obriport != @set_name_of_interfaces;
rule T C meta obriport != { "br0" };
rule T C meta obriport ~ "^br.*";  # regex
rule T C meta obriport !~ "^br.*";  # regex
rule T C meta obriport !~ "^br.*";  # regex
rule T C meta ibrname "under-bridge";
rule T C meta ibrname {"under-bridge"};
rule T C meta ibrname in {"under-bridge"};
rule T C meta ibrname in @set_name_of_interfaces;
rule T C meta ibrname not in @set_name_of_interfaces;
rule T C meta obrname "under-bridge";
rule T C meta obrname {"under-bridge"};
rule T C meta obrname in {"under-bridge"};
rule T C meta obrname in @set_name_of_interfaces;
rule T C meta obrname not in @set_name_of_interfaces;
rule T C meta pkttype broadcast;
rule T C meta pkttype unicast;
rule T C meta pkttype multicast;
rule T C meta pkttype loopback;
rule T C meta pkttype otherhost;
rule T C meta pkttype outgoing;
rule T C meta pkttype == { unicast, multicast };
rule T C meta pkttype != { unicast, multicast };
rule T C meta pkttype in { unicast, multicast };
rule T C meta pkttype in @my_packet_types;
rule T C meta pkttype not in { broadcast, otherhost, loopback, outgoing };
rule T C meta pkttype not in @my_packet_types;
rule T C meta ipsec == 1;  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec != 1;  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec == { 1, missing };  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec == @my_ipsec_settings;
rule T C meta ipsec != { missing };  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec != @my_ipsec_settings;
rule T C meta ipsec in { 1 };  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec not in { 0 };  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec in { missing };  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec not in { missing };  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec in @my_ipsec_settings;  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec not in { exists };  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec not in @my_ipsec_settings;  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec exists; # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec missing; # 'meta ipsec 0' only in meta_expr
rule T C meta cpu 1;
rule T C meta cpu == 1;
rule T C meta cpu in { 1,2,3,8,9,10 };
rule T C meta cpu in @my_set_of_cpus;
rule T C meta cpu != 1;
rule T C meta cpu not in @my_set_of_cpus;
rule T C meta cpu not in { 1,2,3,8,9,10 };
rule T C meta iifgroup 0;
rule T C meta iifgroup == 0;
rule T C meta iifgroup != 0;
rule T C meta iifgroup < 0;
rule T C meta iifgroup <= 0;
rule T C meta iifgroup > 0;
rule T C meta iifgroup >= 0;
rule T C meta iifgroup in { 1,2,4 };
rule T C meta iifgroup in @my_set_of_ifgroups;
rule T C meta iifgroup not in { 1,2,4 };
rule T C meta iifgroup not in @my_set_of_ifgroups;
rule T C meta oifgroup 0;
rule T C meta oifgroup 1234567890;
rule T C meta oifgroup == 0;
rule T C meta oifgroup != 0;
rule T C meta oifgroup < 0;
rule T C meta oifgroup <= 0;
rule T C meta oifgroup > 0;
rule T C meta oifgroup >= 0;
rule T C meta oifgroup in { 1,2,4 };
rule T C meta oifgroup in @my_set_of_ifgroups;
rule T C meta oifgroup not in { 1,2,4 };
rule T C meta oifgroup not in @my_set_of_ifgroups;
rule T C meta cgroup 12345678;
rule T C meta cgroup 12345678901234567890;
rule T C meta cgroup 0x1;
rule T C meta cgroup 0x01;
rule T C meta cgroup 0x0123;
rule T C meta cgroup 0x01234567;
rule T C meta cgroup == 12345678;
rule T C meta cgroup != 12345678;
rule T C meta cgroup < 12345678;
rule T C meta cgroup <= 12345678;
rule T C meta cgroup > 12345678;
rule T C meta cgroup >= 12345678;
rule T C meta cgroup in { 1,2,3,4 };
rule T C meta cgroup in @my_set_of_cgroups;
rule T C meta cgroup not in @my_set_of_cgroups;
rule T C meta time 12;
rule T C meta time 1722960000;
rule T C meta time == 0x7890abcd;
rule T C meta time != 0x7890abcd;
rule T C meta time > 0x7890abcd;
rule T C meta time >= 0x7890abcd;
rule T C meta time < 0x7890abcd;
rule T C meta time <= 0x7890abcd;
rule T C meta time in { 0x7890abcd };
rule T C meta time not in { 0x7890abcd, 0x8900000a };
rule T C meta day 0;
rule T C meta day 6;
rule T C meta day Monday;
rule T C meta day saturday;
rule T C meta day == thursday;
rule T C meta day != thursday;
rule T C meta day in { 2,3,4 };
rule T C meta day in { Tuesday };
rule T C meta day in { 6, Sunday, Monday };
rule T C meta day not in { 5, 6 };
rule T C meta day not in { Sunday, Monday };
rule T C meta hour 0;
rule T C meta hour 00;
rule T C meta hour 9;
rule T C meta hour 09;
rule T C meta hour 10;
rule T C meta hour 15;
rule T C meta hour 19;
rule T C meta hour 20;
rule T C meta hour 23;
rule T C meta hour == 23;
rule T C meta hour != 23;
rule T C meta hour > 23;
rule T C meta hour >= 23;
rule T C meta hour < 23;
rule T C meta hour <= 23;
rule T C meta hour in { 0,2,4,8,10,22 };
rule T C meta hour in @my_set_of_hours;
rule T C meta hour not in { 0,2,4,8,10,22 };
rule T C meta hour not in @my_set_of_hours;

# meta_stmt - qualified META, with a value (requires 'meta' before it)
rule T C meta length 1512;
rule T C meta length == 1492;
rule T C meta length != 256;
rule T C meta length < 256;
rule T C meta length <= 256;
rule T C meta length > 256;
rule T C meta length >= 256;
rule T C meta length in { 1490, 1512, 1518, 1290 };
rule T C meta length not in { 1490, 1512, 1518, 1290 };

rule T C meta protocol any;
rule T C meta protocol loopback;
rule T C meta protocol == pppoe;
rule T C meta protocol == 32768;
rule T C meta protocol == 0x0800;
rule T C meta protocol == @my_protocol_list;
rule T C meta protocol == { 0x0800, 0x0806 };
rule T C meta protocol == { ip, ip6 };
rule T C meta protocol != 0x0800;
rule T C meta protocol != ip;
rule T C meta protocol <= 1;
rule T C meta protocol >= 1;
rule T C meta protocol in @my_protocol_list;
rule T C meta protocol in { arp, 802_1q };
rule T C meta protocol ip;
rule T C meta protocol ip6;
rule T C meta protocol arp;
rule T C meta protocol mpls_uc;
rule T C meta protocol mpls_mc;
rule T C meta protocol pppoe;
rule T C meta protocol lldp;
rule T C meta protocol qinq;
rule T C meta protocol arp;
rule T C meta protocol arp;

rule T C meta priority 1;
rule T C meta priority == 1;
rule T C meta priority ==  100;
rule T C meta priority == 0x010;
rule T C meta priority == @my_set_of_priorities;
rule T C meta priority != 200;
rule T C meta priority != 0x001F;
rule T C meta priority != @my_set_of_priorities;
rule T C meta priority > 15;
rule T C meta priority >= 15;
rule T C meta priority < 15;
rule T C meta priority <= 15;
rule T C meta priority in @my_set_of_priorities;
rule T C meta priority in { 1, 5, 200 };
rule T C meta priority in { 1, 5, 200 };

rule T C meta secmark 14;
rule T C meta secmark 0x40000000;
rule T C meta secmark == 14;
rule T C meta secmark == 0x40000000;
rule T C meta secmark == { 14, 0x400 };
rule T C meta secmark == @my_set_of_secmark;
rule T C meta secmark != 14;
rule T C meta secmark != 0x40000000;
rule T C meta secmark != { 14, 0x400 };
rule T C meta secmark != @my_set_of_secmark;
rule T C meta secmark < 14;
rule T C meta secmark <= 14;
rule T C meta secmark > 14;
rule T C meta secmark >= 14;
rule T C meta secmark in @my_set_of_secmark;
rule T C meta secmark not in @my_set_of_secmark;

# Complex rules (multiple `stmt`s)
rule T C meta iif eth0 oif eth1 accept;

rule T C meta iifname ~ "^eth.*" oif eth1 accept;  # regex
rule T C meta iifname "eth0" ip saddr 192.168.1.1 accept;

rule T C meta iiftype >= 1 && meta iiftype <= 2 accept;

rule T C meta iiftype != 1 continue;
rule T C meta iiftype != 1 return;
rule T C meta iiftype != 1 goto abc;
rule T C meta iiftype != 1 jump abc;
rule T C meta iiftype != 1 accept;
rule T C meta iiftype != 1 drop;
rule T C meta iiftype != 1 drop;

rule T C meta iiftype 1 accept;

# post Linux v6.1
set T my_set_of_iftypes { type integer; };
element T my_set_of_iftypes { 1, 6 };
rule T C meta iiftype in @my_set_of_iftypes accept ;
# pre Linux v6.1
set T my_set_of_iftypes { type mark; };
element T my_set_of_iftypes { 1, 6 };
rule T C meta mark in @my_set_of_iftypes drop;

rule T C meta skgid & 0xFF == 0x1 accept;


#!/usr/sbin/nft -f
# File: meter.nft
# Description: Test NFT file to exercise 'meter_stmt' Vim syntax highlightings.
#
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

add rule ip filter input tcp flags syn tcp dport ssh meter flood size 128000 { ip saddr timeout 10s limit rate over 10/second} add @blackhole { ip saddr timeout 1m } drop

list meter table_name identifier
list meter ip table_name identifier
list meter bridge table_name identifier
list meter netdev table_name identifier

flush meter myIpTable mySet
flush meter ip myIpTable mySet
flush meter ip6 myIp6Table mySet
flush meter inet myInetTable mySet ; 
flush meter netdev myNetdevTable mySet
flush meter bridge myBridgeTable mySet
flush meter arp myArpTable mySet


#!/usr/sbin/nft -f
# File: monitor.nft
# Description: Test NFT file to exercise 'monitor' Vim syntax highlightings.
#
# base_cmd  monitor_cmd
# monitor [new | destroy] [tables | chains | sets | rules | elements] [xml | json]
#

table ip6 MyIptable  ### sanity test
monitor   ### sanity test

################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# monitor <monitor_event> 
monitor new  # monitor 'ANY'
# monitor <monitor_event> <monitor_object> 
monitor new tables 
monitor new chains
monitor new sets
monitor new rules
monitor new elements 
monitor new ruleset
monitor new trace 
# monitor /* empty */ <monitor_object> 
monitor tables;
monitor chains
monitor sets
monitor rules
monitor elements
monitor ruleset
monitor trace
# monitor /* empty */ <monitor_object> <monitor_format>
monitor tables json;
monitor chains xml
monitor sets json
monitor rules vm json
monitor elements json
monitor ruleset json
monitor trace json
monitor trace json
# monitor <monitor_event> <monitor_object> <monitor_format>
monitor new tables json
monitor new chains json
monitor new sets vm json
monitor new rules json
monitor new elements json
monitor new ruleset json
monitor new trace  json
#
monitor destroy 
monitor destroy tables 
monitor destroy chains
monitor destroy sets
monitor destroy rules
monitor destroy elements
monitor destroy trace 


#!/usr/sbin/nft -f
# File: nat.nft
# Description: A test NFT file to exercise 'nat_stmt' Vim syntax highlightings.
#
# nftables syntax name: nat_stmt
# nftables patyhway:    nat_stmt->stmt
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

tableid chainid dnat
rule tableid chainid dnat
add rule tableid chainid dnat

tableid chainid snat
rule tableid chainid snat
add rule tableid chainid snat

# variable_expr->symbol_expr->symbol_stmt_expr->stmt_expr->'to'->nat_stmt->stmt
tableid chainid snat to $VARIABLE_NAME 

# 'ether'->keyword_expr->symbol_stmt_expr->stmt_expr->'to'->nat_stmt->stmt
tableid chainid snat to ether 

# ':'->'to'->nat_stmt->stmt
tableid chainid snat to : dnat 

# stmt_expr->'to'->nat_stmt->stmt
tableid chainid snat to destroy : last 

# stmt_expr->'to'->'interval'->nat_stmt->stmt
tableid chainid snat interval to ecn 

# stmt_expr->'to'->'prefix'->nat_stmt->stmt
tableid chainid snat prefix to reset 


# stmt_expr->keyword_expr->'prefix'->nat_stmt->stmt
tableid chainid snat ip to last 
tableid chainid snat ip to original : last
tableid chainid snat ip6 to label 
tableid chainid snat ip6 to reply : arp
tableid chainid snat ip6 addr . port to
tableid chainid snat ip6 interval to
tableid chainid snat ip6 prefix to

# nf_nat_flags->nat_stmt->stmt
tableid chainid snat ip to original : last random
tableid chainid snat ip to original : last fully-random
tableid chainid snat ip to original : last persistent
tableid chainid snat ip to original : last persistent,random
tableid chainid snat ip to original : last persistent,random,fully-random

table tableID {
    chain chainID {
        # stmt_expr->'dnat'->nat_stmt->stmt
        dnat stmt_expr;
        # nat_flags->stmt_expr->'dnat'->nat_stmt->stmt
        dnat stmt_expr random;
        dnat stmt_expr fully-random;
        dnat stmt_expr persistent;
        dnat stmt_expr random,persistent;
        # stmt_expr->':'->'dnat'->nat_stmt->stmt
        dnat : stmt_expr;
        # nat_flags->stmt_expr->':'->'dnat'->nat_stmt->stmt
        dnat : stmt_expr random;
        dnat : stmt_expr fully-random;
        dnat : stmt_expr persistent;
        dnat : stmt_expr persistent,fully-random;
        # nat_flags->stmt_expr->':'->stmt_expr->'dnat'->nat_stmt->stmt
        dnat stmt_expr : stmt_expr;
        dnat stmt_expr : stmt_expr random;
        dnat stmt_expr : stmt_expr fully-random;
        dnat stmt_expr : stmt_expr persistent;
        dnat stmt_expr : stmt_expr persistent,random;
        # stmt_expr->'to'->'dnat'->nat_stmt->stmt
        dnat to stmt_expr;
        # nat_flags->stmt_expr->'to'->'dnat'->nat_stmt->stmt
        dnat to stmt_expr nat_flags;
        # stmt_expr->':'->'to'->'dnat'->nat_stmt->stmt
        dnat to : stmt_expr;
        # nat_flags->stmt_expr->':'->'to'->'dnat'->nat_stmt->stmt
        dnat to : stmt_expr nat_flags;
        # stmt_expr->':'->stmt_expr->'to'->'dnat'->nat_stmt->stmt
        dnat to stmt_expr : stmt_expr;
        # nat_flags->stmt_expr->':'->stmt_expr->'to'->'dnat'->nat_stmt->stmt
        dnat to stmt_expr : stmt_expr nat_flags;
        # stmt_expr->'to'->'interval'->'dnat'->nat_stmt->stmt
        dnat interval to stmt_expr;
        # nat_flags->stmt_expr->'to'->'interval'->'dnat'->nat_stmt->stmt
        dnat interval to stmt_expr nat_flags;
        # stmt_expr->'to'->'prefix'->'dnat'->nat_stmt->stmt
        dnat prefix to stmt_expr;
        # nat_flags->stmt_expr->'to'->'prefix'->'dnat'->nat_stmt->stmt
        dnat prefix to stmt_expr nat_flags;
        # stmt_expr->'to'->'ip'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip to stmt_expr;
        # nat_flags->stmt_expr->'to'->'ip'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip to stmt_expr nat_flags;
        # stmt_expr->':'->stmt_expr->'to'->'ip'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip to stmt_expr : stmt_expr;
        # nat_flags->stmt_expr->':'->stmt_expr->'to'->'ip'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip to stmt_expr : stmt_expr nat_flags;
        # stmt_expr->'to'->PORT->'.'->ADDR->'ip'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip addr . port to stmt_expr;
        # nat_flags->stmt_expr->'to'->PORT->'.'->ADDR->'ip'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip addr . port to stmt_expr nat_flags;
        # stmt_expr->'to'->'interval'->'ip'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip interval to stmt_expr;
        # nat_flags->stmt_expr->'to'->'interval'->'ip'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip interval to stmt_expr nat_flags;
        # stmt_expr->'to'->'prefix'->'ip'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip prefix to stmt_expr;
        # nat_flags->stmt_expr->'to'->'prefix'->'ip'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip prefix to stmt_expr nat_flags;
        # stmt_expr->'to'->'ip6'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip6 to stmt_expr;
        # nat_flags->stmt_expr->'to'->'ip6'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip6 to stmt_expr nat_flags;
        # stmt_expr->':'->stmt_expr->'to'->'ip6'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip6 to stmt_expr : stmt_expr;
        # nat_flags->stmt_expr->':'->stmt_expr->'to'->'ip6'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip6 to stmt_expr : stmt_expr nat_flags;
        # stmt_expr->'to'->PORT->'.'->ADDR->'ip6'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip6 addr . port to stmt_expr;
        # nat_flags->stmt_expr->'to'->PORT->'.'->ADDR->'ip6'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip6 addr . port to stmt_expr nat_flags;
        # stmt_expr->'to'->'interval'->'ip6'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip6 interval to stmt_expr;
        # nat_flags->stmt_expr->'to'->'interval'->'ip6'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip6 interval to stmt_expr nat_flags;
        # stmt_expr->'to'->'prefix'->'ip6'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip6 prefix to stmt_expr;
        # nat_flags->stmt_expr->'to'->'prefix'->'ip6'->key_proto->'dnat'->nat_stmt->stmt
        dnat ip6 prefix to stmt_expr nat_flags;
    };
};


#!/usr/sbin/nft -f
# File: queue.nft
#
# Description: test NFT file to exercise 'queue' in Vim syntax highlightings.
#
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

add rule myTable myChain queue
add rule myTable myChain queue num 2
add rule myTable myChain queue num 2-3
add rule myTable myChain queue num 4-5 fanout bypass
add rule myTable myChain queue num 4-5 fanout
add rule myTable myChain queue num 4-5 bypass


#!/usr/sbin/nft -f
# File: quota.nft
# Description: Test NFT file to exercise '[add] quota' Vim syntax highlightings.
#
# base_cmd add_cmd 'quota'
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_quota
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# quota statements
add quota filter http_quota over 25 mbytes
add quota last http_quota over 25 mbytes
add quota filter last over 25 mbytes
add quota last last over 25 mbytes
add quota filter ssh_quota { 10 kbytes }
add quota filter http_quota { over 25 mbytes };
add quota ip mangle eth0output over 500 mbytes
add quota ip6 myIpfilter http-quota until 525 kbytes
add quota inet myIpfilter http-quota over 25 mbytes
add quota netdev myIpfilter http-quota over 25 mbytes;
add quota bridge myIpfilter http-quota over 25 mbytes
add quota arp myIpfilter http-quota over 25 mbytes

quota T Q over 123
quota table1 last over 123
quota last quota2 over 123
quota last last over 123
quota example { over 100 mbytes used 0 bytes }
quota ip T Q over 123
quota ip myIpfilter http-quota over 25 mbytes
quota ip6 myIpfilter http-quota until 525 kbytes
quota inet myIpfilter http-quota over 25 mbytes
quota netdev myIpfilter http-quota over 25 mbytes;
quota bridge myIpfilter http-quota over 25 mbytes
quota arp myIpfilter http-quota over 25 mbytes

create quota filter http-quota { over 25 mbytes };
create quota filter http-quota over 25 mbytes
create quota filter ssh-quota { 10 kbytes }
create quota ip myIpfilter http-quota over 25 mbytes
create quota ip6 myIpfilter http-quota until 525 kbytes
create quota inet myIpfilter http-quota over 25 mbytes
create quota netdev myIpfilter http-quota over 25 mbytes;
create quota bridge myIpfilter http-quota over 25 mbytes
create quota arp myIpfilter http-quota over 25 mbytes

delete quota table_name handle 15
delete quota table_name quota_name 
delete quota ip table_name handle 15
delete quota ip table_name index 15
delete quota ip table_name quota_name
delete quota ip6 table_name handle 15
delete quota ip6 table_name quota_name
delete quota inet table_name quota_name
delete quota inet myInetFilter handle 123
delete quota inet myInetFilter index 345
delete quota inet myInetFilter position 234
delete quota netdev table_name handle 15
delete quota netdev table_name quota_name
delete quota bridge table_name handle 15
delete quota bridge table_name quota_name
delete quota arp table_name handle 15
delete quota arp table_name quota_name

list quota myInetTable myInetChain
list quota myTable quota_name
list quota ip myIpTable myIpChain
list quota ip myTable quota_name
list quota ip6 myIp6Table myIp6Chain
list quota ip6 myTable quota_name
list quota inet myInetTable myInetChain
list quota inet myTable quota_name
list quota netdev myNetdevTable myNetdevChain
list quota netdev myTable quota_name
list quota bridge myBridgeTable myBridgeChain
list quota bridge myTable quota_name
list quota arp myArpTable myArpChain
list quota arp myTable quota_name


list quotas 


list quotas ip
list quotas ip6
list quotas inet
list quotas netdev
list quotas bridge
list quotas arp
list quotas table myIpTable
list quotas table ip myIpTable
list quotas table ip6 myIp6Table
list quotas table inet myInetTable
list quotas table netdev table_name
list quotas table bridge myBridgeTable
list quotas table arp myArpTable

reset quota myIpTable myIpFilter
reset quota myIpTable myFilter ;
reset quota ip tablename chainname
reset quota ip6 tablename chainname
reset quota inet tablename chainname
reset quota netdev tablename chainname
reset quota bridge tablename chainname
reset quota arp tablename chainname

reset quotas 
reset quotas MyIpTable 


reset quotas ip MyIpTable 
reset quotas ip6 MyIpTable 
reset quotas inet MyIpTable 
reset quotas netdev MyIpTable 
reset quotas bridge MyIpTable
reset quotas arp MyIpTable 
reset quotas table myIpFilter
reset quotas table ip myIpFilter
reset quotas table ip6 MyIpTable 
reset quotas table inet MyIpTable 
reset quotas table netdev myIpFilter
reset quotas table bridge MyIpTable 
reset quotas table arp myIpFilter

# quota expressions
# base_cmd add_cmd 'table' table_spec table_block 'quota' quota_block
table T {
    quota last { }
    quota Q {
        # comment_spec
        comment "my comments"
        # quota_config
        15 mbytes
        15 mbytes used 30 gbytes
        over 25 pbytes
        over 25 pbytes used 2500000 pbytes
        until 30 kbytes
        until 30 kbytes used 130 Mbytes
        # common_block
        include "/directory/subdirectory/filename.filetype"
        define A = 1
        redefine A = 2
        undefine A
    }
}
table T { quota Q { } }
table ip T { quota Q { } }
table ip6 T { quota Q { } }
table inet T { quota Q { } }
table netdev T { quota Q { } }
table bridge T { quota Q { } }
table arp T { quota Q { } }
table T { quota Q { 15 bytes } }
table T { quota Q { 15 bytes used 15 bytes } }
table T { quota Q { over 15 bytes used 15 bytes } }
table T { quota Q { until 15 bytes } }
table T { quota Q { until 15 bytes used 15 bytes } }


#!/usr/sbin/nft -f
# File: rename.nft
# Description: A test NFT file to exercise 'rename' Vim syntax highlightings.
#
# base_cmd add_cmd 'rename'
# nft_line/nft_base_cmd/nft_base_cmd_rename
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# 'rename chain' <chain_spec>
rename chain myTable myChain identifier 
rename chain ip myTable myChain identifier 
rename chain ip6 myTable myChain identifier 
rename chain inet myTable myChain identifier 
rename chain netdev myTable myChain identifier 
rename chain bridge myTable myChain identifier 
rename chain arp myTable myChain identifier 


#!/usr/sbin/nft -f
# File: replace.nft
# Description: A test NFT file to exercise 'replace' Vim syntax highlightings.
#
# base_cmd 'replace'
# nft_line/nft_base_cmd/nft_base_cmd_replace
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# base_cmd 'replace'

# ruleid_spec table_spec handle_id
replace rule table_id chain_id handle 777
replace rule ip table_id chain_id handle 321
replace rule ip6 table_id chain_id handle 4
replace rule inet table_id chain_id handle 1
replace rule netdev table_id chain_id handle 7654321
replace rule bridge table_id chain_id handle 10
replace rule arp table_id chain_id handle 777

replace rule table_id chain_id handle 777 ;
replace rule ip table_id chain_id handle 321;
replace rule ip6 table_id chain_id handle 4     ;
replace rule inet table_id chain_id handle 1     ;
replace rule netdev table_id chain_id handle 7654321     ;
replace rule bridge table_id chain_id handle 10     ;
replace rule arp table_id chain_id handle 777     ;

# ruleid_spec table_spec position_id
replace rule ip table_id chain_id position 321 


# ruleid_spec table_spec index_id
replace rule ip table_id chain_id index 321  ;

# ruleid_spec stmt

# ruleid_spec payload_stmt icmp_hdr_expr
replace rule ip table_id chain_id icmp type;
replace rule ip table_id chain_id icmp code;
replace rule ip table_id chain_id icmp checksum;
replace rule ip table_id chain_id icmp id;
replace rule ip table_id chain_id icmp seq;
replace rule ip table_id chain_id icmp gateway;
replace rule ip table_id chain_id icmp mtu;

# ruleid_spec payload_stmt ip_hdr_expr
replace rule ip table_id chain_id ip version
replace rule ip table_id chain_id ip hdrlength
replace rule ip table_id chain_id ip dscp
replace rule ip table_id chain_id ip ecn
replace rule ip table_id chain_id ip length
replace rule ip table_id chain_id ip id
replace rule ip table_id chain_id ip fra_off
replace rule ip table_id chain_id ip ttl
replace rule ip table_id chain_id ip protocol
replace rule ip table_id chain_id ip checksum
replace rule ip table_id chain_id ip saddr
replace rule ip table_id chain_id ip daddr
replace rule ip table_id chain_id ip option ra;
replace rule ip table_id chain_id ip option ra type;
replace rule ip table_id chain_id ip option ra length;
replace rule ip table_id chain_id ip option ra value
replace rule ip table_id chain_id ip option ra ptr
replace rule ip table_id chain_id ip option ra addr
replace rule ip table_id chain_id ip option ssrr;
replace rule ip table_id chain_id ip option lsrr;
replace rule ip table_id chain_id ip option rr;

# ruleid_spec payload_stmt arp_hdr_expr
replace rule ip table_id chain_id arp htype
replace rule ip table_id chain_id arp ptype
replace rule ip table_id chain_id arp hlen
replace rule ip table_id chain_id arp plen
replace rule ip table_id chain_id arp operation
replace rule ip table_id chain_id arp saddr ether
replace rule ip table_id chain_id arp saddr ip
replace rule ip table_id chain_id arp daddr ether
replace rule ip table_id chain_id arp daddr ip

# ruleid_spec payload_stmt vlan_hdr_expr
replace rule ip table_id chain_id vlan id
replace rule ip table_id chain_id vlan cfi
replace rule ip table_id chain_id vlan dei
replace rule ip table_id chain_id vlan pcp
replace rule ip table_id chain_id vlan type

# ruleid_spec payload_stmt eth_hdr_expr
replace rule ip table_id chain_id ether saddr
replace rule ip table_id chain_id ether daddr
replace rule ip table_id chain_id ether type

# ruleid_spec payload_stmt payload_hdr_expr
replace rule ip table_id chain_id at ll, 3, 7
replace rule ip table_id chain_id at nh, 1, 2
replace rule ip table_id chain_id at th, 1, 2
replace rule ip table_id chain_id at string, 1, 2

# ruleid_spec payload_stmt igmp_hdr_expr
replace rule ip table_id chain_id igmp type
replace rule ip table_id chain_id igmp checksum
replace rule ip table_id chain_id igmp mrt
replace rule ip table_id chain_id igmp group


# ruleid_spec payload_stmt ip6_hdr_expr
replace rule ip table_id chain_id ip6 version
replace rule ip table_id chain_id ip6 dscp
replace rule ip table_id chain_id ip6 ecn
replace rule ip table_id chain_id ip6 flowlabel
replace rule ip table_id chain_id ip6 length
replace rule ip table_id chain_id ip6 nexthdr
replace rule ip table_id chain_id ip6 hoplimit
replace rule ip table_id chain_id ip6 saddr
replace rule ip table_id chain_id ip6 daddr

# ruleid_spec payload_stmt icmp6_hdr_expr
replace rule ip table_id chain_id icmpv6 type
replace rule ip table_id chain_id icmpv6 code
replace rule ip table_id chain_id icmpv6 checksum
replace rule ip table_id chain_id icmpv6 param-problem
replace rule ip table_id chain_id icmpv6 mtu
replace rule ip table_id chain_id icmpv6 id
replace rule ip table_id chain_id icmpv6 seq
replace rule ip table_id chain_id icmpv6 max-delay
replace rule ip table_id chain_id icmpv6 taddr
replace rule ip table_id chain_id icmpv6 daddr

# ruleid_spec payload_stmt auth_hdr_expr
replace rule ip table_id chain_id auth nexthdr 
replace rule ip table_id chain_id auth hdrlength 
replace rule ip table_id chain_id auth reserved 
replace rule ip table_id chain_id auth spi 
replace rule ip table_id chain_id auth seq 

# ruleid_spec payload_stmt esp_hdr_expr
replace rule ip table_id chain_id esp seq 

# ruleid_spec payload_stmt comp_hdr_expr
replace rule ip table_id chain_id comp nexthdr
replace rule ip table_id chain_id comp flags
replace rule ip table_id chain_id comp cpi

# ruleid_spec payload_stmt udp_hdr_expr
replace rule ip table_id chain_id udp sport
replace rule ip table_id chain_id udp dport
replace rule ip table_id chain_id udp length
replace rule ip table_id chain_id udp checksum

# ruleid_spec payload_stmt udplite_hdr_expr
replace rule ip table_id chain_id udplite sport
replace rule ip table_id chain_id udplite dport
replace rule ip table_id chain_id udplite csumcov
replace rule ip table_id chain_id udplite checksum


# ruleid_spec payload_stmt tcp_hdr_expr
replace rule ip table_id chain_id tcp
replace rule ip table_id chain_id tcp option sack
replace rule ip table_id chain_id tcp option sack left
replace rule ip table_id chain_id tcp option sack right
replace rule ip table_id chain_id tcp option sack0
replace rule ip table_id chain_id tcp option sack1
replace rule ip table_id chain_id tcp option sack2
replace rule ip table_id chain_id tcp option sack3
replace rule ip table_id chain_id tcp option echo
replace rule ip table_id chain_id tcp option eol
replace rule ip table_id chain_id tcp option fastopen
replace rule ip table_id chain_id tcp option md5sig
replace rule ip table_id chain_id tcp option mptcp
replace rule ip table_id chain_id tcp option mss
replace rule ip table_id chain_id tcp option nop
replace rule ip table_id chain_id tcp option sack-permitted
replace rule ip table_id chain_id tcp option timestamp
replace rule ip table_id chain_id tcp option num
replace rule ip table_id chain_id reset+tcp+option  option num

replace rule ip table_id chain_id gre version
replace rule ip table_id chain_id gre flags
replace rule ip table_id chain_id gre protocol

replace rule ip table_id chain_id gretap ether
replace rule ip table_id chain_id gretap ether saddr
replace rule ip table_id chain_id gretap ether daddr
replace rule ip table_id chain_id gretap ether type
replace rule ip table_id chain_id gretap arp htype
replace rule ip table_id chain_id gretap arp ptype
replace rule ip table_id chain_id gretap arp hlen
replace rule ip table_id chain_id gretap arp plen
replace rule ip table_id chain_id gretap arp operation
replace rule ip table_id chain_id gretap arp saddr ether
replace rule ip table_id chain_id gretap arp saddr ip
replace rule ip table_id chain_id gretap arp daddr ether
replace rule ip table_id chain_id gretap arp daddr ip

replace rule ip table_id chain_id geneve vni
replace rule ip table_id chain_id geneve type
replace rule ip table_id chain_id geneve ether saddr
replace rule ip table_id chain_id geneve ether daddr
replace rule ip table_id chain_id geneve ether type
replace rule ip table_id chain_id geneve arp htype
replace rule ip table_id chain_id geneve arp ptype
replace rule ip table_id chain_id geneve arp hlen
replace rule ip table_id chain_id geneve arp plen
replace rule ip table_id chain_id geneve arp operation
replace rule ip table_id chain_id geneve arp saddr ether
replace rule ip table_id chain_id geneve arp saddr ip
replace rule ip table_id chain_id geneve arp daddr ether
replace rule ip table_id chain_id geneve arp daddr ip

replace rule ip table_id chain_id vxlan vni
replace rule ip table_id chain_id vxlan flags
replace rule ip table_id chain_id vxlan ether saddr
replace rule ip table_id chain_id vxlan ether daddr
replace rule ip table_id chain_id vxlan ether type
replace rule ip table_id chain_id vxlan arp htype
replace rule ip table_id chain_id vxlan arp ptype
replace rule ip table_id chain_id vxlan arp hlen
replace rule ip table_id chain_id vxlan arp plen
replace rule ip table_id chain_id vxlan arp operation
replace rule ip table_id chain_id vxlan arp saddr ether
replace rule ip table_id chain_id vxlan arp saddr ip
replace rule ip table_id chain_id vxlan arp daddr ether
replace rule ip table_id chain_id vxlan arp daddr ip

replace rule ip table_id chain_id dccp sport 
replace rule ip table_id chain_id dccp dport 
replace rule ip table_id chain_id dccp type 
replace rule ip table_id chain_id dccp option 1 

# sctp_hdr_field
replace rule ip table_id chain_id sctp sport
replace rule ip table_id chain_id sctp dport
replace rule ip table_id chain_id sctp vtag
replace rule ip table_id chain_id sctp checksum

# sctp_chunk_data
replace rule ip table_id chain_id sctp chunk data 
replace rule ip table_id chain_id sctp chunk data type
replace rule ip table_id chain_id sctp chunk data flags
replace rule ip table_id chain_id sctp chunk data length
replace rule ip table_id chain_id sctp chunk data tsn
replace rule ip table_id chain_id sctp chunk data stream
replace rule ip table_id chain_id sctp chunk data ssn
replace rule ip table_id chain_id sctp chunk data ppid

# sctp_chunk_init_field
replace rule ip table_id chain_id sctp chunk init init-tag
replace rule ip table_id chain_id sctp chunk init a-rwnd
replace rule ip table_id chain_id sctp chunk init num-outbound-streams
replace rule ip table_id chain_id sctp chunk init num-inbound-streams
replace rule ip table_id chain_id sctp chunk init initial-tsn
replace rule ip table_id chain_id sctp chunk init-ack init-tag
replace rule ip table_id chain_id sctp chunk init-ack a-rwnd
replace rule ip table_id chain_id sctp chunk init-ack num-outbound-streams
replace rule ip table_id chain_id sctp chunk init-ack num-inbound-streams
replace rule ip table_id chain_id sctp chunk init-ack initial-tsn

# sctp_chunk_sack_field
replace rule ip table_id chain_id sctp chunk sack
replace rule ip table_id chain_id sctp chunk sack cum-tsn-ack
replace rule ip table_id chain_id sctp chunk sack a-rwnd
replace rule ip table_id chain_id sctp chunk sack num-gap-ack-blocks
replace rule ip table_id chain_id sctp chunk sack num-dup-tsns
replace rule ip table_id chain_id sctp chunk heartbeat
replace rule ip table_id chain_id sctp chunk heartbeat type
replace rule ip table_id chain_id sctp chunk heartbeat flags
replace rule ip table_id chain_id sctp chunk heartbeat length
replace rule ip table_id chain_id sctp chunk heartbeat-ack 
replace rule ip table_id chain_id sctp chunk heartbeat-ack type
replace rule ip table_id chain_id sctp chunk heartbeat-ack flags
replace rule ip table_id chain_id sctp chunk heartbeat-ack length
replace rule ip table_id chain_id sctp chunk abort
replace rule ip table_id chain_id sctp chunk abort type
replace rule ip table_id chain_id sctp chunk abort flags
replace rule ip table_id chain_id sctp chunk abort length
replace rule ip table_id chain_id sctp chunk shutdown
replace rule ip table_id chain_id sctp chunk shutdown type
replace rule ip table_id chain_id sctp chunk shutdown flags
replace rule ip table_id chain_id sctp chunk shutdown length
replace rule ip table_id chain_id sctp chunk shutdown cum-tsn-ack
replace rule ip table_id chain_id sctp chunk shutdown-ack
replace rule ip table_id chain_id sctp chunk shutdown-ack type
replace rule ip table_id chain_id sctp chunk shutdown-ack flags
replace rule ip table_id chain_id sctp chunk shutdown-ack length
replace rule ip table_id chain_id sctp chunk error
replace rule ip table_id chain_id sctp chunk error type
replace rule ip table_id chain_id sctp chunk error flags
replace rule ip table_id chain_id sctp chunk error length
replace rule ip table_id chain_id sctp chunk cookie-ack
replace rule ip table_id chain_id sctp chunk cookie-ack type
replace rule ip table_id chain_id sctp chunk cookie-ack flags
replace rule ip table_id chain_id sctp chunk cookie-ack length
replace rule ip table_id chain_id sctp chunk cookie-echo
replace rule ip table_id chain_id sctp chunk cookie-echo type
replace rule ip table_id chain_id sctp chunk cookie-echo flags
replace rule ip table_id chain_id sctp chunk cookie-echo length
replace rule ip table_id chain_id sctp chunk ecne 
replace rule ip table_id chain_id sctp chunk ecne lowest-tsn
replace rule ip table_id chain_id sctp chunk cwr
replace rule ip table_id chain_id sctp chunk cwr lowest-tsn
replace rule ip table_id chain_id sctp chunk shutdown-complete
replace rule ip table_id chain_id sctp chunk shutdown-complete type
replace rule ip table_id chain_id sctp chunk shutdown-complete flags
replace rule ip table_id chain_id sctp chunk shutdown-complete length
replace rule ip table_id chain_id sctp chunk asconf-ack
replace rule ip table_id chain_id sctp chunk asconf-ack seqno
replace rule ip table_id chain_id sctp chunk asconf-ack type
replace rule ip table_id chain_id sctp chunk asconf-ack flags
replace rule ip table_id chain_id sctp chunk asconf-ack length
replace rule ip table_id chain_id sctp chunk forward-tsn new-cum-tsn
replace rule ip table_id chain_id sctp chunk asconf 
replace rule ip table_id chain_id sctp chunk asconf seqno
replace rule ip table_id chain_id sctp chunk asconf type
replace rule ip table_id chain_id sctp chunk asconf flags
replace rule ip table_id chain_id sctp chunk asconf length


#!/usr/sbin/nft -f
# File: reset.nft
# Description: A test NFT file to exercise 'reset' Vim syntax highlightings.
#
# base_cmd add_cmd 'reset'
# nft_line/nft_base_cmd/nft_base_cmd_reset
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################


# 'reset counters' <table_spec>
reset counters MyIpTable MyChain
reset counters ip MyIpTable MyChain
reset counters ip6 MyIpTable MyChain
reset counters inet MyIpTable MyChain
reset counters netdev MyIpTable MyChain
reset counters bridge MyIpTable MyChain
reset counters arp MyIpTable MyChain
# 'reset counters table' <table_spec>
reset counters table MyIpTable MyChain
reset counters table ip MyIpTable MyChain
reset counters table ip6 MyIpTable MyChain
reset counters table inet MyIpTable MyChain
reset counters table netdev MyIpTable MyChain
reset counters table bridge MyIpTable MyChain
reset counters table arp MyIpTable MyChain

# 'reset quotas' <ruleset_spec>
reset quotas 
# 'reset counters' <table_spec>
reset quotas MyIpTable MyChain
reset quotas ip MyIpTable MyChain
reset quotas ip6 MyIpTable MyChain
reset quotas inet MyIpTable MyChain
reset quotas netdev MyIpTable MyChain
reset quotas bridge MyIpTable MyChain
reset quotas arp MyIpTable MyChain
# 'reset quotas table' <table_spec>
reset quotas table MyIpTable MyChain
reset quotas table ip MyIpTable MyChain
reset quotas table ip6 MyIpTable MyChain
reset quotas table inet MyIpTable MyChain
reset quotas table netdev MyIpTable MyChain
reset quotas table bridge MyIpTable MyChain
reset quotas table arp MyIpTable MyChain

reset counter tablename chainname
reset counter ip tablename chainname
reset counter ip6 tablename chainname
reset counter inet tablename chainname
reset counter netdev tablename chainname
reset counter bridge tablename chainname
reset counter arp tablename chainname

reset quota tablename chainame
reset quota ip tablename chainname
reset quota ip6 tablename chainname
reset quota inet tablename chainname
reset quota netdev tablename chainname
reset quota bridge tablename chainname
reset quota arp tablename chainname

# 'reset' 'rules' ruleset_spec
reset rules 
reset rules;
reset rules ;
reset rules ; 
reset rules  ;  

reset rules ip 
reset rules ip6 
reset rules inet 
reset rules netdev 
reset rules bridge 
reset rules arp 
reset rules ip;
reset rules ip6 ;
reset rules inet ; 
reset rules netdev; 
reset rules bridge ;
reset rules arp  ;  

reset rules myTable  # unexpected table_identifier
reset rules ip myTabl  # unexpected table_identifier
reset rules ip myTable myChain  # unexpected table_identifier

# 'reset' 'rules' table_spec
reset rules table T
reset rules table T;
reset rules table T ;
reset rules table T; 
reset rules table T ; 
reset rules table a  ;
reset rules table last  

reset rules table myTable last # extraneous 'last' keyword
reset rules table myTable myChain  # extraneous chain_id

# 'reset' 'rules' chain_spec
reset rules chain  
reset rules chain;
reset rules chain ;
reset rules chain ; 
reset rules chain  ; 
reset rules chain myTable myChain
reset rules chain last myChain
reset rules chain myTable last
reset rules chain last last

reset rules chain myTable  # missing chain_identifier
reset rules chain myTable; # missing chain_identifier
reset rules chain myTable;  # missing chain_identifier
reset rules chain myTable ;  # missing chain_identifier

# 'reset' 'rule'
# 'reset' 'rule' ruleid_spec
reset rule ip T C handle 15

# 'reset' 'element' set_spec set_block_expr
# 'reset' 'element' table_spec set_id set_block_expr
# 'reset' 'element' family_spec table_id set_id set_block_expr
# 'reset' 'element' [ ('ip'|'ip6'|'inet'|'netdev'|'bridge'|'arp') ] table_id set_id set_block_expr
# 'reset' 'element' [ ('ip'|'ip6'|'inet'|'netdev'|'bridge'|'arp') ] table_id set_id [ set_expr | variable_expr ]
reset element table_id set_id $variable
reset element table_id set_id { eth0 }  ;  

reset element ip table_id set_id { eth0 }    
reset element ip6 table_id set_id { eth0 }
reset element inet table_id set_id { eth0 }
reset element netdev table_id set_id { eth0 }
reset element bridge table_id set_id { eth0 }
reset element arp table_id set_id { eth0 }

# 'reset' 'set' set_or_id_spec set_block_expr
# 'reset' 'set' ( set_spec | setid_spec ) set_block_expr
# 'reset' 'set' set_spec set_block_expr
# 'reset' 'set' table_spec set_id set_block_expr
# 'reset' 'set' family_spec table_id set_id set_block_expr
# 'reset' 'set' [ ('ip'|'ip6'|'inet'|'netdev'|'bridge'|'arp') ] table_id set_id set_block_expr
# 'reset' 'set' [ ('ip'|'ip6'|'inet'|'netdev'|'bridge'|'arp') ] table_id set_id [ set_expr | variable_expr ]
# 'reset' 'set' setid_spec set_block_expr
# 'reset' 'set' table_spec 'handle' handle_identifier set_block_expr
# 'reset' 'set' table_spec 'handle' handle_identifier '$'identifier
# 'reset' 'set' table_spec 'handle' handle_identifier { string [ ; string ] }
reset set table_id set_id $variable
reset set table_id set_id { eth0 }
reset set ip table_id set_id { eth0 }    
reset set ip6 table_id set_id { eth0 }
reset set inet table_id set_id { eth0 }
reset set netdev table_id set_id { eth0 }
reset set bridge table_id set_id { eth0 }
reset set arp table_id set_id { eth0 }

# 'reset' 'map' set_or_id_spec set_block_expr
# 'reset' 'map' ( set_spec | setid_spec ) set_block_expr
# 'reset' 'map' set_spec set_block_expr
# 'reset' 'map' table_spec set_id set_block_expr
# 'reset' 'map' family_spec table_id set_id set_block_expr
# 'reset' 'map' [ ('ip'|'ip6'|'inet'|'netdev'|'bridge'|'arp') ] table_id set_id set_block_expr
# 'reset' 'map' [ ('ip'|'ip6'|'inet'|'netdev'|'bridge'|'arp') ] table_id set_id [ set_expr | variable_expr ]
# 'reset' 'map' setid_spec set_block_expr
# 'reset' 'map' table_spec 'handle' handle_identifier set_block_expr
reset map table_id set_id $variable
reset map table_id set_id { eth0 }
reset map ip table_id set_id { eth0 }
reset map ip6 table_id set_id { eth0 }
reset map inet table_id set_id { eth0 }
reset map netdev table_id set_id { eth0 }
reset map bridge table_id set_id { eth0 }
reset map arp table_id set_id { eth0 }
reset map table_id set_id handle 123
reset map ip table_id set_id handle 123
reset map ip6 table_id set_id handle 123
reset map inet table_id set_id handle 123
reset map netdev table_id set_id handle 123
reset map bridge table_id set_id handle 123
reset map arp table_id set_id handle 123


#!/usr/sbin/nft -f
# File: rt.nft
# Description: A test NFT file to exercise '[add] rt' Vim syntax highlightings.
#
# base_cmd add_cmd 'rt'
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_rt
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

add rule T C rt classid 
add rule T C rt nexthop 
add rule T C rt mtu 
add rule T C rt ipsec 


add rule T C rt ip classid 


add rule T C rt ip6 classid 


#!/usr/sbin/nft -f
# File: rule-meta.nft
# Description: A test NFT file to exercise 'rule meta' Vim syntax highlightings.
#
# If it's followed by a set, it's likely meta_stmt.
# If it's followed by a field name and then a comparison (==, <, etc.),
# it's meta_expr.
#
# meta_stmt is followed by a set.
# meta_expr is followed by a comparison.
# meta_expr is followed by a field name.
#
#     meta subkey  Operand Type  Notes / Example
#     iif          integer       Interface index
#     oif          integer       Interface index
#     iifname      string        "eth0"
#     oifname      string        "wlan0"
#     iifgroup     integer       Interface group ID
#     oifgroup     integer       Interface group ID
#     iiftype      integer       Interface type (see Linux if_arp.h)
#     oiftype      integer       Interface type
#     ibrname      string        Ingress bridge name
#     obrname      string        Egress bridge name
#     ibriport     string        Ingress bridge port name
#     obriport     string        Egress bridge port name
#     mark         integer       Packet mark
#     priority     integer       Priority of packet (qdisc)
#     length       integer       Packet length
#     protocol     integer/symbolic    Layer 4 protocol (e.g., tcp)
#     pkttype      symbolic      unicast, broadcast, multicast
#     nfproto      symbolic      ip, ip6, inet, etc.
#     rtclassid    integer       Routing class ID
#     skuid        integer       Socket UID
#     skgid        integer       Socket GID
#     secmark      integer       SELinux security mark
#     nftrace      boolean (0/1)    Packet tracing flag
#     cgroup       integer       CGroup v2 classid
#     ipsec        boolean (0/1)    Whether packet is IPsec encapsulated
#     cpu          integer       CPU ID that handled the packet
#     time         integer       Seconds since epoch
#     day          symbolic      monday, tuesday, ..., sunday
#     hour         integer (0–23)    Hour of day
#
# 'meta' keyword is almost always followed by a value (except for 'random', 'nftrace', 'ipsec')
#
# There are a few meta keys that do not require a value and behave like flags:
#    Meta key    Notes
#    random      Used as a condition; no operand
#    nftrace     Used as a condition; defaults to "set"
#    ipsec       Acts like a boolean flag in conditionals
#
# But in some contexts (like expressions), they may still support an explicit value:
#
# meta nftrace == 1
# meta ipsec == 0
#
# So:
#
#     In statements, meta nftrace can appear without a value.
#
#     In expressions, it usually appears with == 0/1 or similar.
#
#     Form               Requires Operand?    Example
#     meta iifname       ✅ Yes               meta iifname "eth0"
#     meta rtclassid     ✅ Yes               meta rtclassid 10
#     meta random        ❌ No                meta random
#     meta nftrace       ❌ No (usually)      meta nftrace
#     meta nftrace == 1  ✅ Yes (expr)        meta nftrace == 1
#     meta ipsec         ❌/✅ Depends        meta ipsec or meta ipsec 0
#
# Key Diagnostic: Try putting meta xyz in a log or set
#
#    If it makes sense to assign or print it, it’s being used as a meta_expr.
#
#    If it makes sense to use as a match, it’s a meta_stmt.
#
#⚠️ Gotchas
#
#    You cannot write meta random as a meta_expr. It’s only valid as a statement.
#
#    Some meta keys like secmark, nftrace, random are statement-only, not expressions.
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# meta_stmt
#
# meta_stmt - flags only (support expression only in meta_expr)
rule T C meta random;  # qualified META (requires 'meta' before it)
rule T C ipsec;  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec;  # 'meta ipsec 0' only in meta_expr
rule T C nftrace;  # 'meta nftrace == 1' only in meta_expr
rule T C meta nftrace;  # 'meta nftrace == 1' only in meta_expr

# meta_stmt - INTERNALS; found in scanner.c (not in parser_bison.y)
# 'meta nfproto' is integer or string (as listed in /etc/protocol)
rule inet T C meta nfproto 1;
rule inet T C meta nfproto 1;
rule inet T C meta nfproto inet;
rule inet T C meta nfproto 2;
rule inet T C meta nfproto ip;
rule inet T C meta nfproto 3;
rule inet T C meta nfproto arp;
rule inet T C meta nfproto 7;
rule inet T C meta nfproto bridge;
rule inet T C meta nfproto 10;
rule inet T C meta nfproto ip6;
rule inet T C meta nfproto 12;
rule inet T C meta nfproto netdev;
# 'meta l4proto' is integer or string (as listed in Linux kernel include/uapi/linux/netfilter.h)
rule inet T C meta l4proto 1;
rule inet T C meta l4proto icmp;
rule inet T C meta l4proto 6;
rule inet T C meta l4proto tcp;
rule inet T C meta l4proto 17;
rule inet T C meta l4proto udp;

# meta_stmt - unqualified META, with a value (no 'meta' needed)
rule T C mark 64;  # length
rule T C iif 2;
rule T C iifname "eth0";  # L3 layer, by interface name
rule T C iiftype 1;
rule T C oif 4;
rule T C oifname "wlan0";  # L3 layer, by interface name
rule T C oiftype 1;
rule T C skgid 14;
rule T C skuid 14;
rule T C rtclassid 14;
rule T C ibriport "br0";  # L2 layer, by interface name
rule T C obriport "br1";  # L2 layer, by interface name
rule T C ibrname "under-bridge";
rule T C obrname "over-bridge";
rule T C pkttype broadcast;
rule T C cpu 1;
rule T C iifgroup 0;
rule T C oifgroup 0;
rule T C cgroup 1048577;
rule T C time 12;
rule T C day sunday;
rule T C hour 0;
rule T C hour 00;
rule T C hour 9;
rule T C hour 09;
rule T C hour 10;
rule T C hour 19;
rule T C hour 20;
rule T C hour 23;

# meta_stmt - unqualified META, with a value (optional 'meta' used here)
rule t c meta mark;
rule t c meta mark 0x01;
rule t c meta mark 1234;
rule T C meta mark 64;  # length
rule T C meta mark 0x4;
rule T C meta mark 0x1234;
rule T C meta mark 0x00000032;
rule T C meta iif 2;
rule T C meta iifname "eth0";
# iiftype/oiftype are listed in Linux kernel linux/if_arp.h file.
rule T C meta iiftype 1;
rule T C meta oif 4;
rule T C meta oifname "wlan0";
rule T C meta oiftype 1;
rule T C meta skgid 14;
rule T C meta skuid 14;
# 'meta nftace' requires no argument, but still 'unqualified' (no 'meta' needed).
# 'meta rtclassid' is used with 'realm' keyword, mnemonics are in /etc/iproute2/rt_realms
rule T C meta rtclassid 14;
rule T C meta ibriport "br0";
rule T C meta obriport "br1";
rule T C meta ibrname "under-bridge";
rule T C meta ibrname "br0";
rule T C meta obrname "under-bridge";
rule T C meta pkttype broadcast;
rule T C meta pkttype unicast;
rule T C meta pkttype multicast;
rule T C meta pkttype loopback;
rule T C meta pkttype otherhost;
rule T C meta pkttype outgoing;
rule T C meta cpu 1;
rule T C meta iifgroup 0;
rule T C meta oifgroup 0;
rule T C meta cgroup 1048577;
rule T C meta cgroup 0x1;
rule T C meta cgroup 0x01;
rule T C meta cgroup 0x0123;
rule T C meta cgroup 0x01234567;
rule T C meta time 12;
rule T C meta day Monday;
rule T C meta day saturday;
rule T C meta hour 23;
rule T C meta hour 15;

# meta_stmt - qualified META, with a value (requires 'meta' before it)
rule T C meta length 1512;

rule T C meta protocol loopback;
rule T C meta protocol ip;
rule T C meta protocol ip6;
rule T C meta protocol arp;
rule T C meta protocol mpls_uc;
rule T C meta protocol mpls_mc;
rule T C meta protocol 802.1q;
rule T C meta protocol 802_1q;
rule T C meta protocol pppoe;
rule T C meta protocol lldp;
rule T C meta protocol qinq;
rule T C meta protocol arp;

rule T C meta priority none;

rule T C meta secmark set 14;
rule T C meta secmark set 42;


#!/usr/sbin/nft -f
# File: rule-position
# Description: Test NFT file to exercise wildcard Vim syntax highlightings.
#
# This covers all possible first-order lexical patterns encountered from
# the 'rule_position' semantic action label ('parser_bison.y')
#
# base_cmd add_cmd ['rule'] rule_position
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_c_add_cmd_rule
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

identifier_table chain_identifier rtclassid 15;

ip table_identifier chain_identifier rtclassid 1;
rule table_identifier chain_identifier rtclassid cosmos ;
rule ip6 table_identifier chain_identifier rtclassid internet; 
add rule table_identifier chain_identifier rtclassid freenet ; 
add rule bridge table_identifier chain_identifier rtclassid radio-msu ;
add table_identifier chain_identifier rtclassid 65536 ;
add arp table_identifier chain_identifier rtclassid 1234567890 ;

identifier_table chain_identifier position 15 ;
identifier_table chain_identifier position 15  ;
identifier_table chain_identifier position 15  ;

identifier_table chain_identifier handle 7 ;
identifier_table chain_identifier handle 7  ;

identifier_table chain_identifier index 1 ;
identifier_table chain_identifier index 1  ;

rule identifier_table chain_identifier position 15 ;
rule identifier_table chain_identifier position 15  ;

rule identifier_table chain_identifier handle 7 ;
rule identifier_table chain_identifier handle 7  ;

rule identifier_table chain_identifier index 1 ;
rule identifier_table chain_identifier index 1  ;

add rule identifier_table chain_identifier position 15 ;
add rule identifier_table chain_identifier position 15  ;

add rule identifier_table chain_identifier handle 7 ;
add rule identifier_table chain_identifier handle 7  ;

add rule identifier_table chain_identifier index 1 ;
add rule identifier_table chain_identifier index 1  ;

add identifier_table chain_identifier position 15 ;
add identifier_table chain_identifier position 15  ;

add identifier_table chain_identifier handle 7 ;
add identifier_table chain_identifier handle 7  ;

add identifier_table chain_identifier index 1 ;
add identifier_table chain_identifier index 1  ;

ip identifier_table chain_identifier position 15 ;
ip6 identifier_table chain_identifier position 15  ;
inet identifier_table chain_identifier position 15  ;
bridge identifier_table chain_identifier position 15  ;
netdev identifier_table chain_identifier position 15  ;
arp identifier_table chain_identifier position 15  ;

ip identifier_table chain_identifier handle 7 ;
ip6 identifier_table chain_identifier handle 7  ;
inet identifier_table chain_identifier handle 7  ;
bridge identifier_table chain_identifier handle 7  ;
netdev identifier_table chain_identifier handle 7  ;
arp identifier_table chain_identifier handle 7  ;

ip identifier_table chain_identifier index 1 ;
ip6 identifier_table chain_identifier index 1  ;
inet identifier_table chain_identifier index 1  ;
bridge identifier_table chain_identifier index 1  ;
netdev identifier_table chain_identifier index 1  ;
arp identifier_table chain_identifier index 1  ;

rule ip identifier_table chain_identifier position 15 ;
rule ip6 identifier_table chain_identifier position 15 ;
rule inet identifier_table chain_identifier position 15  ;
rule bridge identifier_table chain_identifier position 15  ;
rule netdev identifier_table chain_identifier position 15  ;
rule arp identifier_table chain_identifier position 15  ;

rule ip identifier_table chain_identifier handle 7 ;
rule ip6 identifier_table chain_identifier handle 7  ;
rule inet identifier_table chain_identifier handle 7  ;
rule bridge identifier_table chain_identifier handle 7  ;
rule netdev identifier_table chain_identifier handle 7  ;
rule arp identifier_table chain_identifier handle 7  ;

rule ip identifier_table chain_identifier index 1 ;
rule ip6 identifier_table chain_identifier index 1  ;
rule inet identifier_table chain_identifier index 1  ;
rule bridge identifier_table chain_identifier index 1  ;
rule netdev identifier_table chain_identifier index 1  ;
rule arp identifier_table chain_identifier index 1  ;

add rule ip identifier_table chain_identifier position 15 ;
add rule ip6 identifier_table chain_identifier position 15  ;
add rule inet identifier_table chain_identifier position 15  ;
add rule bridge identifier_table chain_identifier position 15  ;
add rule netdev identifier_table chain_identifier position 15  ;
add rule arp identifier_table chain_identifier position 15  ;

add rule ip identifier_table chain_identifier handle 7 ;
add rule ip6 identifier_table chain_identifier handle 7  ;
add rule inet identifier_table chain_identifier handle 7  ;
add rule bridge identifier_table chain_identifier handle 7  ;
add rule netdev identifier_table chain_identifier handle 7  ;
add rule arp identifier_table chain_identifier handle 7  ;

add rule ip identifier_table chain_identifier index 1 ;
add rule ip6 identifier_table chain_identifier index 1  ;
add rule inet identifier_table chain_identifier index 1  ;
add rule bridge identifier_table chain_identifier index 1  ;
add rule netdev identifier_table chain_identifier index 1  ;
add rule arp identifier_table chain_identifier index 1  ;

add ip identifier_table chain_identifier position 15 ;
add ip6 identifier_table chain_identifier position 15 ;
add inet identifier_table chain_identifier position 15  ;
add bridge identifier_table chain_identifier position 15  ;
add netdev identifier_table chain_identifier position 15  ;
add arp identifier_table chain_identifier position 15  ;

add ip identifier_table chain_identifier handle 7 ;
add ip6 identifier_table chain_identifier handle 7  ;
add inet identifier_table chain_identifier handle 7  ;
add bridge identifier_table chain_identifier handle 7  ;
add netdev identifier_table chain_identifier handle 7  ;
add arp identifier_table chain_identifier handle 7  ;

add ip identifier_table chain_identifier index 1 ;
add ip6 identifier_table chain_identifier index 1  ;
add inet identifier_table chain_identifier index 1  ;
add bridge identifier_table chain_identifier index 1  ;
add netdev identifier_table chain_identifier index 1  ;
add arp identifier_table chain_identifier index 1  ;

# verdict_stmt
rule T C accept ;
rule T C drop ;
rule T C continue ;
rule T C jump chain_id ;
rule T C goto chain_id ;
rule T C return ;
rule T C jump last ;
rule T C goto last ;
rule T C jump $MY_CHAIN ;
rule T C goto $MY_CHAIN ;

# match_stmt

# meter_stmt
rule T C meter meter_id size 149 { stmt }; rule T C meter meter_id size 149 { stmt };
rule T C meter meter_id { stmt };

# payload_stmt

# stateful_stmt
rule T C counter ;
rule T C counter ;
rule T C counter packets 1234;
rule T C counter bytes 1234;
rule T C counter packets 1234 bytes 1234;
rule T C counter bytes 1234 packets 1234;
rule T C limit rate 1/sec ;
rule T C limit rate 1bytes/sec  ;
rule T C limit rate 1/sec burst 1 packets ;
rule T C limit rate 1bytes/sec burst 1mbytes/sec ;
rule T C quota  ;
rule T C quota over 150 bytes used 100 bytes ;
rule T C quota until 300 mbytes used 600 bytes ;
rule T C ct 123 300  ;
rule T C ct over 123 300  ;
rule T C last ;
rule T C last used never ;
rule T C last used 1h15m ;


# meta_stmt
rule T C meta iifname "eth0";
rule T C meta mark 0x1234 ;
rule T C meta protocol ip;
rule T C meta random;
rule T C meta cpu 3 ;
rule T C meta secmark disable ;
rule T C meta nftrace 1 ;
rule T C meta nftrace set 0;
rule T C meta nftrace set { 0 } ;
rule T C meta nftrace == 1 ;
rule T C meta oifname "wlan0" ;
rule T C meta oiftype 1 ;
rule T C meta ibrname "br0" ;
rule T C meta day saturday ;
rule T C meta hour 15 ;

rule T C meta length ;
rule T C meta protocol ;
rule T C meta protocol ;
rule T C meta priority ;
rule T C meta random ;
rule T C meta secmark ;
rule T C meta oif ;
rule T C meta mark ;
rule T C meta iif ;
rule T C meta iifname ;
rule T C meta iiftype ;
rule T C meta oif ;
rule T C meta oifname ;
rule T C meta oiftype ;
rule T C meta skuid ;
rule T C meta skgid ;
rule T C meta nftrace ;
rule T C meta rtclassid ;
rule T C meta ibriport ;
rule T C meta obriport ;
rule T C meta ibrname ;
rule T C meta obrname ;
rule T C meta pkttype ;
rule T C meta cpu ;
rule T C meta iifgroup ;
rule T C meta oifgroup ;
rule T C meta cgroup ;
rule T C meta ipsec ;
rule T C meta time ;
rule T C meta day ;
rule T C meta hour ;
rule T C mark ;
rule T C iif ;
rule T C iifname ;
rule T C iiftype ;
rule T C oif ;
rule T C oifname ;
rule T C oiftype ;
rule T C skuid ;
rule T C skgid ;
rule T C nftrace ;
rule T C rtclassid ;
rule T C ibriport ;
rule T C obriport ;
rule T C ibrname ;
rule T C obrname ;
rule T C pkttype ;
rule T C cpu ;
rule T C iifgroup ;
rule T C oifgroup ;
rule T C cgroup ;
rule T C ipsec ;
rule T C time ;
rule T C day ;
rule T C hour ;
rule T C notrack ;
rule T C flow ;
rule T C rtclassid accept;
rule T C rtclassid drop ;
rule T C rtclassid continue ;
rule T C rtclassid goto chain_id ;
rule T C rtclassid jump chain_id ;
rule T C rtclassid return ;
rule T C rtclassid snat ;
rule T C rtclassid accept drop continue goto chain_id jump chain_id snat ;
rule T C rtclassid redirect ;
rule T C rtclassid redirect to :  ;
rule T C rtclassid redirect random ;
rule T C rtclassid redirect fully-random ;
rule T C rtclassid redirect persistent ;
rule T C rtclassid redirect persistent,random ;
rule T C rtclassid redirect persistent, random ;
rule T C rtclassid redirect persistent ,random ;
rule T C rtclassid redirect persistent , random ;
rule T C rtclassid redirect persistent , random, fully-random redirect ;
rule T C notrack ;
rule T C flow offload at string_me ;
rule T C flow add at string_me ;


# log_stmt

# reject_stmt

# nat_stmt

# masq_stmt
rule T C masquerade to : stmt_expr;
rule T C masquerade random ;
rule T C masquerade fully-random ;
rule T C masquerade persistent ;
rule T C masquerade random,fully-random,persistent ;
rule T C masquerade accept;

# redir_stmt
rule T C redirect to stmt_expr;
rule T C redirect to : stmt_expr;
rule T C redirect random ;
rule T C redirect fully-random ;
rule T C redirect persistent ;
rule T C redirect random,fully-random,persistent ;
rule T C redirect accept;

# tproxy_stmt

# queue_stmt

# ct_stmt

# dup_stmt

# fwd_stmt

# set_stmt

# map_stmt

# synproxy_stmt

# chain_stmt

# optstrip_stmt

# xt_stmt

# objref_stmt

identifier_table chain_identifier drop ;
identifier_table chain_identifier accept ;
identifier_table chain_identifier continue ;

identifier_table chain_identifier return ;

table_id chain_id log prefix asdf ;


tableid chainid log  ;
tableId chainId log prefix mynote  ;
tableId chainId log group 15 ;
tableId chainId log snaplen 512 ;
tableId chainId log queue-threshold 5 ;
tableId chainId log level log_string ;
tableId chainId log flags tcp seq ;
tableId chainId log flags tcp seq,options ;
tableId chainId log flags tcp options,seq ;
tableId chainId log flags tcp options ;
tableId chainId log flags ip options ;
tableId chainId log flags skuid ;
tableId chainId log flags ether  ;
tableId chainId log flags all ;


#!/usr/sbin/nft -f
# File: rule-stmt-ipsec.nft
# Description: A test NFT file to exercise 'add rule <table> <chain> ipsec' Vim syntax highlightings.
#
#    ipsec {in | out} [ spnum NUM ] {reqid | spi}
#    ipsec {in | out} [ spnum NUM ] {ip | ip6} {saddr | daddr}#
#
# whereas,
#
#    * in: Matches inbound IPsec packets (already decrypted).
#    * out: Matches outbound IPsec packets (to be encrypted).
#    * spnum: Optional, specifies the Security Association (SA)
#          in a chain (defaults to 0).
#    * reqid: Matches the request ID of the IPsec SA.
#    * spi: Matches the Security Parameter Index of the SA.
#    * saddr | daddr: Matches the source or destination IP address
#          of the SA (for tunnel mode, these are the outer IP addresses).
#
# Example Usages:
#
#
# Syntax Pathway:
#   add_cmd 'add' 'rule' rule_alloc stmt
#   add_cmd 'rule' rule_alloc stmt
#   add_cmd 'table' table_block 'chain' chain_block rule rule_alloc stmt expr_stmt 'ipsec'
#   add_cmd 'table' table_block 'chain' chain_block rule rule_alloc stmt 'meta' meta_stmt meta_key_unqualified 'ipsec'
#
# Semantic Actions to 'stmt' (reverse parser_bison.y):
#
#   ipsec/meta_key_unqualified/meta_stmt   
#   ipsec/xfrm_expr/primary_expr/basic_expr/concat_expr/verdict_map_stmt/verdict_stmt
#   ipsec/xfrm_expr/primary_expr/basic_expr/concat_expr/expr/relational_expr/match_stmt
#   ipsec/xfrm_expr/primary_expr/basic_expr/concat_expr/map_expr/expr/relational_expr/match_stmt
#   ipsec/meta_key_unqualified/meta_expr/primary_expr/basic_expr/concat_expr/verdict_map_stmt/verdict_stmt
#   ipsec/meta_key_unqualified/meta_expr/primary_expr/basic_expr/concat_expr/expr/relational_expr/match_stmt   
#   ipsec/meta_key_unqualified/meta_expr/primary_expr/basic_expr/concat_expr/map_expr/expr/relational_expr/match_stmt
#
add table TEST
add chain inet TEST chainy
undefine ipset_table
add set inet TEST ipset_table {
        type ipv4_addr
        flags interval
        elements = { 192.168.1.0/24, 10.0.0.1 }
}
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

add rule inet TEST chainy ipsec in reqid 10 accept;
add rule inet TEST chainy ipsec in reqid == 10 accept;
add rule inet TEST chainy ipsec in reqid != 10 accept;
add rule inet TEST chainy ipsec in reqid < 10 accept;
add rule inet TEST chainy ipsec in reqid <= 10 accept;
add rule inet TEST chainy ipsec in reqid > 10 accept;
add rule inet TEST chainy ipsec in reqid >= 10 accept;
add rule inet TEST chainy ipsec out spi 0x1234 counter;
add rule inet TEST chainy ipsec out spi == 0x1234 counter;
add rule inet TEST chainy ipsec in ip saddr 192.168.1.1 accept;
add rule inet TEST chainy meta ipsec exists accept;
add rule inet TEST chainy meta ipsec exists ip saddr 192.168.1.0/24 accept;
add rule inet TEST chainy meta ipsec missing drop;
add rule inet TEST chainy ipsec out reqid 10 ip daddr @ipset_table accept;
add rule inet TEST chainy ip saddr 192.168.1.0/24 ipsec in reqid != 10 tcp dport 80 accept;

define myreqid = 10
add rule inet TEST chainy ipsec in reqid $myreqid accept;

rule inet TEST chainy ipsec in reqid 10 accept;
rule inet TEST chainy ipsec out spi 0x1234 counter;
rule inet TEST chainy ipsec in ip saddr 192.168.1.1 accept;
rule inet TEST chainy meta ipsec exists accept;
rule inet TEST chainy meta ipsec exists ip saddr 192.168.1.0/24 accept;
rule inet TEST chainy meta ipsec missing drop;
rule inet TEST chainy ipsec out reqid 10 ip daddr @ipset_table accept;

redefine myreqid = 10
rule inet TEST chainy ipsec in reqid $myreqid accept;

add table inet TEST {
    chain chainy {
        ipsec in reqid 10 accept;
        ipsec out spi 0x1234 counter;
        ipsec in ip saddr 192.168.1.1 accept;
        meta ipsec exists accept;
        meta ipsec exists ip saddr 192.168.1.0/24 accept;
        meta ipsec missing drop;
        ipsec out reqid 10 ip daddr @ipset_table accept;
    }
}
table inet TEST {
    chain chainy {
        ipsec in reqid 10 accept;
        ipsec out spi 0x1234 counter;
        ipsec in ip saddr 192.168.1.1 accept;
        meta ipsec exists accept;
        meta ipsec exists ip saddr 192.168.1.0/24 accept;
        meta ipsec missing drop;
        ipsec out reqid 10 ip daddr @ipset_table accept;
    }
}


#!/usr/sbin/nft -f
# File: rule
# Description: Test NFT file to exercise '[add] rule' Vim syntax highlightings.
#
# base_cmd add_cmd 'rule'
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_rule
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# base_cmd add_cmd 'add' 'rule'
add rule ip  T      C     position  1
add rule ip6 filter input handle 2
add rule arp T C index 3
add rule inet T C position 4
add rule bridge T C position 55555
add rule netdev T C position 6  # inline comment
add rule netdev Tabcdef Charger position 6 comment "My comment string"

# ct_key_dir_optional->ct_key->ct_stmt
add rule ip6 myTable myChain position 1 ct l3proto set ip6 myIpTable myCTHchain { };
rule ip6 myTable myChain position 1 ct l3proto set ip6 myIpTable myCTHchain { };
ip6 myTable myChain position 1 ct l3proto set ip6 myIpTable myCTHchain { };

add rule ip6 myTable myChain position 1 ct proto set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct mark set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct state set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct direction set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct status set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct expiration set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct helper set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct saddr set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct daddr set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct proto-src set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct proto-dst set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct label set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct event set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct secmark set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct id set ip6 myIpTable myCTHchain { };

# ct_key_dir_optional->ct_key->ct_stmt
add rule ip6 myTable myChain position 1 ct bytes set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct packets set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct avgpkt set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct zone set ip6 myIpTable myCTHchain { };

# ct_key_dir_optional->ct_stmt
add rule ip6 myTable myChain position 1 ct bytes set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct packets set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct avgpkt set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct zone set ip6 myIpTable myCTHchain { };

# ct_dir>ct_stmt
add rule ip6 myTable myChain position 1 ct original bytes set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct original packets set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct original avgpkt set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct original zone set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct reply bytes set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct reply packets set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct reply avgpkt set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct reply zone set ip6 myIpTable myCTHchain { };

add rule filter output ip daddr
add rule filter output position 8 ip daddr 127.0.0.8 drop

add rule table_id chain_id log;

# base_cmd add_cmd 'rule'
rule 

rule T C handle 2
rule ip  T      C     position  1
rule ip6 filter input handle 2
rule arp T C index 3
rule inet T C position 4
rule bridge T C position 55555
rule netdev T C position 6
 rule netdev Tabcdef Charger position 6


rule T C rtclassid continue ;


rule T C continue ;

rule table_id chain_id log;

# verdict_stmt->stmt
tableid chainid vmap 
table_id chain_id vmap
table_id chain_id vmap { }
table_id chain_id vmap at ABC

# match_stmt->stmt
tableid chainid match ;

# meter_stmt->stmt
# ip_hdr_spec->payload_stmt->stmt
tableid chainid ip hdrlength;

# stateful_stmt->stmt
tableid chainid counter bytes 512;
tableid chainid counter packets 3;
tableid chainid limit rate;
tableid chainid quota  ;
tableid chainid ct count 1;
tableid chainid ct count over 15;
tableid chainid last;
add rule tableid chainid last;
tableid chainid last used;
tableid chainid last used never;
tableid chainid last used 1h;

# meta_stmt->stmt

# log_stmt->stmt
tableid chainid log;
tableId chainId log prefix;
tableId chainId log group 15;
tableId chainId log snaplen 512;
tableId chainId log queue-threshold 5;
tableId chainId log level log_string;
tableId chainId log flags tcp seq;
tableId chainId log flags tcp seq,options;
tableId chainId log flags tcp options,seq;
tableId chainId log flags tcp options;
tableId chainId log flags ip options;
tableId chainId log flags skuid;
tableId chainId log flags ether;
tableId chainId log flags all;

# reject_stmt->stmt
tableId chainId reject ;

# nat_stmt->stmt
tableId chainId snat ;
tableId chainId dnat ;

# masq_stmt->stmt
tableId chainId masq ;

# redir_stmt->stmt
tableId chainId redir ;

# tproxy_stmt->stmt
tableId chainId tproxy ;

# queue_stmt->stmt
tableId chainId queue ;

# ct_stmt->stmt
tableId chainId ct over;


# dup_stmt->stmt
tableId chainId dup ;

# fwd_stmt->stmt
tableId chainId fwd ;

# set_stmt->stmt
tableId chainId set ;

# map_stmt->stmt
tableId chainId map ;

# synproxy_stmt->stmt
tableId chainId synproxy over;

# chain_stmt->stmt
tableId chainId chain ;

# optstrip_stmt->stmt
tableId chainId optstrip ;


# xt_stmt->stmt
tableId chainId xt ;

# objref_stmt->stmt
tableId chainId counter name;
tableid chainid limit name;

# https://wiki.nftables.org/wiki-nftables/index.php/Simple_rule_management

insert rule filter output position 8 ip daddr 127.0.0.8 drop
delete rule filter output handle 5
delete rule filter output ip saddr 192.168.1.1 counter  # not implemented yet



tableid chainid sctp 
rule tableid chainid sctp 
add rule tableid chainid sctp 

ip tableid chainid sctp 
rule ip6 tableid chainid sctp 
add rule inet tableid chainid sctp 
replace rule bridge tableid chainid sctp
rule netdev tableid chainid sctp
rule arp tableid chainid sctp


# sctp_chunk_data
replace rule ip table_id chain_id sctp chunk data 
replace rule ip table_id chain_id sctp chunk data type
replace rule ip table_id chain_id sctp chunk data flags
replace rule ip table_id chain_id sctp chunk data length
replace rule ip table_id chain_id sctp chunk data tsn
replace rule ip table_id chain_id sctp chunk data stream
replace rule ip table_id chain_id sctp chunk data ssn
replace rule ip table_id chain_id sctp chunk data ppid

# sctp_chunk_init_field
replace rule ip table_id chain_id sctp chunk init init-tag
replace rule ip table_id chain_id sctp chunk init a-rwnd
replace rule ip table_id chain_id sctp chunk init num-outbound-streams
replace rule ip table_id chain_id sctp chunk init num-inbound-streams
replace rule ip table_id chain_id sctp chunk init initial-tsn
replace rule ip table_id chain_id sctp chunk init-ack init-tag
replace rule ip table_id chain_id sctp chunk init-ack a-rwnd
replace rule ip table_id chain_id sctp chunk init-ack num-outbound-streams
replace rule ip table_id chain_id sctp chunk init-ack num-inbound-streams
replace rule ip table_id chain_id sctp chunk init-ack initial-tsn

# sctp_chunk_sack_field
ip table_id chain_id sctp chunk sack
ip6 table_id chain_id sctp chunk sack cum-tsn-ack
inet table_id chain_id sctp chunk sack a-rwnd
bridge table_id chain_id sctp chunk sack num-gap-ack-blocks
netdev table_id chain_id sctp chunk sack num-dup-tsns
arp table_id chain_id sctp chunk heartbeat
table_id chain_id sctp chunk heartbeat type
table_id chain_id sctp chunk heartbeat flags
table_id chain_id sctp chunk heartbeat length
table_id chain_id sctp chunk heartbeat-ack 
table_id chain_id sctp chunk heartbeat-ack type
table_id chain_id sctp chunk heartbeat-ack flags
table_id chain_id sctp chunk heartbeat-ack length
table_id chain_id sctp chunk abort
table_id chain_id sctp chunk abort type
table_id chain_id sctp chunk abort flags
table_id chain_id sctp chunk abort length
table_id chain_id sctp chunk shutdown
table_id chain_id sctp chunk shutdown type
table_id chain_id sctp chunk shutdown flags
table_id chain_id sctp chunk shutdown length
table_id chain_id sctp chunk shutdown cum-tsn-ack
table_id chain_id sctp chunk shutdown-ack
table_id chain_id sctp chunk shutdown-ack type
table_id chain_id sctp chunk shutdown-ack flags
table_id chain_id sctp chunk shutdown-ack length
table_id chain_id sctp chunk error
table_id chain_id sctp chunk error type
table_id chain_id sctp chunk error flags
table_id chain_id sctp chunk error length
table_id chain_id sctp chunk cookie-ack
table_id chain_id sctp chunk cookie-ack type
table_id chain_id sctp chunk cookie-ack flags
table_id chain_id sctp chunk cookie-ack length
table_id chain_id sctp chunk cookie-echo
table_id chain_id sctp chunk cookie-echo type
table_id chain_id sctp chunk cookie-echo flags
table_id chain_id sctp chunk cookie-echo length
table_id chain_id sctp chunk ecne 
table_id chain_id sctp chunk ecne lowest-tsn
table_id chain_id sctp chunk cwr
table_id chain_id sctp chunk cwr lowest-tsn
table_id chain_id sctp chunk shutdown-complete
table_id chain_id sctp chunk shutdown-complete type
table_id chain_id sctp chunk shutdown-complete flags
table_id chain_id sctp chunk shutdown-complete length
table_id chain_id sctp chunk asconf-ack
table_id chain_id sctp chunk asconf-ack seqno
table_id chain_id sctp chunk asconf-ack type
table_id chain_id sctp chunk asconf-ack flags
table_id chain_id sctp chunk asconf-ack length
table_id chain_id sctp chunk forward-tsn new-cum-tsn
table_id chain_id sctp chunk asconf 
table_id chain_id sctp chunk asconf seqno
table_id chain_id sctp chunk asconf type
table_id chain_id sctp chunk asconf flags
table_id chain_id sctp chunk asconf length


#!/usr/sbin/nft -f
# File: secmark.nft
# Description: A test NFT file to exercise 'secmark' Vim syntax highlightings.
#
# base_cmd 'secmark'
# base_cmd add_cmd 'secmark'
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_keyword_secmark
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################
add secmark T SM { }
add secmark T SM { }
add secmark T SM {;}
add secmark T SM { ; }
add secmark T SM { define my_var = 1; };
add secmark T SM { redefine my_var = 2; };
add secmark T SM { undefine my_var; };
add secmark T SM { typeof b.c.d.e.f : secmark  };
add secmark myTable sshtag { "system_u:object_r:ssh_server_packet_t:s0" }

secmark obj_spec secmark_obj { }
secmark obj_spec secmark_obj { } 
secmark obj_spec secmark_obj {;} 
secmark obj_spec secmark_obj { ; } 
secmark T SM { define my_var = 1; };
secmark T SM { redefine my_var = 2; };
secmark T SM { undefine my_var; };
secmark T SM { typeof b.c.d.e.f : secmark  };
secmark myTable sshtag { "system_u:object_r:ssh_server_packet_t:s0" }


# base_cmd add_cmd 'table' table_spec table_block 'secmark' secmark_block
table T { secmark SM { ; }; };
table T { secmark SM { } }
table ip T { secmark SM { } }
table ip6 T { secmark SM { } }
table inet T { secmark SM { } }
table netdev T { secmark SM { } }
table bridge T { secmark SM { } }
table arp T { secmark SM { } }
table last { secmark SM { } }
table T { secmark SM { "some security settings goes into here" } }
table T {
    secmark SM {
        # common_block
        include "/directory/subdirectory/filename.filetype"
        define A = 1
        redefine A = 2
        undefine A
    }
};

create secmark myTable mySecMark 'asdf \'asdd"asdfdf'
create secmark myTable mySecMark 'asdf \'asddfasdfdf'
create secmark myTable mySecMark 'a:;fasddfa()fdf' ;
create secmark myTable mySecMark "asdf \"dfa[]fdf"
create secmark myTable mySecMark "asdf \"dfa'dfdf"
create secmark ip myTable mySecMark an unconstrained string
create secmark inet myTable mySecMark an unconstrained string ;
create secmark obj_spec secmark_obj secmark_config close_scope_secmark

delete secmark T secmark_name 
delete secmark table_name secmark_name 
delete secmark ip table_name secmark_name
delete secmark ip6 table_name secmark_name
delete secmark inet table_name secmark_name
delete secmark arp table_name secmark_name
delete secmark bridge table_name secmark_name
delete secmark netdev table_name secmark_name
delete secmark T handle 15
delete secmark table_name handle 15
delete secmark ip table_name handle 15
delete secmark ip6 table_name handle 15
delete secmark inet table_name handle 15
delete secmark arp table_name handle 15
delete secmark bridge table_name handle 15
delete secmark netdev table_name handle 15

destroy secmark arp T handle 15
destroy secmark arp T secmark_name
destroy secmark bridge T handle 15
destroy secmark bridge T secmark_name
destroy secmark inet T handle 15
destroy secmark inet T secmark_name
destroy secmark ip6 T handle 15
destroy secmark ip6 T secmark_name
destroy secmark ip T handle 15
destroy secmark ip T secmark_name
destroy secmark netdev T handle 15
destroy secmark netdev T secmark_name

list secmark table ruleset_spec
list secmark table table_name
list secmark table_id secmark_id
list secmark ip table_id secmark_id
list secmark ip6 table_id secmark_id
list secmark inet table_id secmark_id
list secmark netdev table_id secmark_id
list secmark bridge table_id secmark_id
list secmark arp table_id secmark_id

list secmarks 
list secmarks ip 
list secmarks ip6
list secmarks inet 
list secmarks netdev 
list secmarks bridge
list secmarks arp 
list secmarks table table_id
list secmarks table ip table_id
list secmarks table ip6 table_id
list secmarks table inet table_id
list secmarks table netdev table_id
list secmarks table bridge table_id
list secmarks table arp table_id

add rule T C ct secmark;
add rule ip6 myTable myChain position 1 ct secmark set ip6 myIpTable myCTHchain { };
add rule ip6 table_id myChain position 1 ct secmark zone set ip6 table_id myCTHchain { };


#!/usr/sbin/nft -f
# File: stmt.vim
# Description: A test NFT file to exercise 'stmt' Vim syntax highlightings.
#
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# 'add' 'rule' stmt
# nft_ct_stmt

# ct_key_dir_optional->'ct'->stmt
add rule T C ct bytes #
add rule T C ct packets #
add rule T C ct avgpkt #
add rule T C ct zone #

# ct_dir->'ct'->stmt
add rule T C ct original
add rule T C ct reply

# ct_key->'ct'->stmt
add rule T C ct l3proto
add rule T C ct proto
add rule T C ct mark
add rule T C ct state
add rule T C ct direction
add rule T C ct status
add rule T C ct expiration
add rule T C ct helper
add rule T C ct saddr
add rule T C ct daddr
add rule T C ct proto-src
add rule T C ct proto-dst
add rule T C ct label
add rule T C ct event
add rule T C ct secmark
add rule T C ct id

# @nft_c_verdict_stmt
# @nft_c_match_stmt
# @nft_c_meter_stmt

# @nft_c_payload_stmt
add rule T C ip protocol ip protocol hdr  asdf

# @nft_c_stateful_stmt
# @nft_c_reject_stmt
# nft_log_stmt
# nft_nat_stmt
# @nft_c_meta_stmt
# nft_masq_stmt
# @nft_c_redir_stmt
# nft_tproxy_stmt

# stmt*


#!/usr/sbin/nft -f
# File: synproxy.nft
# Description: A test NFT file to exercise 'synproxy' Vim syntax highlightings.
#
# base_cmd synproxy_cmd
# nft_line/nft_base_cmd/nft_add_cmd/'synproxy'
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################
#   add synproxy obj_spec synproxy_obj synproxy_config close_scope_synproxy (without the 'add' keyword)
#   Bison: ADD SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy
add synproxy myTable synproxy_obj mss 1500 wscale 7;
add synproxy ip myTable synproxy_obj mss 1492 wscale 5;
add synproxy ip6 myTable synproxy_obj mss 1498 wscale 6;
add synproxy inet myTable synproxy_obj mss 1496 wscale 4;
add synproxy arp myTable synproxy_obj mss 1512  wscale 2;
add synproxy bridge myTable synproxy_obj mss 1518 wscale 3;
add synproxy netdev myTable synproxy_obj mss 1593 wscale 1
add synproxy netdev myTable synproxy_obj mss 1593 ; wscale 1
#   Bison: SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy (w/o 'add')
#   Bison: SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy (w/o 'add')
add synproxy myTable https-synproxy {
    mss 1460
    wscale 7
    timestamp sack-perm
}
add synproxy myTable other-synproxy {
    mss 1460
    wscale 5
}

#   synproxy obj_spec synproxy_obj synproxy_config close_scope_synproxy (without the 'add' keyword)
#   Bison: SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy 
synproxy myTable synproxy_obj mss 1500 ;
synproxy myTable synproxy_obj mss 1500 wscale 7
synproxy last myTable synproxy_obj mss 1492 wscale 5;
synproxy ip myTable synproxy_obj mss 1492 wscale 5
synproxy ip6 myTable synproxy_obj mss 1498 wscale 6 ; 
synproxy inet myTable synproxy_obj mss 1496 wscale 4
synproxy arp myTable synproxy_obj mss 1512  wscale 2 ;
synproxy bridge myTable synproxy_obj mss 1518 wscale 3; 
synproxy netdev myTable synproxy_obj mss 1593 wscale 1
synproxy netdev myTable synproxy_obj mss 1593 wscale 1 timestamp
synproxy netdev myTable synproxy_obj mss 1593 wscale 1 timestamp ;
synproxy netdev myTable synproxy_obj mss 1593 wscale 1 sack-perm
synproxy netdev myTable synproxy_obj mss 1593 wscale 1 sack-perm ;
synproxy netdev myTable synproxy_obj mss 1593 wscale 1 timestamp sack-perm
synproxy netdev myTable synproxy_obj mss 1593 wscale 1 timestamp sack-perm ;

synproxy myTable synproxy_obj mss 1500 ; wscale 7;   # very old syntax
synproxy myTable synproxy_obj mss 1500 ; wscale 7; timestamp   # very old syntax
synproxy myTable synproxy_obj mss 1500 ; wscale 7; sack-perm   # very old syntax
synproxy myTable synproxy_obj mss 1500 ; wscale 7; timestamp sack-perm   # very old syntax
synproxy myTable synproxy_obj { mss 1460 wscale 7 timestamp sack-perm ; };

#   Bison: SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy (w/o 'add')
synproxy myTable https-synproxy { mss 1460 wscale 7 ; }
synproxy myTable https-synproxy { mss 1460 wscale 7 timestamp; }
synproxy myTable https-synproxy { mss 1460 wscale 7 sack-perm; }
synproxy myTable https-synproxy { mss 1460 wscale 7 timestamp sack-perm; }
synproxy myTable https-synproxy { mss 1460 ; wscale 7 ; timestamp sack-perm; }
synproxy myTable https-synproxy {
    mss 1460 wscale 7;
    mss 1460
    wscale 7
    timestamp sack-perm
}
synproxy myTable other-synproxy {
    mss 1460
    wscale 5
}

# base_cmd add_cmd 'table' table_spec table_block 'synproxy' synproxy_block
table T { synproxy SP { } }
table ip T { synproxy SP { } }
table ip6 T { synproxy SP { } }
table inet T { synproxy SP { } }
table netdev T { synproxy SP { } }
table bridge T { synproxy SP { } }
table arp T { synproxy SP { } }
table T { synproxy SP { mss 1490 wscale 5 } }
table T { synproxy SP { mss 1490 wscale 5 } }
table T { synproxy SP { mss 1490 wscale 5 } }
table T { synproxy SP { mss 1490 wscale 5 sack-permitted } }
table T { synproxy SP { mss 1490 wscale 5 timestamp} }
table T { synproxy SP { mss 1490 ; wscale 5 } }
table T { synproxy SP { mss 1490 ; wscale 5 } }
table T { synproxy SP { mss 1490 ; wscale 5 } }
table T { synproxy SP { mss 1490 ; wscale 5 } };
table T {
    synproxy SP {
        # common_block
        include "/directory/subdirectory/filename.filetype"
        define A = 1
        redefine A = 2
        undefine A
    }
}

# create synproxy obj_spec synproxy_obj synproxy_config close_scope_synproxy
#   Bison: ADD SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy 
create synproxy myTable synproxy_obj mss 1500 wscale 7;
create synproxy ip myTable synproxy_obj mss 1492 wscale 5;
create synproxy ip6 myTable synproxy_obj mss 1498 wscale 6;
create synproxy inet myTable synproxy_obj mss 1496 wscale 4;
create synproxy arp myTable synproxy_obj mss 1512  wscale 2;
create synproxy bridge myTable synproxy_obj mss 1518 wscale 3;
create synproxy netdev myTable synproxy_obj mss 1593 wscale 1
#   Bison: SYNPROXY obj_spec synproxy_obj synproxy_config { common_block } close_scope_synproxy (w/o 'add')
###create synproxy myTable https-synproxy {
###    mss 1460
###    wscale 7
###    timestamp sack-perm
###}
###create synproxy myTable other-synproxy {
###    mss 1460
###    wscale 5
###}
delete synproxy table_name synproxy_name 
delete synproxy ip table_name synproxy_name
delete synproxy ip6 table_name synproxy_name
delete synproxy inet table_name synproxy_name
delete synproxy arp table_name synproxy_name
delete synproxy bridge table_name synproxy_name
delete synproxy netdev table_name synproxy_name
delete synproxy table_name handle 15
delete synproxy ip table_name handle 15
delete synproxy ip6 table_name handle 15
delete synproxy inet table_name handle 15
delete synproxy arp table_name handle 15
delete synproxy bridge table_name handle 15
delete synproxy netdev table_name handle 15


list synproxy myTable mySynProxy
list synproxy ip myTable mySynProxy
list synproxy ip6 myTable mySynProxy
list synproxy inet myTable mySynProxy
list synproxy arp myTable mySynProxy
list synproxy bridge myTable mySynProxy
list synproxy netdev myTable mySynProxy

#!/usr/sbin/nft -f
# File: all-tables.nft
# Description: A test NFT file to exercise 'add table' Vim syntax highlightings.
#
# Identifiers begin with an alphabetic character (a-z,A-Z),
# followed by zero or more alphanumeric characters (a-z,A-Z,0-9)
# and the characters slash (/), backslash (\), underscore (_)
# and dot (.).
#
# Identifiers using different characters or clashing with a
# keyword need to be enclosed in double quotes (").
#
# base_cmd add_cmd 'table'
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_table/nft_add_table_chain_block policy_spec
#
################################################################################
# true positive test (properly hightlighted correctly; has good content; perfect
################################################################################

table A
table Z
table a
table z
table a0
table z0
table A/
table A\
table A_
table A.
table A

# base_cmd add_cmd 'table' table_spec family_spec family_spec_explicit
add table filter

table T  # that one creates an empty table
# base_cmd add_cmd 'table' table_spec identifier <STRING>
table xxxx
# base_cmd add_cmd 'table' table_spec identifier 'last'
table last

# base_cmd add_cmd 'table' table_spec table_block
table T { }
table T { } ; #
table inet xxxx { };
table bridge xxxx { };
table netdev xxxx { };
table arp xxxx { };

table my.IpTable
table my/IpTable
add table my/IpTable
add table my\IpTable    # defaults to 'ip' family
table my./_IpTable
add table my./_IpTable
table my.IpTable
add table my.IpTable
add table my_./\IpTable    # defaults to 'ip' family

# base_cmd add_cmd 'table' table_spec table_block common_block 'include'
table T {
    include "file"
}
# base_cmd add_cmd 'table' table_spec table_block common_block 'define'
table T { define A = 1 }
table T { 
    define A = 1 
    define A = 1 ;
    define last = 1
    define last = 1 ;
    define A = {} ;
}
# base_cmd add_cmd 'table' table_spec table_block common_block 'redefine'
table T { redefine A = 1 }
table T { redefine A = 1; }
table T { 
    redefine A = 1
    redefine A = 1 ;
}
# base_cmd add_cmd 'table' table_spec table_block common_block 'undefine'
table T {
    undefine A
    undefine B 
}
table xxxx { undefine abc ; }
table xxxx { undefine abc ; } ; 

# base_cmd add_cmd 'table' table_spec table_block table_options 'comment'
# base_cmd add_cmd 'table' table_spec table_block 'comment' string
table T { 
    comment Hello
    comment Hello
    comment Hello
    comment Hello 
} 
table bridge T { comment 'Hello world!' }
table T { comment "Hello world!" }
table T { comment *Hello world!* }
table netdev xxxx { comment "test" } ;
table xxxx { comment 'test' };
table T { comment *Hello world!* ;  }
table arp xxxx { comment test;  };

# base_cmd add_cmd 'table' table_spec table_block 'policy' 'offload'
# base_cmd add_cmd 'table' table_spec table_block hook_spec 'type' 
# base_cmd add_cmd 'table' table_spec table_block 'flags' flag_spec
table T {flags member_1}
table T {flags member_1;}
table T {flags member_1;};
table T {flags member_1 ;}
table T {flags member_1; }
table T {flags member_1 ; }
table T {flags member_1 ;};
table T {flags member_1; };
table T {flags member_1 ; };
table T { flags member_1 }
table T { flags member_1; }
table T {flags member_2,member_3}
table T { flags member_2, member_3 }
table T { flags member_1; } ;
table T { flags member_2,member_3} ; 
table T { flags member_2, member_3 } ; 
# base_cmd add_cmd 'table' table_spec table_block { table_options ';' }
table T { flags member_1 } ;
table ip xxxx { flags a, b, c};
table xxxx { ; flags a, b, c; comment "new stuff"; };
table T { flags a, b, c; chain C { type ; }; };

table T {
    # common_block
    include "/directory/subdirectory/filename.filetype";
    define A = 1
    redefine A = 2
    undefine A
    # table_option
    flags a, b, c
    comment Hello
}


# base_cmd add_cmd 'table' table_spec table_block 'chain' chain_block
table T {
    chain C {
    }
}

table T {
    chain C {
    }
}

# base_cmd add_cmd 'table' table_spec table_block 'rule' rule

######################
table T { comment "unique, uh?"; flags a, b, c; chain C { type ; }; };
table xxxx {
    comment test;
    include "add-more-table-xxxx.nft";
};

table T { chain last }
table T { chain last; }
table T { chain last; };
table xxxx { 
    chain last  
}
table xxxx { 
    chain last; };
table T { chain C }
table T { chain C };
table T { chain C ; } ;
table T { chain C ; } ;
table T { chain C { }; };
table T { chain C { }; chain D { }; };
add table T { 
    chain C {
        comment asdf 
    }; 
    chain D { }; 
};


# nft_line/nft_c_base_cmd/nft_base_cmd_add/nft_add_table_spec
add table ip T { ip chain C { type ; }; } # comment ;   # supposed to be highlighted (incomplete type)
add table ip T { ip chain C { type ; }; } ;   # supposed to be highlighted (incomplete type)
table T { chain C { type filter hook ingress device $MY_DEVICE ; }; };
table T { chain C { type filter hook ingress device $MY_DEVICE ; }; };
table T { chain C { type filter hook ingress devices = $MY_DEVICE ; }; };
table T { chain C { type filter hook ingress devices = $MY_DEVICE }; };
table T { chain C { type filter hook ingress devices = { a }; }; };
table T { chain C { type filter hook ingress devices = { $a }; }; };
table ip MyTable { chain C { type filter hook ingress devices = { a }; };
table T { chain C { type filter hook ingress device eth0 priority 256 }; };
table T { chain C { type filter hook ingress device eth0 priority 1; } };
table T { chain C { type filter hook ingress device eth0 priority 1; } };
add table T { chain C { type filter hook ingress device eth0 priority 1; }; };

table T { chain C { policy $MYPOLICY; };};
table T { chain C { policy drop; };};
table T { chain C { policy accept; };};
table T { chain C { flags offload; }; };
table T { chain C { comment "asdf" ;  }; };
table T { chain C { rule define = 1; comment "asdf" ;  }; };
table T { chain C { devices=$MYDEVICE;  }; };
table T { chain C { devices =$MYDEVICE;  }; };
table T { chain C { devices= $MYDEVICE;  }; };
table T { chain C { xxx devices = $MYDEVICE;  }; };
table T { chain C { xxx devices = { $MYDEVICE,$SECONDDEVICE,"br0" }  }; };

table myIpTable { flags dormant; }
table netdev myNetdev { flags dormant; }
table bridge myBridge { flags dormant; }
table arp myArpTable { flags dormant; }
table ip myIpTable { flags dormant; }
table ip6 myIp6Table { flags dormant; }
table inet myInetTable { flags dormant; }
# END OF WORK

table xxxx { undefine abc; chain last { undefine abc; }; };



table inet MyIpNet {
    chain MyForwardChain {
        type filter hook prerouting device wlan0 priority 1;
        flags offload;
        policy drop;
        policy accept;
    }
    flags a, b, c
    comment "unique"
};




table xxxx { chain last {
    undefine abc;
    include "file";
    define a = 123;
}; };
table arp A0b_._/RP_TABLE {
    chain ARP_INPUT_FILTER {
        define a = 123;
        type filter hook input priority table_id;
        policy drop;
        counter log drop
    }
    chain ARP_INPUT_FILTER {
        type filter hook prerouting priority 0;
        policy drop;
        counter log return
    }
    chain workstation_arp_filter_output {
        type filter hook output priority 0;
        policy drop;
        counter log drop
    }
}
table netdev A {
    chain a { 
        type filter hook ingress device lo priority -100; policy accept
        chain a { type };
        udp dport 53 ether type 0x8006 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set numgen inc mod 2 map {  0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
    };


    chain b { }
}
table netdev A {
    chain a { };
    chain b { };
    chain c { };
}
table netdev A {
    chain a { }; chain b { }; chain c { };
}

table inet filter {
    chain input {
        type filter hook input priority 0; policy drop;

        ip protocol icmp icmp type echo-request limit rate over 1/minute burst 4 packets  drop
        ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate over 1/minute burst 4 packets drop

        # ct state {established, related} accept
        ct state invalid drop

        iifname lo accept

        ip protocol icmp accept
        ip6 nexthdr icmpv6 accept

    }
}

table netdev NETDEV_TABLE {
    # mind the NIC, it must exists
    chain ingress_filter_netdev_lo { 
        type filter hook ingress device lo priority -100; policy accept
        udp dport 53 ether type 0x8006 ether saddr aa:bb:cc:dd:ff:ee ether daddr numgen inc mod 2 ; map {  0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
    };
    chain red_ingress_netdev_eth0 { 
        # You'll get a cryptic error if 'device eth0' is missing after 'chain'
        type filter hook ingress device eth0 priority -100; 
        policy accept;

        # tcp dport 80 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set jhash ip saddr . tcp sport mod 2 map { 0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
        udp dport 53 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set numgen inc mod 2 map {  0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
    }
}
table bridge workstation_bridge {
    chain workstn_bridge_filter_input {
        type filter hook input priority -200;
        policy accept;
        accept ;
        continue ;
        return ;
        jump workstn_bridge_filter_output
        goto ipfilter ;

        type filter hook output priority -200; ;
    }  ;
    chain workstn_bridge_filter_output {
        type filter hook output priority -200;
        policy accept;
    }

    chain workstn_bridge_filter_forward {
        type filter hook forward priority -200;
        # default drop on all bridge forwarding
        policy drop;

        oif eth0 ip protocol icmp icmp type echo-request accept
        iif eth0 ip protocol icmp icmp type echo-reply accept
        counter log drop
    }
}
table inet INET_TABLE {
  define interface_name2 = "br0"
    chain workstation_inet_filter_input {
        # Things that make this chain unique (input, filter)
        type filter hook input priority 0;
        policy drop;
        iif lo accept
        # Things that make this chain unique ('eth0', input, filter)
        # meta iifname != $interface_name2 drop;  # workstation wants all intfs
        # Let things back in if they've been established before new firewall
        ct state established,related accept;
        #  DNS 
        tcp dport 53 counter accept 
        udp dport 53 counter accept 
        #  Multicast DNS 
        tcp dport 5353 counter accept
        # RFC 6092 - Simple Security in IPv6 Gateway CPE
        # recommends that the DEFAULT
        #   operating mode for residential IPv6 simple security be to treat
        #   Generic Packet Tunneling [RFC2473] and similar protocols as opaque
        #   transport layers, i.e., inbound tunnel initiations are denied and
        #   outbound tunnel initiations are accepted.

        # To facilitate the use of IPsec in support of IPv6
        # mobility, the Internet Key Exchange (IKE) protocol [RFC5996] and the
        # Host Identity Protocol (HIP) [RFC5201] should also be permitted in
        # the DEFAULT operating mode.

        #  Workstation
        icmp type {
            destination-unreachable, 
            time-exceeded, 
            parameter-problem
        } counter accept

        # Router/Gateway
        icmp type {
            destination-unreachable, 
            redirect, 
            time-exceeded, 
            parameter-problem, 
            router-advertisement, 
            router-solicitation
            } counter accept

        # All ICMP
        icmp type {
            echo-reply, 
            destination-unreachable, 
            source-quench, redirect, 
            echo-request, 
            time-exceeded, 
            parameter-problem, 
            timestamp-request, 
            timestamp-reply, 
            info-request, 
            info-reply, 
            address-mask-request, 
            address-mask-reply, 
            router-advertisement, 
            router-solicitation
            } counter accept

        tcp dport 25 counter accept    # smtp
        tcp dport 465 counter accept   # submission
        # SSH server
        tcp dport ssh counter accept 
        
        tcp dport 514 counter accept    # syslog
        tcp dport 6514 counter accept   # secured syslog

        tcp dport 80 counter accept 
        tcp dport 443 counter accept 

        # IP-specific
        # meta ip goto workstation_inet_filter_input_ip
        # meta ip6 goto workstation_inet_filter_input_ip6
        # meta vlan goto workstation_inet_filter_input_vlan
        # meta arp goto workstation_inet_filter_input_arp

        # Just in case that someone screws up our 'policy drop'

        # multi-family reject, using the icmpx keyword
        counter log reject with icmpx type admin-prohibited
    };
    # ARP filter input
    chain workstation_arp_filter_input {
        counter log reject
    }
    # ARP filter output
    chain workstation_arp_filter_output {
        #  Multicast DNS 
        tcp dport 5353 counter accept
        #  DNS 
        tcp dport 53 counter accept 
        udp dport 53 counter accept 

        #  Workstation
        icmp type {
            destination-unreachable, 
            time-exceeded, 
            parameter-problem
            } counter accept

        # Router/Gateway
        icmp type {
            destination-unreachable, 
            redirect, 
            time-exceeded, 
            parameter-problem, 
            router-advertisement, 
            router-solicitation
            } counter accept

        # All ICMP
        icmp type {
            echo-reply, 
            destination-unreachable, 
            source-quench, redirect, 
            echo-request, 
            time-exceeded, 
            parameter-problem, 
            timestamp-request, 
            timestamp-reply, 
            info-request, 
            info-reply, 
            address-mask-request, 
            address-mask-reply, 
            router-advertisement, 
            router-solicitation
            } counter accept

        tcp dport 25 counter accept    # smtp
        tcp dport 465 counter accept   # submission
        # SSH server
        tcp dport ssh counter accept 

        tcp dport 514 counter accept    # syslog
        tcp dport 6514 counter accept   # secured syslog

        tcp dport 80 counter accept 
        tcp dport 443 counter accept 

        counter log reject
    }
    #IPv6 filtering
    chain workstation_ip6_filter_input {
        counter log reject
    }
    #IPv6 filtering
    chain workstation_inet_filter_input_ip6 {
        counter log reject
    }
    #IPv6 filtering
    chain workstation_inet_filter_input_ip6 {
        counter log reject
    }
}
table ip workstn_ip_nat {
    chain workstn_ip_nat_postrouting {
        type nat hook postrouting priority 0;
        #Likewise, in iptables NAT (source NAT):
        # % iptables -t nat -A POSTROUTING -s 192.168.1.1 -j SNAT --to-source 1.1.1.1
        # % iptables -t nat -A POSTROUTING -s 192.168.2.2 -j SNAT --to-source 2.2.2.2
        # % iptables -t nat -A POSTROUTING -s 192.168.3.3 -j SNAT --to-source 3.3.3.3

        # Translated to a nftables one-liner:

        # snat ip saddr map { 
        #     192.168.1.1 : 1.1.1.1, 
        #     192.168.2.2 : 2.2.2.2, 
        #     192.168.3.3 : 3.3.3.3 
       #  }
    }
}
table inet raw {
    chain prerouting {
        type filter hook prerouting priority -300;
        ct zone set iif map { "eth1" : 1, "veth1" : 2 }
    };
    chain output {
        type filter hook output priority -300;
        ct zone set oif map { "eth1" : 1, "veth1" : 2 }
    }
}
table inet filter {
    chain input {
        type filter hook input priority 0; policy accept;
        ct state established,related accept # handle 4
        ip saddr 10.1.1.1 tcp dport ssh accept # handle 5
    }
}










table ip my_filter_table {
    set my_connlimit {
        type ipv4_addr
        size 65535
        flags dynamic
    }

    chain my_output_chain {
        type filter hook output priority filter; policy accept;
        ct state new add @my_connlimit { ip daddr ct count over 20 } counter packets 0 bytes 0 drop
   }
}

table ip filter {
    set myset {
        type inet_service
        flags timeout
        elements = { http expires 9s}
    }

    chain input {
        type filter hook input priority 0; policy accept;
        update @myset { tcp dport timeout 1m }
    }
}

table ip filter {
    set myset {
        type ipv4_addr
        elements = { 1.1.1.1 }
    }

    chain input {
        type filter hook input priority 0; policy accept;
        add @myset { ip saddr }
    }
}

table inet myfilter {
    set myset {
        type ipv4_addr
        flags timeout
        elements = { 10.0.0.1 timeout 10s expires 8s}
    }
}

# fw.basic
table ip filter {
    chain input {
        type filter hook input priority 0;
        # accept traffic originated from us
        ct state established,related accept
        # accept any localhost traffic
        iif lo accept
        # count and drop any other traffic
        counter drop
    }
}

# fw6.basic
table ip6 filter {
    chain input {
        type filter hook input priority 0;
        # accept any localhost traffic
        iif lo accept
        # accept traffic originated from us
        ct state established,related accept
        # accept neighbour discovery otherwise connectivity breaks
        icmpv6 type { nd-neighbor-solicit, echo-request, nd-router-advert, nd-neighbor-advert } accept
        # count and drop any other traffic
        counter drop
    }
}

# fw.inet.basic
table inet filter {
    chain input {
        type filter hook input priority 0;
        # accept any localhost traffic
        iif lo accept
        # accept traffic originated from us
        ct state established,related accept
        # accept neighbour discovery otherwise connectivity breaks
        ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, echo-request, nd-router-advert, nd-neighbor-advert } accept
        # count and drop any other traffic
        counter drop
    }
}

table inet filter {
    chain global {
        ct state established,related accept
        ct state invalid drop
        ip protocol icmp accept
        ip6 nexthdr icmpv6 accept
        udp dport 53 accept
    }
    set myset_ipv4 {
        type ipv4_addr;
        elements = { $server1_ipv4 , $workstation1_ipv4 }
    }
    set myset_ipv6 {
        type ipv6_addr;
        elements = { $server1_ipv6 , $workstation1_ipv6 }
    }
    chain dmz_in {
        # your rules for traffic to your dmz servers
        ip saddr @myset_ipv4
        ip6 saddr @myset_ipv6
    }
    chain dmz_out {
        # your rules for traffic from the dmz to internet
    }
    chain lan_in {
        # your rules for traffic to your LAN nodes
    }
    chain lan_out {
        # your rules for traffic from the LAN to the internet
    }
    chain forward {
        type filter hook forward priority 0; policy drop;
        jump global
        oifname vmap { $nic_dmz : jump dmz_in , $nic_lan : jump lan_in }
        oifname $nic_inet iifname vmap { $nic_dmz : jump dmz_out , $nic_lan : jump lan_out }
    }
    chain input {
        type filter hook input priority 0 ; policy drop;
        jump global
        # your rules for traffic to the firewall here
    }
    chain output {
        type filter hook output priority 0 ; policy drop;
        jump global
        # your rules for traffic originated from the firewall itself here
    }
}

# Port Knocking Example #1
table inet portknock {
    set clients_ipv4 {
        type ipv4_addr
        flags timeout
    }
    set clients_ipv6 {
        type ipv6_addr
        flags timeout
    }
    set candidates_ipv4 {
        type ipv4_addr . inet_service
        flags timeout
    }
    set candidates_ipv6 {
        type ipv6_addr . inet_service
        flags timeout
    }
    chain input {
        type filter hook input priority -10; policy accept;

        iifname "lo" return

        tcp dport 123 add @candidates_ipv4 {ip  saddr . 234 timeout 1s}
        tcp dport 123 add @candidates_ipv6 {ip6 saddr . 234 timeout 1s}
        tcp dport 234 ip  saddr . tcp dport @candidates_ipv4 add @candidates_ipv4 {ip  saddr . 345 timeout 1s}
        tcp dport 234 ip6 saddr . tcp dport @candidates_ipv6 add @candidates_ipv6 {ip6 saddr . 345 timeout 1s}
        tcp dport 345 ip  saddr . tcp dport @candidates_ipv4 add @candidates_ipv4 {ip  saddr . 456 timeout 1s}
        tcp dport 345 ip6 saddr . tcp dport @candidates_ipv6 add @candidates_ipv6 {ip6 saddr . 456 timeout 1s}
        tcp dport 456 ip  saddr . tcp dport @candidates_ipv4 add @clients_ipv4 {ip  saddr timeout 10s} log prefix "Successful portknock: "
        tcp dport 456 ip6 saddr . tcp dport @candidates_ipv6 add @clients_ipv6 {ip6 saddr timeout 10s} log prefix "Successful portknock: "
        tcp dport $guarded_ports ip  saddr @clients_ipv4 counter accept
        tcp dport $guarded_ports ip6 saddr @clients_ipv6 counter accept
        tcp dport $guarded_ports ct state established,related counter accept
        tcp dport $guarded_ports counter reject with tcp reset
    }
}

# Port Knocking Example #2
table ip Inet4 {
    set Knocked_1 {
        type ipv4_addr
        flags timeout
        timeout 10s
        gc-interval 4s
    }
    set Knocked_2 {
        type ipv4_addr
        flags timeout
        timeout 10s
        gc-interval 4s
    }
    set Knocked_3 {
        type ipv4_addr
        flags timeout
        timeout 10s
        gc-interval 4s
    }
    set Knocked_4 {
        type ipv4_addr
        flags timeout
        timeout 2m
        gc-interval 4s
    }

    chain Knock_1 {
        set add ip saddr @Knocked_1
    }
    chain Unknock_1 {
        set update ip saddr timeout 0s @Knocked_1
    }
    chain Knock_2 {
        set update ip saddr timeout 0s @Knocked_1
        set add ip saddr @Knocked_2
    }
    chain Unknock_2 {
        set update ip saddr timeout 0s @Knocked_2
    }
    chain Knock_3 {
        set update ip saddr timeout 0s @Knocked_2
        set add ip saddr @Knocked_3
    }
    chain Unknock_3 {
        set update ip saddr timeout 0s @Knocked_3
    }
    chain Knock_4 {
        set update ip saddr timeout 0s @Knocked_3
        set add ip saddr @Knocked_4 log prefix "Port-Knock accepted: "
    }
    chain RefreshKnock {
        set update ip saddr timeout 2m @Knocked_4
    }
    chain PortKnock {
        ct state new ip saddr @Knocked_4 goto RefreshKnock
        tcp dport 456 ct state new ip saddr @Knocked_3 goto Knock_4
        tcp dport 345 ct state new ip saddr @Knocked_3 return
        ip saddr @Knocked_3 ct state new goto Unknock_3
        tcp dport 345 ct state new ip saddr @Knocked_2 goto Knock_3
        tcp dport 234 ct state new ip saddr @Knocked_2 return
        ip saddr @Knocked_2 ct state new goto Unknock_2
        tcp dport 234 ct state new ip saddr @Knocked_1 goto Knock_2
        tcp dport 123 ct state new ip saddr @Knocked_1 return
        ip saddr @Knocked_1 ct state new goto Unknock_1
        tcp dport 123 ct state new goto Knock_1
    }
    chain FilterIn {
        type filter hook input priority 0
        policy drop

        # allow established/related connections
        ct state established,related accept

        # early drop of invalid connections
        ct state invalid drop

        # allow from loopback
        meta iif lo accept

        # allow icmp
        ip protocol icmp accept

        # port-knocking
        jump PortKnock

        # misc. filtering
        # ...
    }

    chain FilterOut {
        type filter hook output priority 0
        policy accept
    }
}

# Classification to tc structure
table ip filter {
   map subnet_map {
       type ipv4_addr : verdict
       flags interval
       elements = { 10.20.255.48/29 : goto group_114, 10.20.255.88/29 : goto group_114,
                    10.20.255.128/29 : goto group_114 }
   }
   set priority_set {
       type ipv4_addr
       flags interval
       elements = { 8.8.8.8, 8.8.4.4 }
   }   
   map group_114 {
       type ipv4_addr : classid
       flags interval
       elements = { 10.20.255.50 : 1:ffd8, 10.20.255.90 : 1:ffd5,
                     10.20.255.130 : 1:ffd2 }
   }
   map group_114_prio {
       type ipv4_addr : classid
       flags interval
       elements = { 10.20.255.50 : 1:ffd9, 10.20.255.90 : 1:ffd6,
                     10.20.255.130 : 1:ffd3 }
   }   
   chain forward {
       type filter hook forward priority filter; policy accept;
       meta priority none ip daddr vmap @subnet_map counter packets 0 bytes 0
       meta priority none ip saddr vmap @subnet_map counter packets 0 bytes 0
       ip daddr 192.168.0.0/16 meta priority none meta priority set 1:ffff counter packets 0 bytes 0 log prefix "total - "
       ip saddr 192.168.0.0/16 meta priority none meta priority set 1:ffff counter packets 0 bytes 0 log prefix "total - "
       ip daddr 10.0.0.0/8 meta priority none meta priority set 1:ffff counter packets 38931 bytes 2926076 log prefix "total - "
       ip saddr 10.0.0.0/8 meta priority none meta priority set 1:ffff counter packets 14 bytes 1064 log prefix "total - "
       meta priority none meta priority set 1:2 counter packets 0 bytes 0 log prefix "non_shaped - "
   }
   chain input {
       type filter hook input priority filter; policy accept;
       meta priority none meta priority set 1:2 counter packets 419381 bytes 45041195
   }
   chain output {
       type filter hook output priority filter; policy accept;
       meta priority none meta priority set 1:2 counter packets 507779 bytes 51809859
   }
   chain group_114 {
       meta priority none ip saddr @priority_set meta priority set ip daddr map @group_114_prio counter packets 0 bytes 0
       meta priority none ip daddr @priority_set meta priority set ip saddr map @group_114_prio counter packets 0 bytes 0
       meta priority none meta priority set ip daddr map @group_114 counter packets 0 bytes 0
       meta priority none meta priority set ip saddr map @group_114 counter packets 0 bytes 0
       meta priority none meta priority set 1:ffff counter packets 0 bytes 0 log prefix "group_114 - "
   }
}

# Will count all udp port 5060 packets towards the 
# quota and drop all packets once the quota hits 
# its "over 100 mbytes" threshold.
table inet foo {
    quota example { over 100 mbytes used 0 bytes }

    chain dropafterquota {
        type filter hook postrouting priority 0; policy accept;
        udp port 5060 quota name "example" drop
    }
}
table ip x {
    chain c {
        ct timeout set saddr map {
            192.168.0.14 :"policy1"
        }
    }
    ct timeout "policy1" {
        protocol tcp
        timeouts = {
            established: 120s
            fin_wait: 30;
        }
    }
}

table firewall {
  chain incoming {
    type filter hook input priority 0; policy drop;

    # established/related connections
    ct state established,related accept

    # loopback interface
    iifname lo accept

    # icmp
    icmp type echo-request accept

    # open tcp ports: sshd (22), httpd (80)
    tcp dport { ssh, http } accept
  }
}

table ip6 firewall {
  chain incoming {
    type filter hook input priority 0; policy drop;

    # established/related connections
    ct state established,related accept

    # invalid connections
    ct state invalid drop

    # loopback interface
    iifname lo accept

    # icmp
    # routers may also want: mld-listener-query, nd-router-solicit
    icmpv6 type { echo-request, nd-neighbor-solicit } accept

    # open tcp ports: sshd (22), httpd (80)
    tcp dport { ssh, http } accept
  }
}

table xxxx { undefine abc; chain last { chain last; undefine abc; }; };  # oopsie


#!/usr/sbin/nft -f
# File: table-chain.nft
# Description: A test NFT file to exercise 'table id { chain id { } }' Vim syntax highlightings.
#
# base_cmd table_spec '{' '}'
# nft_line/nft_base_cmd/nft_base_cmd_add/nft_base_cmd_add_set
#
################################################################################
# true positive test: properly hightlighted; has good content; perfect.
################################################################################

table T { chain C { type filter hook output priority 0; policy drop } };



table T {
    chain C {$
        # common_block$
        include "/directory/subdirectory/filename.filetype"$
        define A = 1$
        redefine A = 2$
        undefine A$
        flags offload$
        comment "A comment line"$
    };
}
table T {
    chain C {
        type filter hook input priority 0; policy $MY_POLICY
    }
    chain C {
        tcp a b c
        comment "Chain C is really something"
        type filter hook input priority 0; policy accept
        flags offload 
        devices = { eth0, eth1, eth2 };

    } ;
}

table T {
    chain C {
        type filter hook input priority 0; policy drop;
    }
    chain C1 {
        type filter hook input priority $MY_PRIORITY; policy DROP ;
    }
    chain C2 {
        type filter hook input device $MYDEV priority -100; policy ACCEPT
    }
    chain C3 {
        type filter hook input device eth0 priority $MY_PRIORITY; policy $MY_POLICY
    }
    chain C4 {
        type filter hook input device eth0 priority 0; policy $MY_POLICY
    }
    chain C5 {
        type filter hook input device eth0 priority 0; policy $MY_POLICY
    }
    chain C6 {
        type filter hook input devices = $MY_DEVICES_SET priority 0;
        policy $MY_POLICY
    }
    chain C11 {
        type filter hook input devices = { "asdf" } priority 0;
        policy $MY_POLICY
    }
    chain C12 {
        type filter hook input devices = { 'asdf' } priority 0; policy $MY_POLICY
    }
    chain C13 {
        type filter hook input devices = { $WAN_DEV } priority 0; policy $MY_POLICY
    }
    chain C14 {
        type filter hook input devices = { abc } priority 0; policy $MY_POLICY
    }
    chain C15 {
        type filter hook input devices = { "asdf", 'asdf', abc, $WAN_DEV, $LAN_DEV, $DMZ_DEV } priority 0; policy $MY_POLICY
    }
}

table T {
    chain C2 {
        # 'priority out 5' is a valid setting
        type filter hook input device eth0 priority out 5; policy $MY_POLICY
    }
}

#!/usr/sbin/nft -f
# File: verdict.nft
# Description: A test NFT file to exercise 'verdict' Vim syntax highlightings.
#
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# verdict_expr
tableid chainid accept 
tableid chainid accept 
tableid chainid drop 
tableid chainid continue 
tableid chainid jump myChainId
tableid chainid jump last
tableid chainid jump $MY_ACTION
tableid chainid goto hisChainId
tableid chainid goto last
tableid chainid goto $MY_ACTION
tableid chainid return 

# verdict_map_stmt
rule table_id chain_id vmap { }
rule table_id chain_id vmap { } ;
add rule table_id chain_id vmap  
add rule table_id chain_id vmap; 

add rule table_id chain_id vmap { }
add rule table_id chain_id vmap { };
add rule table_id chain_id vmap { }
add rule table_id chain_id vmap { } ; 
add rule table_id chain_id vmap at ABC
add rule table_id chain_id vmap at ABC  ;



