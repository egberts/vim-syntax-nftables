
counter table_id counter_id
add counter table_id counter_id
counter T C
counter T C
counter T0 C
counter T_ C
counter T\ C
counter T C/C
counter T C ;
counter ip T C
counter ip6 T C 
counter inet T C
counter netdev T C
counter bridge T C
counter arp T C
counter ip T C ;
counter ip6 T C ;
counter inet T C ; 
counter netdev T C;
counter bridge T C; 
counter arp T C  ;  
counter T C { packet 123 bytes 12345 } ;
counter T C { packet 123 bytes 12345 } ;
counter T last { packet 123 bytes 12345; } ;
counter ip T C { packet 123 bytes 123; packet 123 bytes 123; };
counter ip T C { 
    packet 123 bytes 123 
    include "include_counters_file.nft";
};
add counter T/T C
add counter T C0
add counter T C_
add counter T C\
add counter T C ;
add counter T last;
add counter T last packet 123 bytes 12345;
add counter T C { packet 123 bytes 12345 };
add counter T C { packet 123 bytes 12345; packet 321 bytes 4321; };
add counter T C { 
    packet 123 bytes 12345; 
    packet 321 bytes 4321; 
};
add counter T C ;
add counter ip T C { packet 123 bytes 123 };
counter T last;
counter T last packet 123 bytes 12345;
add counter filter http
add counter filter https
add rule filter input tcp dport 80 counter name \"http\"  # nftables manpage
add rule filter input name tcp dport map { 80 : "http", 443 : "https" }  # nftables manpage
delete counter table_id counter_id
destroy counter table_id counter_id
list counter table_id counter_id
list counter table_id counter_id ;
reset counter table_id counter_id
reset counter table_id  chain_id  ; reset counter table_id2 chain_id2
table inet x {  # from nftables manpage
    chain y {
        type filter hook input priority filter; policy accept; ;;;;
        socket cgroupv2 level 1 "user.slice" counter
    }
}
flowtable T F
add flowtable T F
add flowtable T F ;
add flowtable ip S F
add flowtable ip6 S F  ;
add flowtable inet S  F
add flowtable netdev  S F
add flowtable  bridge S F
add  flowtable arp S F
 add flowtable arp S F ;
add flowtable ip T F { hook b }
add flowtable T F { devices = eth0 }
add flowtable T F { hook "handler" 123; }
add flowtable T F {flags offload}
add flowtable T F {flags offload}  ;
add flowtable T F { flags offload ; }
add flowtable T F { counter ; flags offload ; devices = eth0 }
 add flowtable ip T F { counter; };
 add flowtable ip T F { hook b };
add  flowtable T F { devices = eth0 };
add flowtable  T F { hook "handler" 123; };
add flowtable T  F { flags offload ;};
add flowtable T F  { flags offload ; counter; };
add flowtable T F {  counter ; flags offload ; devices = eth0 };
delete flowtable table_id flowtable_id 
delete flowtable ip table_id flowtable_id 
delete flowtable ip6 table_id flowtable_id 
delete flowtable inet table_id flowtable_id 
delete flowtable netdev table_id flowtable_id 
delete flowtable bridge table_id flowtable_id 
delete flowtable arp table_id flowtable_id 
delete flowtable table_id flowtable_id { hook "myhook"; devices = $MY_WAN; flags offload; counter }
delete flowtable ip table_id flowtable_id { devices = $MY_DMZ }
delete flowtable ip6 table_id flowtable_id { hook "ourhook" }
delete flowtable inet table_id flowtable_id { flags offload }
delete flowtable netdev table_id flowtable_id { counter }
delete flowtable bridge table_id flowtable_id { hook "ushook"; devices = $WAN }
delete flowtable arp table_id flowtable_id { 
    include "MyInclude." ;
    define A = 1 ;
    redefine A = 2 ;
    undefine A ;
    hook "yourhook" ;
    devices = { "eth0" } ;
    flags offload ;
    counter ;
}
delete flowtable table_id handle 15 
delete flowtable ip table_id handle 15 
delete flowtable ip6 table_id handle 15 
delete flowtable inet table_id handle 15 
delete flowtable netdev table_id handle 15 
delete flowtable bridge table_id handle 15 
delete flowtable arp table_id handle 15 
destroy flowtable table_id handle 15 
destroy flowtable ip table_id handle 15 
destroy flowtable ip6 table_id handle 15 
destroy flowtable inet table_id handle 15 
destroy flowtable netdev table_id handle 15 
destroy flowtable bridge table_id handle 15 
destroy flowtable arp table_id handle 15 
destroy flowtable table_id flowtable_id 
destroy flowtable ip table_id flowtable_id 
destroy flowtable ip6 table_id flowtable_id 
destroy flowtable inet table_id flowtable_id 
destroy flowtable netdev table_id flowtable_id 
destroy flowtable bridge table_id flowtable_id 
destroy flowtable arp table_id flowtable_id 
destroy flowtable table_id flowtable_id { flowtable_block }
destroy flowtable ip table_id flowtable_id { flowtable_block }
destroy flowtable ip6 table_id flowtable_id { flowtable_block }
destroy flowtable inet table_id flowtable_id { flowtable_block }
destroy flowtable netdev table_id flowtable_id { flowtable_block }
destroy flowtable bridge table_id flowtable_id { flowtable_block }
destroy flowtable arp table_id flowtable_id { flowtable_block }
list flow tables ip
list flow tables ip6
list flow tables inet
list flow table table_id synproxy_id
list flow table last synproxy_id
list flow table table_id last
list flow table last last
list flow table ip table_id synproxy_id
list flow table ip last synproxy_id
list flow table ip table_id last
list flow table ip last last
list flow table ip6 table_id synproxy_id
list flow table inet table_id synproxy_id
list flowtables
list flowtables ip
list flowtables ip6
list flowtables inet
list flowtable ip
list flowtable ip6 T C
flush flow table table_id flow_id
flush flow table ip table_id flow_id
flush flow table ip6 table_id flow_id
flush flow table inet table_id flow_id
flush flow table netdev table_id flow_id
flush flow table bridge table_id flow_id
flush flow table arp table_id flow_id
map T S
map ip T S
map ip6 T S
map inet T S
map netdev T S
map bridge T S
map arp T S
 map arp T S
map T C;
map T C { timeout 15:00:01 }
map T C { gc-interval 1:00:1 }
map T C { flags constant }
map T C { flags interval; }
map T C { flags timeout };
map ip T C { flags dynamic ; } ;
map T C { flags constant, interval, timeout, dynamic };
map T C { flags constant; flags interval; flags timeout; flags dynamic };
map T C { comment *A comment string* }
map T C { comment "A comment string" }
map T C { comment 'A comment string' }
map T C { comment single-word }
map T C { policy performance };
map T C { policy memory };
map T C { size 123 };
map T C { elements = 1:00:1 }
map T C { policy performance; elements = 1:00:1; size 123; flags timeout,constant; };
map T C { 
    policy performance; 
include "Secret-map-policy"
    elements = 1:00:1; 
    size 123; 
    flags timeout,constant; 
};
add map T C 
add map ip T C 
add map ip6 T C 
add map inet T C 
add map netdev T C 
add map bridge T C 
add map arp T C 
add map T C ;
add map T C { timeout 15:00:01 }
add map T C { gc-interval 1:00:1 }
add map T C { flags constant }
add map T C { flags interval; }
add map T C { flags timeout };
add map T C { flags dynamic ; } ;
add map T C { flags constant, interval, timeout, dynamic };
add map T C { flags constant; flags interval; flags timeout; flags dynamic };
add map T C { comment *A comment string* }
add map T C { comment "A comment string" }
add map T C { comment 'A comment string' }
add map T C { comment single-word }
add map T C { policy performance };
add map T C { policy memory };
add map T C { size 123 };
add map T C { elements = 1:00:1 }
map ip T C { typeof b };
map T C { typeof a.b.c.d.e.f };
add map T C { typeof a : interval g.h };
add map T C { typeof a : interval .i };
add map T C { typeof b.c.d.e.f : i.j };
add map T C { typeof b.c.d.e.f : counter  };
add map T C { typeof b.c.d.e.f : quota  };
add map T C { typeof b.c.d.e.f : limit  };
add map T C { typeof b.c.d.e.f : secmark  };
add map T C { typeof b.c.d.e.f : synproxy  };
add map T C { typeof b.c.d.e.f : ct timeout };
add map T C { typeof b.c.d.e.f : ct expectation };
add map T C { type time : };
add map T C { type string : };
add map T C { type mark : };
add map T C { type dscp : };
add map T C { type ecn : };
add map T C { type classid : };
add map T C { type mark.classid : };
add map T C { type time : interval };
add map T C { type time : interval time };
add map T C { type time : interval string; };
add map T C { type time : interval mark ; };
add map T C { type time : interval dscp   ;  }
add map T C { type time : interval ecn };
add map T C { type time : interval classid };
add map T C { 
    define A = -15 ;
    type time : interval classid
};
map 
map ip
map ip T
map ip6 T
map inet T
map netdev T
map bridge T
map arp T
map T C ;
map T C { timeout 15:00:01 }
map T C { typeof b.c.d.e.f : .k };
add set T C { counter }
add set T C { counter bytes 2048 }
add set T C { counter packets 3 }
add set T C { counter packets 3 counter packets 3 }
set ip T S { typeof b } ;
set T S { typeof a.b.c.d.e.f };
set T S { flags constant }
set T S { flags interval; }
set T S { flags timeout };
set T S { flags dynamic ; } ;
set T S { flags constant, interval, timeout, dynamic };
set T S { flags constant; flags interval; flags timeout; flags dynamic };
set T S { timeout 15:00:01 }
set T S { gc-interval 1:00:1 }
set T S { elements = 1:00:1 }
set T S { comment *A comment string* }
set T S { comment "A comment string" }
set T S { comment 'A comment string' }
set T S { comment single-word }
 set T S { comment single-word }
    set
add set T S;
add set ip T S { typeof b };
add set T S { typeof a.b.c.d.e.f };
add set T S { flags constant }
add set T S { flags interval; }
add set T S { flags timeout };
add set T S { flags dynamic ; } ;
add set T S { flags constant, interval, timeout, dynamic };
add set T S { flags constant; flags interval; flags timeout; flags dynamic };
add set T S { timeout 15:00:01 }
add set T S { gc-interval 1:00:1 }
add set T S { elements = 1:00:1 }
add set T S { comment *A comment string* }
add set T S { comment "A comment string" }
add set T S { comment 'A comment string' }
add set T S { comment single-word }
table A
table Z
table a
table z
table a0
table z0
table A/
table A\
table A_
table A.
table A
add table filter
table T  # that one creates an empty table
table xxxx
table last
table T { }
table T { } ; #
table inet xxxx { };
table bridge xxxx { };
table netdev xxxx { };
table arp xxxx { };
table my.IpTable
table my/IpTable
add table my/IpTable
add table my\IpTable    # defaults to 'ip' family
table my./_IpTable
add table my./_IpTable
table my.IpTable
add table my.IpTable
add table my_./\IpTable    # defaults to 'ip' family
table T {
    include "file"
}
table T { define A = 1 }
table T { 
    define A = 1 
    define A = 1 ;
    define last = 1
    define last = 1 ;
    define A = {} ;
}
table T { redefine A = 1 }
table T { redefine A = 1; }
table T { 
    redefine A = 1
    redefine A = 1 ;
}
table T {
    undefine A
    undefine B 
}
table xxxx { undefine abc ; }
table xxxx { undefine abc ; } ; 
table T { 
    comment Hello
    comment Hello
    comment Hello
    comment Hello 
} 
table bridge T { comment 'Hello world!' }
table T { comment "Hello world!" }
table T { comment *Hello world!* }
table netdev xxxx { comment "test" } ;
table xxxx { comment 'test' };
table T { comment *Hello world!* ;  }
table arp xxxx { comment test;  };
table T {flags member_1}
table T {flags member_1;}
table T {flags member_1;};
table T {flags member_1 ;}
table T {flags member_1; }
table T {flags member_1 ; }
table T {flags member_1 ;};
table T {flags member_1; };
table T {flags member_1 ; };
table T { flags member_1 }
table T { flags member_1; }
table T {flags member_2,member_3}
table T { flags member_2, member_3 }
table T { flags member_1; } ;
table T { flags member_2,member_3} ; 
table T { flags member_2, member_3 } ; 
table T { flags member_1 } ;
table ip xxxx { flags a, b, c};
table xxxx { ; flags a, b, c; comment "new stuff"; };
table T { flags a, b, c; chain C { type  { }; };
table T { comment "unique, uh?"; flags a, b, c; chain C { type ; }; };
table xxxx {
    comment test;
    include "add-more-table-xxxx.nft";
};
table T { chain last }
table T { chain last; }
table T { chain last; };
table xxxx { 
    chain last  
}
table xxxx { 
    chain last; };
table T { chain C }
table T { chain C };
table T { chain C ; } ;
table T { chain C ; } ;
table T { chain C { }; };
table T { chain C { }; chain D { }; };
add table T { 
    chain C {
        comment asdf 
    }; 
    chain D { }; 
};
add table ip T { ip chain C { type ; }; } # comment ;   # supposed to be highlighted (incomplete type)
add table ip T { ip chain C { type ; }; } ;   # supposed to be highlighted (incomplete type)
table T { chain C { type filter hook ingress device $MY_DEVICE ; }; };
table T { chain C { type filter hook ingress device $MY_DEVICE ; }; };
table T { chain C { type filter hook ingress devices = $MY_DEVICE ; }; };
table T { chain C { type filter hook ingress devices = $MY_DEVICE }; };
table T { chain C { type filter hook ingress devices = { a }; }; };
table T { chain C { type filter hook ingress devices = { $a }; }; };
table ip MyTable { chain C { type filter hook ingress devices = { a }; };
table T { chain C { type filter hook ingress device eth0 priority 256 }; };
table T { chain C { type filter hook ingress device eth0 priority 1; } };
table T { chain C { type filter hook ingress device eth0 priority 1; } };
add table T { chain C { type filter hook ingress device eth0 priority 1; }; };
table T { chain C { policy $MYPOLICY; };};
table T { chain C { policy drop; };};
table T { chain C { policy accept; };};
table T { chain C { flags offload; }; };
table T { chain C { comment "asdf" ;  }; };
table T { chain C { rule define = 1; comment "asdf" ;  }; };
table T { chain C { devices=$MYDEVICE;  }; };
table T { chain C { devices =$MYDEVICE;  }; };
table T { chain C { devices= $MYDEVICE;  }; };
table T { chain C { xxx devices = $MYDEVICE;  }; };
table T { chain C { xxx devices = { $MYDEVICE,$SECONDDEVICE,"br0" }  }; };
table myIpTable { flags dormant; }
table netdev myNetdev { flags dormant; }
table bridge myBridge { flags dormant; }
table arp myArpTable { flags dormant; }
table ip myIpTable { flags dormant; }
table ip6 myIp6Table { flags dormant; }
table inet myInetTable { flags dormant; }
table xxxx { undefine abc; chain last { undefine abc; }; };
table inet MyIpNet {
    chain MyForwardChain {
        type filter hook prerouting device wlan0 priority 1;
        flags offload;
        policy drop;
        policy accept;
    }
    flags a, b, c
    comment "unique"
};
table xxxx { chain last {
    undefine abc;
    include "file";
    define a = 123;
}; };
table arp A0b_._/RP_TABLE {
    chain ARP_INPUT_FILTER {
        define a = 123;
        type filter hook input priority table_id;
        policy drop;
        counter log drop
    }
    chain ARP_INPUT_FILTER {
        type filter hook prerouting priority 0;
        policy drop;
        counter log return
    }
    chain workstation_arp_filter_output {
        type filter hook output priority 0;
        policy drop;
        counter log drop
    }
}
table netdev A {
    chain a { 
        type filter hook ingress device lo priority -100; policy accept
        chain a { type };
        udp dport 53 ether type 0x8006 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set numgen inc mod 2 map {  0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
    };
    chain b { }
}
table netdev A {
    chain a { };
    chain b { };
    chain c { };
}
table netdev A {
    chain a { }; chain b { }; chain c { };
}
table netdev NETDEV_TABLE {
    # mind the NIC, it must exists
    chain ingress_filter_netdev_lo { 
        type filter hook ingress device lo priority -100; policy accept
        udp dport 53 ether type 0x8006 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set numgen inc mod 2 map {  0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
    };
    chain red_ingress_netdev_eth0 { 
        # You'll get a cryptic error if 'device eth0' is missing after 'chain'
        type filter hook ingress device eth0 priority -100; 
        policy accept;
        # tcp dport 80 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set jhash ip saddr . tcp sport mod 2 map { 0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
        udp dport 53 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set numgen inc mod 2 map {  0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
    }
}
table bridge workstation_bridge {
    chain workstn_bridge_filter_input {
        type filter hook input priority -200;
        ct state established,related accept # handle 4
        policy accept;
        ct helper ftp-standard {
            type "ftp" protocol tcp
        }
    }
    chain workstn_bridge_filter_output {
        type filter hook output priority -200;
        policy accept;
    }
    chain workstn_bridge_filter_forward {
        type filter hook forward priority -200;
        # default drop on all bridge forwarding
        policy drop;

        oif eth0 ip protocol icmp icmp type echo-request accept
        iif eth0 ip protocol icmp icmp type echo-reply accept
        counter log drop
    }
}
table inet INET_TABLE {
define interface_name2 = "br0"
    chain workstation_inet_filter_input {
        # Things that make this chain unique (input, filter)
        type filter hook input priority 0;
        policy drop;
        iif lo accept
        # Things that make this chain unique ('eth0', input, filter)
        # meta iifname != $interface_name2 drop;  # workstation wants all intfs
        # Let things back in if they've been established before new firewall
        ct state established,related accept;
        #  DNS 
        tcp dport 53 counter accept 
        udp dport 53 counter accept 
        #  Multicast DNS 
        tcp dport 5353 counter accept
        # RFC 6092 - Simple Security in IPv6 Gateway CPE
        # recommends that the DEFAULT
        #   operating mode for residential IPv6 simple security be to treat
        #   Generic Packet Tunneling [RFC2473] and similar protocols as opaque
        #   transport layers, i.e., inbound tunnel initiations are denied and
        #   outbound tunnel initiations are accepted.

        # To facilitate the use of IPsec in support of IPv6
        # mobility, the Internet Key Exchange (IKE) protocol [RFC5996] and the
        # Host Identity Protocol (HIP) [RFC5201] should also be permitted in
        # the DEFAULT operating mode.

        #  Workstation
        icmp type {
            destination-unreachable, 
            time-exceeded, 
            parameter-problem
        } counter accept

        # Router/Gateway
        icmp type {
            destination-unreachable, 
            redirect, 
            time-exceeded, 
            parameter-problem, 
            router-advertisement, 
            router-solicitation
            } counter accept

        # All ICMP
        icmp type {
            echo-reply, 
            destination-unreachable, 
            source-quench, redirect, 
            echo-request, 
            time-exceeded, 
            parameter-problem, 
            timestamp-request, 
            timestamp-reply, 
            info-request, 
            info-reply, 
            address-mask-request, 
            address-mask-reply, 
            router-advertisement, 
            router-solicitation
            } counter accept

        tcp dport 25 counter accept    # smtp
        tcp dport 465 counter accept   # submission
        # SSH server
        tcp dport ssh counter accept 
        
        tcp dport 514 counter accept    # syslog
        tcp dport 6514 counter accept   # secured syslog

        tcp dport 80 counter accept 
        tcp dport 443 counter accept 

        # IP-specific
        # meta ip goto workstation_inet_filter_input_ip
        # meta ip6 goto workstation_inet_filter_input_ip6
        # meta vlan goto workstation_inet_filter_input_vlan
        # meta arp goto workstation_inet_filter_input_arp

        # Just in case that someone screws up our 'policy drop'

        # multi-family reject, using the icmpx keyword
        counter log reject with icmpx type admin-prohibited
    };
    # ARP filter input
    chain workstation_arp_filter_input {
        counter log reject
    }
    # ARP filter output
    chain workstation_arp_filter_output {
        #  Multicast DNS 
        tcp dport 5353 counter accept
        #  DNS 
        tcp dport 53 counter accept 
        udp dport 53 counter accept 

        #  Workstation
        icmp type {
            destination-unreachable, 
            time-exceeded, 
            parameter-problem
            } counter accept

        # Router/Gateway
        icmp type {
            destination-unreachable, 
            redirect, 
            time-exceeded, 
            parameter-problem, 
            router-advertisement, 
            router-solicitation
            } counter accept

        # All ICMP
        icmp type {
            echo-reply, 
            destination-unreachable, 
            source-quench, redirect, 
            echo-request, 
            time-exceeded, 
            parameter-problem, 
            timestamp-request, 
            timestamp-reply, 
            info-request, 
            info-reply, 
            address-mask-request, 
            address-mask-reply, 
            router-advertisement, 
            router-solicitation
            } counter accept

        tcp dport 25 counter accept    # smtp
        tcp dport 465 counter accept   # submission
        # SSH server
        tcp dport ssh counter accept 

        tcp dport 514 counter accept    # syslog
        tcp dport 6514 counter accept   # secured syslog

        tcp dport 80 counter accept 
        tcp dport 443 counter accept 

        counter log reject
    }
    #IPv6 filtering
    chain workstation_ip6_filter_input {
        counter log reject
    }
    #IPv6 filtering
    chain workstation_inet_filter_input_ip6 {
        counter log reject
    }
    #IPv6 filtering
    chain workstation_inet_filter_input_ip6 {
        counter log reject
    }
}
table ip workstn_ip_nat {
    chain workstn_ip_nat_postrouting {
        type nat hook postrouting priority 0;
        #Likewise, in iptables NAT (source NAT):
        # % iptables -t nat -A POSTROUTING -s 192.168.1.1 -j SNAT --to-source 1.1.1.1
        # % iptables -t nat -A POSTROUTING -s 192.168.2.2 -j SNAT --to-source 2.2.2.2
        # % iptables -t nat -A POSTROUTING -s 192.168.3.3 -j SNAT --to-source 3.3.3.3

        # Translated to a nftables one-liner:

        # snat ip saddr map { 
        #     192.168.1.1 : 1.1.1.1, 
        #     192.168.2.2 : 2.2.2.2, 
        #     192.168.3.3 : 3.3.3.3 
       #  }
    }
}
table inet raw {
    chain prerouting {
        type filter hook prerouting priority -300;
        ct zone set iif map { "eth1" : 1, "veth1" : 2 }
    };
    chain output {
        type filter hook output priority -300;
        ct zone set oif map { "eth1" : 1, "veth1" : 2 }
    }
}
table inet filter {
    chain input {
        type filter hook input priority 0; policy accept;
        ct state established,related accept # handle 4
        ip saddr 10.1.1.1 tcp dport ssh accept # handle 5
    }
}
table ip my_filter_table {
    set my_connlimit {
        type ipv4_addr
        size 65535
        flags dynamic
    }

    chain my_output_chain {
        type filter hook output priority filter; policy accept;
        ct state new add @my_connlimit { ip daddr ct count over 20 } counter packets 0 bytes 0 drop
   }
}
table ip filter {
    set myset {
        type inet_service
        flags timeout
        elements = { http expires 9s}
    }

    chain input {
        type filter hook input priority 0; policy accept;
        update @myset { tcp dport timeout 1m }
    }
}
table ip filter {
    set myset {
        type ipv4_addr
        elements = { 1.1.1.1 }
    }

    chain input {
        type filter hook input priority 0; policy accept;
        add @myset { ip saddr }
    }
}
table inet myfilter {
    set myset {
        type ipv4_addr
        flags timeout
        elements = { 10.0.0.1 timeout 10s expires 8s}
    }
}
table ip filter {
    chain input {
        type filter hook input priority 0;
        # accept traffic originated from us
        ct state established,related accept
        # accept any localhost traffic
        iif lo accept
        # count and drop any other traffic
        counter drop
    }
}
table ip6 filter {
    chain input {
        type filter hook input priority 0;
        # accept any localhost traffic
        iif lo accept
        # accept traffic originated from us
        ct state established,related accept
        # accept neighbour discovery otherwise connectivity breaks
        icmpv6 type { nd-neighbor-solicit, echo-request, nd-router-advert, nd-neighbor-advert } accept
        # count and drop any other traffic
        counter drop
    }
}
table inet filter {
    chain input {
        type filter hook input priority 0;
        # accept any localhost traffic
        iif lo accept
        # accept traffic originated from us
        ct state established,related accept
        # accept neighbour discovery otherwise connectivity breaks
        ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, echo-request, nd-router-advert, nd-neighbor-advert } accept
        # count and drop any other traffic
        counter drop
    }
}
table inet filter {
    chain global {
        ct state established,related accept
        ct state invalid drop
        ip protocol icmp accept
        ip6 nexthdr icmpv6 accept
        udp dport 53 accept
    }
    set myset_ipv4 {
        type ipv4_addr;
        elements = { $server1_ipv4 , $workstation1_ipv4 }
    }
    set myset_ipv6 {
        type ipv6_addr;
        elements = { $server1_ipv6 , $workstation1_ipv6 }
    }
    chain dmz_in {
        # your rules for traffic to your dmz servers
        ip saddr @myset_ipv4
        ip6 saddr @myset_ipv6
    }
    chain dmz_out {
        # your rules for traffic from the dmz to internet
    }
    chain lan_in {
        # your rules for traffic to your LAN nodes
    }
    chain lan_out {
        # your rules for traffic from the LAN to the internet
    }
    chain forward {
        type filter hook forward priority 0; policy drop;
        jump global
        oifname vmap { $nic_dmz : jump dmz_in , $nic_lan : jump lan_in }
        oifname $nic_inet iifname vmap { $nic_dmz : jump dmz_out , $nic_lan : jump lan_out }
    }
    chain input {
        type filter hook input priority 0 ; policy drop;
        jump global
        # your rules for traffic to the firewall here
    }
    chain output {
        type filter hook output priority 0 ; policy drop;
        jump global
        # your rules for traffic originated from the firewall itself here
    }
}
table inet portknock {
    set clients_ipv4 {
        type ipv4_addr
        flags timeout
    }
    set clients_ipv6 {
        type ipv6_addr
        flags timeout
    }
    set candidates_ipv4 {
        type ipv4_addr . inet_service
        flags timeout
    }
    set candidates_ipv6 {
        type ipv6_addr . inet_service
        flags timeout
    }
    chain input {
        type filter hook input priority -10; policy accept;
        iifname "lo" return
        tcp dport 123 add @candidates_ipv4 {ip  saddr . 234 timeout 1s}
        tcp dport 123 add @candidates_ipv6 {ip6 saddr . 234 timeout 1s}
        tcp dport 234 ip  saddr . tcp dport @candidates_ipv4 add @candidates_ipv4 {ip  saddr . 345 timeout 1s}
        tcp dport 234 ip6 saddr . tcp dport @candidates_ipv6 add @candidates_ipv6 {ip6 saddr . 345 timeout 1s}
        tcp dport 345 ip  saddr . tcp dport @candidates_ipv4 add @candidates_ipv4 {ip  saddr . 456 timeout 1s}
        tcp dport 345 ip6 saddr . tcp dport @candidates_ipv6 add @candidates_ipv6 {ip6 saddr . 456 timeout 1s}
        tcp dport 456 ip  saddr . tcp dport @candidates_ipv4 add @clients_ipv4 {ip  saddr timeout 10s} log prefix "Successful portknock: "
        tcp dport 456 ip6 saddr . tcp dport @candidates_ipv6 add @clients_ipv6 {ip6 saddr timeout 10s} log prefix "Successful portknock: "
        tcp dport $guarded_ports ip  saddr @clients_ipv4 counter accept
        tcp dport $guarded_ports ip6 saddr @clients_ipv6 counter accept
        tcp dport $guarded_ports ct state established,related counter accept
        tcp dport $guarded_ports counter reject with tcp reset
    }
}
table ip Inet4 {
    set Knocked_1 {
        type ipv4_addr
        flags timeout
        timeout 10s
        gc-interval 4s
    }
    set Knocked_2 {
        type ipv4_addr
        flags timeout
        timeout 10s
        gc-interval 4s
    }
    set Knocked_3 {
        type ipv4_addr
        flags timeout
        timeout 10s
        gc-interval 4s
    }
    set Knocked_4 {
        type ipv4_addr
        flags timeout
        timeout 2m
        gc-interval 4s
    }

    chain Knock_1 {
        set add ip saddr @Knocked_1
    }
    chain Unknock_1 {
        set update ip saddr timeout 0s @Knocked_1
    }
    chain Knock_2 {
        set update ip saddr timeout 0s @Knocked_1
        set add ip saddr @Knocked_2
    }
    chain Unknock_2 {
        set update ip saddr timeout 0s @Knocked_2
    }
    chain Knock_3 {
        set update ip saddr timeout 0s @Knocked_2
        set add ip saddr @Knocked_3
    }
    chain Unknock_3 {
        set update ip saddr timeout 0s @Knocked_3
    }
    chain Knock_4 {
        set update ip saddr timeout 0s @Knocked_3
        set add ip saddr @Knocked_4 log prefix "Port-Knock accepted: "
    }
    chain RefreshKnock {
        set update ip saddr timeout 2m @Knocked_4
    }
    chain PortKnock {
        ct state new ip saddr @Knocked_4 goto RefreshKnock
        tcp dport 456 ct state new ip saddr @Knocked_3 goto Knock_4
        tcp dport 345 ct state new ip saddr @Knocked_3 return
        ip saddr @Knocked_3 ct state new goto Unknock_3
        tcp dport 345 ct state new ip saddr @Knocked_2 goto Knock_3
        tcp dport 234 ct state new ip saddr @Knocked_2 return
        ip saddr @Knocked_2 ct state new goto Unknock_2
        tcp dport 234 ct state new ip saddr @Knocked_1 goto Knock_2
        tcp dport 123 ct state new ip saddr @Knocked_1 return
        ip saddr @Knocked_1 ct state new goto Unknock_1
        tcp dport 123 ct state new goto Knock_1
    }
    chain FilterIn {
        type filter hook input priority 0
        policy drop

        # allow established/related connections
        ct state established,related accept

        # early drop of invalid connections
        ct state invalid drop

        # allow from loopback
        meta iif lo accept

        # allow icmp
        ip protocol icmp accept

        # port-knocking
        jump PortKnock

        # misc. filtering
        # ...
    }
    chain FilterOut {
        type filter hook output priority 0
        policy accept
    }
}
table ip filter {
   map subnet_map {
       type ipv4_addr : verdict
       flags interval
       elements = { 10.20.255.48/29 : goto group_114, 10.20.255.88/29 : goto group_114,
                    10.20.255.128/29 : goto group_114 }
   }
   set priority_set {
       type ipv4_addr
       flags interval
       elements = { 8.8.8.8, 8.8.4.4 }
   }   
   map group_114 {
       type ipv4_addr : classid
       flags interval
       elements = { 10.20.255.50 : 1:ffd8, 10.20.255.90 : 1:ffd5,
                     10.20.255.130 : 1:ffd2 }
   }
   map group_114_prio {
       type ipv4_addr : classid
       flags interval
       elements = { 10.20.255.50 : 1:ffd9, 10.20.255.90 : 1:ffd6,
                     10.20.255.130 : 1:ffd3 }
   }   
   chain forward {
       type filter hook forward priority filter; policy accept;
       meta priority none ip daddr vmap @subnet_map counter packets 0 bytes 0
       meta priority none ip saddr vmap @subnet_map counter packets 0 bytes 0
       ip daddr 192.168.0.0/16 meta priority none meta priority set 1:ffff counter packets 0 bytes 0 log prefix "total - "
       ip saddr 192.168.0.0/16 meta priority none meta priority set 1:ffff counter packets 0 bytes 0 log prefix "total - "
       ip daddr 10.0.0.0/8 meta priority none meta priority set 1:ffff counter packets 38931 bytes 2926076 log prefix "total - "
       ip saddr 10.0.0.0/8 meta priority none meta priority set 1:ffff counter packets 14 bytes 1064 log prefix "total - "
       meta priority none meta priority set 1:2 counter packets 0 bytes 0 log prefix "non_shaped - "
   }
   chain input {
       type filter hook input priority filter; policy accept;
       meta priority none meta priority set 1:2 counter packets 419381 bytes 45041195
   }
   chain output {
       type filter hook output priority filter; policy accept;
       meta priority none meta priority set 1:2 counter packets 507779 bytes 51809859
   }
   chain group_114 {
       meta priority none ip saddr @priority_set meta priority set ip daddr map @group_114_prio counter packets 0 bytes 0
       meta priority none ip daddr @priority_set meta priority set ip saddr map @group_114_prio counter packets 0 bytes 0
       meta priority none meta priority set ip daddr map @group_114 counter packets 0 bytes 0
       meta priority none meta priority set ip saddr map @group_114 counter packets 0 bytes 0
       meta priority none meta priority set 1:ffff counter packets 0 bytes 0 log prefix "group_114 - "
   }
}
table inet foo {
    quota example { over 100 mbytes used 0 bytes }
    chain dropafterquota {
        type filter hook postrouting priority 0; policy accept;
        udp port 5060 quota name "example" drop
    }
}
table ip x {
    chain c {
        ct timeout set saddr map {
            192.168.0.14 :"policy1"
        }
    }
    ct timeout "policy1" {
        protocol tcp
        timeouts = {
            established: 120s
            fin_wait: 30;
        }
    }
}
table firewall {
  chain incoming {
    type filter hook input priority 0; policy drop;
    # established/related connections
    ct state established,related accept
    # loopback interface
    iifname lo accept
    # icmp
    icmp type echo-request accept
    # open tcp ports: sshd (22), httpd (80)
    tcp dport { ssh, http } accept
  }
}
table ip6 firewall {
  chain incoming {
    type filter hook input priority 0; policy drop;
    # established/related connections
    ct state established,related accept
    # invalid connections
    ct state invalid drop
    # loopback interface
    iifname lo accept
    # icmp
    # routers may also want: mld-listener-query, nd-router-solicit
    icmpv6 type { echo-request, nd-neighbor-solicit } accept
    # open tcp ports: sshd (22), httpd (80)
    tcp dport { ssh, http } accept
  }
}

table xxxx { undefine abc; chain last { chain last; undefine abc; }; };  # oopsie
chain T C { ip protocol jump C2 }
add chain T C { ip protocol jump C2 }
table T {
    chain C {
        ip protocol jump C2
    }
}
add table inet INET_TABLE
add table inet INET_TABLE { }
add table inet INET_TABLE {
    define interface_name2 = "br0";
}
table inet INET_TABLE {
    define interface_name2 = "br0";
    chain prerouting {
        # Things that make this chain unique (input, filter)
        type filter hook input priority 0; policy accept;
        iif lo accept
        # Things that make this chain unique ('eth0', input, filter)
        # meta iifname != $interface_name2 drop;  # workstation wants all intfs
        # Let things back in if they've been established before new firewall
        ct state established,related accept;
        #  DNS
        tcp dport 53 counter accept
        udp dport 53 counter accept
        #  Multicast DNS
        tcp dport 5353 counter accept
        # RFC 6092 - Simple Security in IPv6 Gateway CPE
        # recommends that the DEFAULT
        #   operating mode for residential IPv6 simple security be to treat
        #   Generic Packet Tunneling [RFC2473] and similar protocols as opaque
        #   transport layers, i.e., inbound tunnel initiations are denied and
        #   outbound tunnel initiations are accepted.

        # To facilitate the use of IPsec in support of IPv6
        # mobility, the Internet Key Exchange (IKE) protocol [RFC5996] and the
        # Host Identity Protocol (HIP) [RFC5201] should also be permitted in
        # the DEFAULT operating mode.
        #  Workstation
        icmp type {
            destination-unreachable,
            time-exceeded,
            parameter-problem
        } counter accept

        # Router/Gateway
        icmp type {
            destination-unreachable,
            redirect,
            time-exceeded,
            parameter-problem,
            router-advertisement,
            router-solicitation,
            router-solicitation
            } counter accept

        # All ICMP
        icmp type {
            echo-reply,
            destination-unreachable,
            source-quench, redirect,
            echo-request,
            time-exceeded,
            parameter-problem,
            timestamp-request,
            timestamp-reply,
            info-request,
            info-reply,
           address-mask-request,
            address-mask-reply,
            router-advertisement,
            router-solicitation
            } counter accept

        tcp dport 25 counter accept    # smtp
        tcp dport 465 counter accept   # submission
        # SSH server
        tcp dport ssh counter accept

        tcp dport 514 counter accept    # syslog
        tcp dport 6514 counter accept   # secured syslog
        tcp dport 80 counter accept
        tcp dport 443 counter accept

        # IP-specific
        # meta ip goto workstation_inet_filter_input_ip
        # meta ip6 goto workstation_inet_filter_input_ip6
        # meta vlan goto workstation_inet_filter_input_vlan
        # meta arp goto workstation_inet_filter_input_arp

        # Just in case that someone screws up our 'policy drop'

        # multi-family reject, using the icmpx keyword
        counter log reject with icmpx type admin-prohibited
    };
    # ARP filter input
    chain prerouting {
        type filter hook input priority 0;
        policy drop;
        counter log reject
    }
    # ARP filter output
    chain filter {
        type filter hook input priority 0;
        policy drop;
        #  Multicast DNS
        tcp dport 5353 counter accept
        #  DNS
        tcp dport 53 counter accept
        udp dport 53 counter accept

        #  Workstation
        icmp type {
            destination-unreachable,
            redirect,
            time-exceeded,
            parameter-problem,
            router-advertisement,
            router-solicitation
            } counter accept
       # All ICMP
        icmp type {
            echo-reply,
            destination-unreachable,
            source-quench, redirect,
            echo-request,
            time-exceeded,
            parameter-problem,
            timestamp-request,
            timestamp-reply,
            info-request,
            info-reply,
            address-mask-request,
            address-mask-reply,
            router-advertisement,
            router-solicitation
           } counter accept

        tcp dport 25 counter accept    # smtp
        tcp dport 465 counter accept   # submission
        # SSH server
        tcp dport ssh counter accept

        tcp dport 514 counter accept    # syslog
        tcp dport 6514 counter accept   # secured syslog

        tcp dport 80 counter accept
        tcp dport 443 counter accept

        counter log reject
    }
    #IPv6 filtering
    chain prerouting {
        counter log reject
    }
    #IPv6 filtering
    chain filter {
        counter log reject
    }
    #IPv6 filtering
    chain workstation_inet_filter_input_ip6 {
        counter log reject
    }
}
table_identifier
identifier_table
include
define
redefine
undefine
ip T C 
replace rule
create set
insert rule T C log 
insert rule T C handle 1 log 
delete rule T C handle 1 log
delete rule T C handle 1 ct l3proto 
get 
list tables ip
reset counter T C
flush table
rename $a b c
import json
export vm json
monitor 
describe  $A = 1
destroy counter
table table.id
 chain T C 
rule <stmt>
set table_id set_id 
map table_id
flowtable table_id
element table_id
counter table_id
quota table_id
ct table_id
limit table_id
secmark table_id
synproxy table_id
add xtable_id
add table table\id
add table table/id
add table table_id
add table table.id
add table table.id
add chain table/id
add rule <stmt>
add set table_id chain_id 
add map table_id
add flowtable table_id
add element table_id
add counter table_id
add quota table_id
add ct table_id
add limit table_id
add secmark table_id
add synproxy table_id

abort
accept
ackseq
addr
ah
all
&
arp
a-rwnd
asconf
asconf-ack
*
at
automerge
avgpkt
bridge
burst
bypass
bytes
~
cfi
cgroup
cgroupv2
chains
checksum
chunk
classid
code
:
,
comment
comp
constant
continue
cookie-ack
cookie-echo
count
counters
cpi
cpu
csumcov
cum-tsn-ack
cwr
daddr
-
data
day
dccp
dei
device
devices
direction
dnat
doff
.
dport
drop
dscp
dst
dup
dynamic
echo
ecne
ecn
element 
add element 
add elements
= /$/
=
error
esp
ether
event
exists
expectation
expiration
expires
exthdr
fanout
fastopen
fib
flags
flow
flowlabel
flowtables
forward-tsn
frag
frag-off
fully-random
fwd
gateway
gc-interval
get
goto
group
>
>=
handle
hbh
hdrlength
hdrversion
heartbeat
heartbeat-ack
helper
helpers
hlen
hook
hooks
hoplimit
hour
htype
ibridgename
ibriport
icmp
6icmp6
icmpx
id
igmp
iif
iifgroup
iifname
iiftype
in
inc
index
inet
init-ack
init-tag
init-tsn
init
interval
ip
6ip6
ipsec
jhash
json
jump
3l3protocol
label
last
last-ent
left
length
level
limits
ll-hdr
log
lowest-tsn
lshift
lsrr
<
<=
maps
mark
masquerade
maxdelay
5md5sig
memory
meta
meter
meters
mh
minute
missing
mod
more-fragments
mptcp
mrt
mss
mtu
name
<>
netdev T C 
network-hdr
never
new-cum-tsn
nexthdr
nexthop
nftrace
nop
!
notrack
num-dup-tsns
num-gack-blocks
numgen
num-istreams
num-ostreams
obridgename
obriport
offload
offset
oif
oifgroup
oifname
oiftype
operation
option
options
original
osf
out
over
packets
pcp
performance
persistent
pkttype
plen
plus
policy
port
position
ppid
pptr
prefix
priority
protocol
proto-dst
proto-src
ptr
ptype
queue
queuenum
queue-threshold
quotas
ra
random
rate
redirect
reject
reply
reqid
reserved
2reserved2
return
right
rr
rshift
rt
0rt0
2rt2
4rt4
rtclassid
rules
ruleset
sack
0sack0
1sack1
2sack2
3sack3
sack-perm
saddr
sctp
secmarks
second
seed
seg-left
seqno
sequence
sets
shutdown
shutdown-ack
shutdown-complete
sid
size
skgid
skuid
/
snaplen
snat
socket
spi
spnum
sport
ssn
ssrr
state
status
stream
string
subtype
symhash
synproxys
tables
tag
tcp
time
timeout
timestamp
to
tproxy
trace
transparent
transport-hdr
tsecr
tsn
tsval
ttl
type
typeof
udp
udplite
until
update
urgptr
used
value
vlan
vm
vmap
vtag
week
wildcard
window
with
wscale
xml
xt
zone
;

counter table_id counter_id
add counter table_id counter_id   
add counter table_id counter_id ;
add counter table_id counter_id { counter_config }
add counter table_id counter_id { packets 5 bytes 1500 } ;
add counter table_id counter_id { packets 5 bytes 1500 } ;
add set T S { counter }
add set T S { counter } ;
add set T S { counter bytes 2048 }
add set T S { counter packets 3 }
add set T S { counter packets 3 counter packets 3 }
create table myIpTable 
create table my.IpTable
create table my/IpTable
create table my_IpTable
create table my./_IpTable
create table netdev myNetdev 
create table bridge myBridge 
create table arp myArpTable 
create table ip myIpTable 
create table ip6 myIp6Table 
create table inet myInetTable 
create table myIpTable { flags dormant; }
create table netdev myNetdev { flags dormant; }
create table bridge myBridge { flags dormant; }
create table arp myArpTable { flags dormant; }
create table ip myIpTable { flags dormant; }
create table ip6 myIp6Table { flags dormant; }
create table inet myInetTable { flags dormant; }
create chain myIpTable myIpChain
create chain netdev myNetdevTable myNetdevTable 
create chain bridge myBridgeTable myBridgeChain 
create chain arp myArpTable myArpChain 
create chain ip myIpTable myIpChain 
create chain ip6 myIp6Table myIp6Chain 
create chain inet myInetTable myInetChain 
create chain myIpTable myIpChain { type filter hook prerouting priority 0; policy drop; } ;
create chain myIpTable myIpChain { type filter hook input priority 0; policy drop;};
create chain myIpTable myIpChain { type filter hook forward priority 0; policy drop;}
create chain myIpTable myIpChain { type filter hook output priority 0; policy drop;}
create chain myIpTable myIpChain { type filter hook postrouting priority 0; policy drop;}
create chain myIpTable myIpChain { type filter hook input device eth0 priority 0; policy drop;}
create chain arp myArpTable myArpChain { type filter hook input priority 0; policy accept; }
create chain arp myArpTable myArpChain { type filter hook input priority 0; policy accept; }
create chain arp myArpTable myArpChain { type filter hook output priority 0; policy accept; }
create chain arp myArpTable myArpChain { type filter hook input device eth0 priority 0; policy accept; }
create chain bridge myBridgeTable myBridgeChain { type filter hook input priority 0; policy accept; }
create chain bridge myBridgeTable myBridgeChain { type filter hook output priority 0; policy accept; }
create chain bridge myBridgeTable myBridgeChain { type filter hook input device eth0 priority 0; policy accept; }
create chain netdev myNetdevTable myNetdevChain 
create chain netdev myNetdevTable myNetdevChain { type filter hook ingress device vlan0 priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook prerouting priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook input priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook forward priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook output priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook postrouting priority 0; policy accept; }
create chain ip myIpTable myIpChain { type nat hook prerouting priority 0; policy accept; }
create chain ip myIpTable myIpChain { type nat hook input priority 0; policy accept; }
create chain ip myIpTable myIpChain { type nat hook output priority 0; policy accept; }
create chain ip myIpTable myIpChain { type nat hook postrouting priority 0; policy accept; }
create chain ip myIpTable myIpChain { type route hook output priority 0; policy accept; }
create chain ip myIpTable myIpChain { type filter hook input device eth0 priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook prerouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook input priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook forward priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook output priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook postrouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type nat hook prerouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type nat hook input priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type nat hook output priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type nat hook postrouting priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type route hook output priority 0; policy accept; }
create chain ip6 myIp6Table myIp6Chain { type filter hook input device eth0 priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook prerouting priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook input priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook forward priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook output priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook postrouting priority 0; policy accept; }
create chain inet myInetTable myInetChain { type nat hook prerouting priority 0; policy accept; }
create chain inet myInetTable myInetChain { type nat hook input priority 0; policy accept; }
create chain inet myInetTable myInetChain { type nat hook output priority 0; policy accept; }
create chain inet myInetTable myInetChain { type nat hook postrouting priority 0; policy accept; }
create chain inet myInetTable myInetChain { type route hook output priority 0; policy accept; }
create chain inet myInetTable myInetChain { type filter hook input device eth0 priority 0; policy accept; }
create chain netdev myIpTable myIpChain { type filter hook ingress devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create chain bridge myBridgeTable myBridgeChain { type filter hook prerouting devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create chain arp myArpTable myArpChain { type filter hook input devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create chain ip myIpTable myIpChain { type nat hook postrouting devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create chain ip6 myIp6Table myIp6Chain { type filter hook input devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create chain inet myInetTable myInetChain { type route hook output devices = { eth0, eth1, eth2 } priority 0; policy drop;}
create set my_filter_table my_ssh_meter { type ipv4_addr . inet_proto; flags dynamic ;}
create set my_filter_table my_ssh_meter { type ipv4_addr . inet_service; flags timeout;}
create map myIpTable myIpMap { flags interval; elements = { ipv4_addr }; size 1200; policy performance; }
create map netdev myNetdevTable myNetdevMap { flags interval; elements = { ether_addr }; size 1200; policy performance; }
create map bridge myBridgeTable myBridgeMap { flags interval; elements = { ether_addr }; size 1200; policy performance; }
create map arp myArpTable myArpMap { flags interval; elements = { ipv4_addr }; size 1200; policy performance; }
create map ip myIpTable myIpMap { type inet_service: ipv4_addr; flags interval; elements = { ipv4_addr }; size 1200; policy performance; }
create map ip6 myIp6Table myIp6Map { flags interval; elements = { ipv6_addr }; size 1200; policy performance; }
create map inet myInetTable myInetMap { 
    flags interval; 
    size 1200; 
    elements = { $inet_proto;  }  
    elements = { inet_proto };  
    policy performance; 
};
create map inet myInetTable myInetMap { type mark; flags interval; elements = { inet_proto }; size 1200; policy performance; }
create map inet myInetTable myInetMap { 
    type mark; 
    flags interval; 
    elements = { inet_proto }; 
    size 1200; 
    policy performance; 
};
create flowtable myIpTable myIpFT { hook input priority 0; devices = { br0, eth0, eth1} ; }
create flowtable ip myIpTable myIpFT { hook input priority 0; devices = { eth0, eth1 } ; }
create flowtable ip6 myIp6Table myIp6FT { hook input priority 0; devices = { br0, eth0 } ; }
create flowtable inet myInetTable myInetFT { hook input priority 0; devices = { br0, eth1 } ; }
create element netdev myNetdevTable myNetdevSet { 10.20.255.48/29 : goto group_114, 10.20.255.88/29 : goto group_114, 10.20.255.128/29 : goto group_114 } 
create element arp myArpTable myArpSet { 10.20.255.50 : 1:ffd8, 10.20.255.90 : 1:ffd5, 10.20.255.130 : 1:ffd2 }
create element ip myIpTable myIpSet { 10.20.255.88/29 : goto group_114 }
create element ip6 myIp6Table myIp6Set { 10.20.255.128/29 : goto group_114 }
create element inet myInetTable myInetSet { 10.20.255.50/32 : "1:0xffd9" }
create counter ip myIpTable https-filter
create counter ip myIpTable https-filter
create counter netdev myNetdevTable https-filter  
create counter bridge myBridgeTable https-filter  
create counter arp myArpTable https-filter  
create counter ip myIpTable https-filter  
create counter ip6 myIp6Table https-filter  
create counter inet myInetTable https-filter  
create quota filter http-quota over 25 mbytes
create quota netdev myIpfilter http-quota over 25 mbytes;
create quota bridge myIpfilter http-quota over 25 mbytes
create quota arp myIpfilter http-quota over 25 mbytes
create quota ip myIpfilter http-quota over 25 mbytes
create quota ip6 myIpfilter http-quota until 525 kbytes
create quota inet myIpfilter http-quota over 25 mbytes
create ct helper myIpTable myCTHchain { };
create ct helper myIpTable myCTHchain { ; }
create ct helper myIpTable myCTHchain { ; };
create ct helper myIpTable myCTHchain { type "sip" protocol tcp; l3proto ip; }
create ct helper ip myIpTable cth { type "sip" protocol tcp; l3proto ip; }
create ct timeout myIpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout netdev myNetdevTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout bridge myBridgeTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout arp myArpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout ip myIpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout ip6 myIp6Table ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout inet myInetTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout myTable agressive-tcp {
        l3proto ip;
        protocol tcp;
        policy = {established: 100, close_wait: 4, close: 4}
    }
create ct expectation myTable myExpectation { ; }
create ct expectation myTable myExpectation { ; } 
create ct expectation myTable e_pgsql {
        protocol tcp
        dport 5432
        timeout 1h
        size 12
        l3proto ip
    }
create limit myIpTable myIpLimit rate 1/second
create limit netdev myNetdevTable myNetdevLimit rate 1/minute
create limit bridge myBridgeTable myBridgeLimit rate 1/hour
create limit ip myIpTable myIpLimit rate 1/day
create limit ip6 myIp6Table myIp6Limit rate 1/week
create limit inet myInetTable myInetLimit rate 1/second
create limit myIpTable myIpLimit rate 1/second burst 15 packets
create secmark myTable myTable mySecMark 
create synproxy myTable synproxy_obj mss 1500 wscale 7;
create synproxy ip myTable synproxy_obj mss 1492 wscale 5;
create synproxy ip6 myTable synproxy_obj mss 1498 wscale 6;
create synproxy inet myTable synproxy_obj mss 1496 wscale 4;
create synproxy arp myTable synproxy_obj mss 1512  wscale 2;
create synproxy bridge myTable synproxy_obj mss 1518 wscale 3;
create synproxy netdev myTable synproxy_obj mss 1593 wscale 1
ct helper table_id ct_id { }
ct helper ip table_id ct_id { ; };
ct helper ip table_id ct_id { 
    include "ct-helper-rules.nft"; 
};
ct helper ip table_id ct_id { 
    define X = 1;
};
ct helper ip table_id ct_id { 
    redefine X = 1;
};
ct helper ip table_id ct_id { 
    undefine X;
};
ct helper table_id { type "sip" protocol tcp; l3proto ip; }
ct helper ip table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper ip6 table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper inet table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper arp table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper bridge table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper netdev table_id cth { type "sip" protocol tcp; l3proto ip; }
ct helper ip table_id ct_id l3proto zone set ip6 table_id { };
ct helper ip6 table_id ct_id l3proto type sip zone set ip6 { };
ct helper inet table_id ct_id l3proto zone set ip6 table_id { };
ct helper netdev table_id ct_id l3proto zone set ip6 table_id { };
ct helper bridge table_id ct_id l3proto zone set ip6 table_id { };
ct helper arp table_id ct_id l3proto zone set ip6 table_id { };
rule ct helper ip table_id ct_id l3proto zone set ip6 table_id { };
rule ct helper ip6 table_id ct_id l3proto type sip zone set ip6 { };
rule ct helper inet table_id ct_id l3proto zone set ip6 table_id { };
rule ct helper netdev table_id ct_id l3proto zone set ip6 table_id { };
rule ct helper bridge table_id ct_id l3proto zone set ip6 table_id { };
rule ct helper arp table_id ct_id l3proto zone set ip6 table_id { };
add rule ct helper ip table_id l3proto zone set ip6 table_id { };
add rule ct helper ip6 table_id l3proto type sip zone set ip6 { };
add rule ct helper inet table_id l3proto zone set ip6 table_id { };
add rule ct helper netdev table_id l3proto zone set ip6 table_id { };
add rule ct helper bridge table_id l3proto zone set ip6 table_id { };
add rule ct helper arp table_id l3proto zone set ip6 table_id { };
add rule table_id chain_id { ct helper ip table_id type l3proto zone set ip6 { }; }
add rule table_id chain_id { ct helper ip table_id type l3proto zone set ip6 { }; }
ct timeout  l3proto zone set ip6 table_id { };
ct timeout table_id ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout netdev myNetdevTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout bridge myBridgeTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout arp myArpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout ip table_id ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout ip6 myIp6Table ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout inet myInetTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
ct timeout table_id agressive-tcp {
        l3proto ip;
        protocol tcp;
        policy = {established: 100, close_wait: 4, close: 4}
    }
table ip filter {  # nftables manpage
    ct timeout customtimeout {
        protocol tcp;
        l3proto ip
        policy = { established: 120, close: 20 }
    }

    chain output {
        type filter hook output priority filter; policy accept;
        ct timeout set "customtimeout"
    }
}
ct expectation  l3proto zone set ip6 table_id { };
ct expectation table_id myExpectation { ; } 
ct expectation table_id e_pgsql {
        protocol tcp
        dport 5432
        timeout 1h
        size 12
        l3proto ip
    }
create ct helper table_id { };
create ct helper table_id { ; }
create ct helper table_id { ; };
create ct helper table_id { type "sip" protocol tcp; l3proto ip; }
create ct helper ip table_id cth { type "sip" protocol tcp; l3proto ip; }
create ct timeout
create ct timeout table_id ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout netdev myNetdevTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout bridge myBridgeTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout arp myArpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout ip table_id ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout ip6 myIp6Table ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout inet myInetTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
create ct timeout table_id agressive-tcp {
        l3proto ip;
        protocol tcp;
        policy = {established: 100, close_wait: 4, close: 4}
    }
create ct expectation table_id myExpectation { ; }
create ct expectation table_id myExpectation { ; } 
create ct expectation table_id e_pgsql {
        protocol tcp
        dport 5432
        timeout 1h
        size 12
        l3proto ip
    }
list ct expectation table_id ct_id
list ct expectation ip table_id ct_id
list ct expectation ip6 table_id ct_id
list ct expectation inet table_id ct_id
list ct expectation netdev table_id ct_id
list ct expectation bridge table_id ct_id
list ct expectation arp table_id ct_id
list ct expectation table table_id
list ct expectation table ip table_id
list ct expectation table ip6 table_id
list ct expectation table inet table_id
list ct expectation table netdev table_id
list ct expectation table bridge table_id
list ct expectation table arp table_id
list ct helper table_id ct_id
list ct helper ip table_id ct_id
list ct helper ip6 table_id ct_id
list ct helper net table_id ct_id
list ct helper netdev table_id ct_id
list ct helper bridge table_id ct_id
list ct helper arp table_id ct_id
list ct helpers table table_id
list ct helpers table ip table_id
list ct helpers table ip6 table_id
list ct helpers table inet table_id
list ct helpers table netdev table_id
list ct helpers table bridge table_id
list ct helpers table arp table_id
list ct timeout table_id ct_id
list ct timeout ip table_id ct_id
list ct timeout ip6 table_id ct_id
list ct timeout inet table_id ct_id
list ct timeout netdev table_id ct_id
list ct timeout bridge table_id ct_id
list ct timeout arp table_id ct_id
list ct timeout table table_id
list ct timeout table ip table_id
list ct timeout table ip6 table_id
list ct timeout table inet table_id
list ct timeout table netdev table_id
list ct timeout table bridge table_id
list ct timeout table arp table_id
list ct helper table_id {}
list ct helper table_id { };
list ct helper table_id { ; }
list ct helper table_id { ; };
delete ct helper table_id ct_id
delete ct helper ip table_id ct_id
delete ct helper ip6 table_id ct_id
delete ct helper inet table_id ct_id
delete ct helper netdev table_id ct_id
delete ct helper bridge table_id ct_id
delete ct helper arp table_id ct_id
delete ct helper table_id {}
delete ct helper table_id { };
delete ct timeout
delete ct expectation
destroy ct helper
destroy ct timeout
destroy ct expectation
destroy ct helper table_id {}
destroy ct helper table_id { };
table_id myChain position 1 ct helper set ip6 table_id myCTHchain { };
table_id myChain position 1 ct original set ip table_id myCTHchain { };
table_id myChain position 1 ct reply set inet table_id myCTHchain { };
ip6 table_id myChain position 1 ct helper set ip6 table_id myCTHchain { };
ip6 table_id myChain position 1 ct original set ip table_id myCTHchain { };
ip6 table_id myChain position 1 ct reply set inet table_id myCTHchain { };
rule ip6 table_id myChain position 1 ct helper set ip6 table_id myCTHchain { };
rule ip6 table_id myChain position 1 ct original set ip table_id myCTHchain { };
rule ip6 table_id myChain position 1 ct reply set inet table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct proto zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct mark zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct state zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct direction zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct status zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct expiration zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct helper zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct saddr zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct daddr zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct proto-src zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct proto-dst zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct label zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct event zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct secmark zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct id zone set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct bytes set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct packets set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct avgpkt set ip6 table_id myCTHchain { };
add rule ip6 table_id myChain position 1 ct zone set ip6 table_id myCTHchain { };
add rule table_id myChain ct state { new, established, related, untracked }
add rule table_id myChain ct state != related
add rule table_id myChain ct state established
add rule table_id myChain ct state 8
add rule table_id myChain ct direction original
add rule table_id myChain ct direction != original
add rule table_id myChain ct direction { reply, original }
add rule table_id myChain ct status expected
add rule table_id myChain (ct status & expected) != expected
add rule table_id myChain ct status { expected, seen-reply, assured, confirmed, snat, dnat, dying }
add rule table_id myChain ct mark 0
add rule table_id myChain ct mark or 0x23 == 0x11
add rule table_id myChain ct mark or 0x3 != 0x1
add rule table_id myChain ct mark and 0x23 == 0x11
add rule table_id myChain ct mark and 0x3 != 0x1
add rule table_id myChain ct mark xor 0x23 == 0x11
add rule table_id myChain ct mark xor 0x3 != 0x1
add rule table_id myChain ct mark 0x00000032
add rule table_id myChain ct mark != 0x00000032
add rule table_id myChain ct mark 0x00000032-0x00000045
add rule table_id myChain ct mark != 0x00000032-0x00000045
add rule table_id myChain ct mark { 0x32, 0x2222, 0x42de3 }
add rule table_id myChain ct mark { 0x32-0x2222, 0x4444-0x42de3 }
add rule table_id myChain ct mark set 0x11 xor 0x1331
add rule table_id myChain ct mark set 0x11333 and 0x11
add rule table_id myChain ct mark set 0x12 or 0x11
add rule table_id myChain ct mark set 0x11
add rule table_id myChain ct mark set mark
add rule table_id myChain ct mark set mark map { 1 : 10, 2 : 20, 3 : 30 }
add rule table_id myChain ct expiration 30
add rule table_id myChain ct expiration 30s
add rule table_id myChain ct expiration != 233
add rule table_id myChain ct expiration != 3m53s
add rule table_id myChain ct expiration 33-45
add rule table_id myChain ct expiration 33s-45s
add rule table_id myChain ct expiration != 33-45
add rule table_id myChain ct expiration != 33s-45s
add rule table_id myChain ct expiration { 33, 55, 67, 88 }
add rule table_id myChain ct expiration { 1m7s, 33s, 55s, 1m28s }
add rule table_id myChain ct helper "ftp"
add rule table_id myChain ct original bytes > 100000
add rule table_id myChain ct bytes > 100000
add rule table_id myChain ct reply packets < 100
add rule table_id myChain ct original ip saddr 192.168.0.1
add rule table_id myChain ct reply ip saddr 192.168.0.1
add rule table_id myChain ct original ip saddr 192.168.1.0/24
add rule table_id myChain ct reply ip saddr 192.168.1.0/24
add rule table_id myChain ct original ip daddr 192.168.0.1
add rule table_id myChain ct reply ip daddr 192.168.0.1
add rule table_id myChain ct original ip daddr 192.168.1.0/24
add rule table_id myChain ct reply ip daddr 192.168.1.0/24
add rule table_id myChain ct original l3proto ipv4
add rule table_id myChain ct original protocol 6
add rule table_id myChain ct original proto-dst 22
add rule table_id myChain ct reply proto-src 53
add rule table_id myChain ct count 2
add rule table_id myChain ct count over 4
delete ct timeout table_id ctt
delete ct timeout ip table_id ctt
delete ct timeout ip6 myIp6Table ctt
delete ct timeout inet myInetTable ctt
delete ct timeout netdev myNetdevTable ctt
delete ct timeout bridge myBridgeTable ctt
delete ct timeout arp myArpTable ctt
delete ct expectation table_name quota_name 
delete ct expectation ip table_name quota_name
delete ct expectation ip6 table_name quota_name
delete ct expectation inet table_name quota_name
delete ct expectation netdev table_name quota_name
delete ct expectation arp table_name quota_name
delete ct expectation bridge table_name quota_name
list chain table_name chain_name ct
ct count 123
ct count 123
rule ct count over 123
add rule ct count over 15
table inet raw {  # nftables manpage
  chain prerouting {
      type filter hook prerouting priority raw;
      ct zone set iif map { "eth1" : 1, "veth1" : 2 }
  }
  chain output {
      type filter hook output priority raw;
      ct zone set oif map { "eth1" : 1, "veth1" : 2 }
  }
}
table ip filter {  # nftables manpage
    ct timeout customtimeout {
        protocol tcp;
        l3proto ip
        policy = { established: 120, close: 20 }
    }
    chain output {
        type filter hook output priority filter; policy accept;
        ct timeout set "customtimeout"
    }
}
table inet myhelpers {  # nftables manpage
    ct helper ftp-standard {
        type "ftp" protocol tcp
    }
    chain prerouting {
        type filter hook prerouting priority filter;
        tcp dport 21 ct helper set "ftp-standard"
    }
}
table inet raw {  # nftables manpage
    chain prerouting {
        type filter hook prerouting priority raw;
        ct zone set iif map { "eth1" : 1, "veth1" : 2 }
    }
    chain output {
        type filter hook output priority raw;
        ct zone set oif map { "eth1" : 1, "veth1" : 2 }
    }
}
ct event set new,related,destroy  # nftables manpage
table ip x {
    chain z {
        type filter hook input priority filter; policy accept;
        ct state invalid, untracked synproxy mss 1460 wscale 9 timestamp sack-perm
        ct state invalid drop
    }
}

table inet filter {  # nftables manpage
    chain input {
        type filter hook input priority filter; policy accept;
        ct state established,related accept # handle 4
        ip saddr 10.1.1.1 tcp dport ssh accept # handle 5
    }
}
ct helper table_id { };
add ct helper table_id { };
add rule ct helper table_id { };
add ct helper table_id { ; }
add ct helper table_id { ; };
add ct helper table_id { type "sip" protocol tcp; l3proto ip; }
add ct helper ip table_id cth { type "sip" protocol tcp; l3proto ip; }
add ct timeout table_id ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
add ct timeout netdev myNetdevTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
add ct timeout bridge myBridgeTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
add ct timeout arp myArpTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
add ct timeout ip table_id ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
add ct timeout ip6 myIp6Table ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
add ct timeout inet myInetTable ctt { protocol udp; l3proto ip; policy = { unreplied : 15, replied : 12 }; }
add ct expectation table_id e_pgsql {
        protocol tcp
        dport 5432
        timeout 1h
        size 12
        l3proto ip
    }
add rule table_id chain_id dccp sport
add rule table_id chain_id dccp dport
add rule table_id chain_id dccp type
add rule table_id chain_id dccp option 15
define int_ifs={}
define int_ifs = {}
define int_if2 = { }
define MYPOLICY= -1
define int_ifs = {} ;
define int_if2 = {   } ;
define MYPOLICY= -1 ;
redefine int_ifs={}
redefine int_ifs = {}
redefine int_if2 = { }
redefine MYPOLICY= -1
redefine int_ifs = {} ;
redefine int_if2 = {   } ;
redefine MYPOLICY= -1 ;
undefine int_ifs
undefine int_if2
undefine MYPOLICY  
undefine int_ifs;
undefine int_if2 ;
undefine MYPOLICY  ;  
table T { define my_var };
table T { define my_var; };
table T { define my_var ; };
table T { define my_var ; } ; 
T C counter
table T { chain C { define my_var }; };
add table T { define xyz = 1 ; define xyz = 1; };
counter T CT { define my_var; };
add counter T CT { define my_var; };
flowtable T FT { define my_var; };
add flowtable T FT { define my_var; };
limit T L { define my_var; };
add limit T L { define my_var; };
set T S { define my_var; };
add set T S { define my_var; };
map T M { define my_var; };
add map T M { define my_var; };
quota T Q { define my_var; };
add quota T Q { define my_var; };
secmark T SM { define my_var; };
add secmark T SM { define my_var; };
synproxy T SP { define my_var; };
add synproxy T SP { define my_var; };
create counter T CT { define my_var; };
create ct expectation T CT { define my_var; };
create ct helper T CT { define my_var; };
create ct timeout T CT { define my_var; };
create flowtable T FT { define my_var; };
create map T M { define my_var; };
create set T S { define my_var; };
delete chain T C { define my_var; };
delete flowtable T FT { define my_var; };
destroy flowtable T FT { define my_var; };
add counter T C { 
    define my_var 
};
add ct expectation T CT { 
    define my_var; 
}
add ct helper T CT { 
    define my_var; 
}
add ct timeout T CT { 
    define my_var; 
}
table T { 
    define my_var; 
};
undefine int_ifs ?
undefine int_if2 {
undefine   
   MYPOLICY  
undefine int_ifs *;
undefine int_ifs $;
define int_if3 = { virbr0, $int_if2, virbr1 }
define int_if3 = { virbr0, $int_if2, virbr1 } ;
delete table ;
delete table T
delete table last
delete table ip T
delete table ip6 T
delete table inet T
delete table netdev T
delete table bridge T
delete table arp T
delete table handle 123
delete table ip handle 123
delete table ip6 handle 123
delete table inet handle 123
delete table netdev handle 123
delete table bridge handle 123
delete table arp handle 123
delete chain T C
delete chain ip T C
delete chain ip6 T C
delete chain inet T C
delete chain netdev T C
delete chain bridge T C
delete chain arp T C
delete chain T C { }
delete chain ip T C {  }
delete chain ip6 T C {  }
delete chain inet T C {  }
delete chain netdev T C {  }
delete chain bridge T C {  }
delete chain arp T C { }
delete chain T C { define my_var; };
delete chain T handle 123123
delete chain ip T handle 15
delete chain inet T handle 15
delete chain inet T handle 42  # comment
delete chain ip6 T handle 15
delete chain bridge T handle 15
delete chain arp T handle 15
delete chain netdev T handle 15
delete rule T C handle 16
delete rule last C handle 16
delete rule T last handle 16
delete rule last last handle 16
delete rule arp T C handle 16
delete rule bridge T C handle 16
delete rule filter output handle 5
delete rule filter output ip saddr 192.168.1.1 counter  # not implemented yet
delete rule inet T C handle 16
delete rule ip6 T C handle 16
delete rule ip T C handle 42
delete rule netdev T C handle 16
delete rule T C handle 42
delete set T S
delete set ip T S
delete set ip6 T S
delete set inet T S
delete set netdev T S
delete set bridge T S
delete set arp T S
delete set T handle 123
delete set ip T handle 123
delete set inet T handle 42  # comment
delete map T M 
delete map ip T M 
delete map ip6 T M 
delete map inet T M 
delete map netdev T M 
delete map bridge T M 
delete map arp T M 
delete element T M { 4.4.4.4 }
delete element T M { elements = { element, element }; }
delete element ip T M { 4.4.4.4 }
delete element ip T M { element, element }
delete element ip T M { elements = { element, element } ; }
delete element ip6 T M { 4.4.4.4 }
delete element ip6 T M { element, element }
delete element ip6 T M { elements = { element, element } ; }
delete element inet T M { 10.0.0.1 }
delete element inet T M { element, element }
delete element inet T M { elements = { element, element } ; }
delete element netdev T M { 10.0.0.1, 127.0.0.1 }
delete element netdev T M { element, element }
delete element netdev T M { elements = { element, element } ; }
delete element bridge T M { 4.4.4.4 }
delete element bridge T M { element, element }
delete element bridge T M { elements = { element, element } ; }
delete element arp T M { 4.4.4.4 }
delete element arp T M { element, element }
delete element arp T M { elements = { element, element } ; }
delete counter T CounterName
delete counter ip T CounterName
delete counter ip6 T CounterName
delete counter inet T CounterName
delete counter netdev T CounterName
delete counter bridge T CounterName
delete counter arp T CounterName
delete flowtable T FT 
delete flowtable ip T FT 
delete flowtable ip6 T FT 
delete flowtable inet T FT 
delete flowtable netdev T FT 
delete flowtable bridge T FT 
delete flowtable arp T FT 
delete flowtable T FT { define my_var; };
delete flowtable T FT { hook input priority 0; devices = { br0, eth0, eth1} ; }
delete flowtable ip T FT { hook input priority 0; devices = { eth0, eth1 } ; }
delete flowtable ip6 T FT { hook input priority 0; devices = { br0, eth0 } ; }
delete flowtable inet T FT { hook input priority 0; devices = { br0, eth1 } ; }
delete flowtable netdev T FT { flowtable_block }
delete flowtable bridge T FT { hook input priority 0; devices = { br0, eth1 } ; }
delete flowtable arp T FT { hook input priority 0; devices = { br0, eth1 } ; }
delete flowtable T handle 15 
delete flowtable ip T handle 15
delete flowtable ip6 T handle 15 
delete flowtable inet T handle 15 
delete flowtable netdev T handle 15 
delete flowtable bridge T handle 15 
delete flowtable arp T handle 15 
delete counter netdev T handle 1
delete quota T Q 
delete quota ip T Q
delete quota ip6 T Q
delete quota inet T Q
delete quota netdev T Q
delete quota bridge T Q
delete quota arp T Q
delete quota T handle 15
delete quota ip T handle 15
delete quota ip6 T handle 15
delete quota inet T handle 123
delete quota netdev T handle 15
delete quota bridge T handle 15
delete quota arp T handle 15
delete ct helper T ct_id
delete ct helper ip T ct_id
delete ct helper ip6 T ct_id
delete ct helper inet T ct_id
delete ct helper netdev T ct_id
delete ct helper bridge T ct_id
delete ct helper arp T ct_id
delete ct helper T { };
delete ct helper T {}
delete ct timeout
delete ct timeout T ct_id
delete ct timeout ip T ct_id
delete ct timeout ip6 T ct_id
delete ct timeout inet T ct_id
delete ct timeout netdev T ct_id
delete ct timeout bridge T ct_id
delete ct expectation
delete ct expectation T Q 
delete ct expectation ip T Q
delete ct expectation ip6 T Q
delete ct expectation inet T Q
delete ct expectation netdev T Q
delete ct expectation bridge T Q
delete ct expectation arp T Q
delete limit T L 
delete limit ip T L
delete limit ip6 T L
delete limit inet T L
delete limit netdev T L
delete limit bridge T L
delete limit arp T L
delete limit T handle 15
delete limit ip T handle 15
delete limit ip6 T handle 15
delete limit inet T handle 15
delete limit netdev T handle 15
delete limit bridge T handle 15
delete limit arp T handle 15
delete limit T L rate 1 /hour 
delete limit T L rate 1 / week
delete limit T L rate over 3600000/ day
delete limit T L rate until 1/second
delete limit T L rate 1/minute burst 5 packets
delete limit ip T L rate 1/ day
delete limit ip6 T L rate 1 / week
delete limit inet T L rate 1/second
delete limit netdev T L rate 1/minute 
delete limit bridge T L rate 1 /hour 
delete limit arp T L rate 1 /hour 
delete secmark arp T handle 15
delete secmark arp T secmark_name
delete secmark bridge T handle 15
delete secmark bridge T secmark_name
delete secmark inet T handle 15
delete secmark inet T secmark_name
delete secmark ip6 T handle 15
delete secmark ip6 T secmark_name
delete secmark ip T handle 15
delete secmark ip T secmark_name
delete secmark netdev T handle 15
delete secmark netdev T secmark_name
delete secmark T handle 15
delete secmark T secmark_name 
delete synproxy arp T handle 15
delete synproxy arp T synproxy_name
delete synproxy bridge T handle 15
delete synproxy bridge T synproxy_name
delete synproxy inet T handle 15
delete synproxy inet T synproxy_name
delete synproxy ip6 T handle 15
delete synproxy ip6 T synproxy_name
delete synproxy ip T handle 15
delete synproxy ip T synproxy_name
delete synproxy netdev T handle 15
delete synproxy netdev T synproxy_name
delete synproxy T handle 15
delete synproxy T synproxy_name 
describe $abcde
describe "string"
describe 'string'
describe *string*
describe 1;
describe  1
describe at 
describe ethhdr
describe vlan
describe arp
describe ip
describe icmp
describe igmp
describe ip6
describe auth
describe esp
describe comp
describe udp
describe udplite
describe tcp
describe dccp
describe sctp
describe th
describe vxlan
describe geneve
describe gre
describe gretap
describe hbh nexthdr
describe hbh hdrlength
describe frag nexthdr
describe frag reserved
describe frag frag-off
describe frag reserved2
describe frag more-fragments
describe frag id
describe dst nexthdr
describe dst hdrlength
describe mh nexthdr
describe mh hdrlength
describe mh type
describe mh reserved
describe mh checksum
describe exthdr frag;
describe exthdr dst
describe exthdr mh
describe exthdr ah
describe exthdr rt
describe exthdr hbh
describe rt nexthdr
describe  rt nexthdr
describe   rt nexthdr
describe rt  nexthdr
describe rt   nexthdr
describe rt hdrlength
describe rt type
describe rt seg-left
describe rt0 addr [1]
describe rt0 addr [ 1 ]
describe rt0 addr [ 12345691 ]
describe  rt0 addr [1]
describe rt0  addr [1]
describe rt0 addr  [1]
describe rt0 addr [ 1]
describe rt0 addr [1 ]
describe rt2 addr
describe  rt2 addr
describe rt2  addr
describe rt4 last-entry;
describe rt4 tag
describe rt4 sid
describe rt4 sid [ 1 ]
describe rt4 sid[1]
describe numgen inc mod 256
describe numgen random mod 16
describe jhash
describe symhash mod 1
describe symhash mod 1 offset 8
describe saddr
describe daddr
describe mark
describe iif
describe oif
describe osf name
describe osf version
describe osf ttl loose name
describe osf ttl skip name
describe osf ttl loose version
describe osf ttl skip version
describe ipsec in ip saddr
describe ipsec in ip6 saddr
describe ipsec in spi
describe ipsec in reqid
describe ipsec out ip daddr
describe ipsec out ip6 daddr
describe ipsec out spi
describe ipsec out reqid
destroy table T
destroy table last
destroy table ip T
destroy table ip6 T
destroy table inet T
destroy table netdev T
destroy table bridge T
destroy table arp T
destroy table handle 123
destroy table ip handle 123
destroy table ip6 handle 123
destroy table inet handle 123
destroy table netdev handle 123
destroy table bridge handle 123
destroy table arp handle 123
destroy chain T C
destroy chain last C
destroy chain T last
destroy chain last last
destroy chain ip T C
destroy chain ip6 T C
destroy chain inet T C
destroy chain netdev T C
destroy chain bridge T C
destroy chain arp T C
destroy chain T C { }
destroy chain ip T C {  }
destroy chain ip6 T C {  }
destroy chain inet T C {  }
destroy chain netdev T C {  }
destroy chain bridge T C {  }
destroy chain arp T C { }
destroy chain T C { define my_var; };
destroy chain T handle 123123
destroy chain ip T handle 15
destroy chain inet T handle 15
destroy chain inet T handle 42  # comment
destroy chain ip6 T handle 15
destroy chain bridge T handle 15
destroy chain arp T handle 15
destroy chain netdev T handle 15
destroy counter T CounterName
destroy counter ip T CounterName
destroy counter ip6 T CounterName
destroy counter inet T CounterName
destroy counter netdev T CounterName
destroy counter bridge T CounterName
destroy counter arp T CounterName
destroy counter netdev T handle 1
destroy counter T CounterName index index_id
destroy ct expectation
destroy ct expectation T Q 
destroy ct expectation ip T Q
destroy ct expectation ip6 T Q
destroy ct expectation inet T Q
destroy ct expectation netdev T Q
destroy ct expectation bridge T Q
destroy ct expectation arp T Q
destroy ct helper T ct_id
destroy ct helper ip T ct_id
destroy ct helper ip6 T ct_id
destroy ct helper inet T ct_id
destroy ct helper netdev T ct_id
destroy ct helper bridge T ct_id
destroy ct helper arp T ct_id
destroy ct helper T { };
destroy ct helper T {}
destroy ct timeout
destroy ct timeout T ct_id
destroy ct timeout ip T ct_id
destroy ct timeout ip6 T ct_id
destroy ct timeout inet T ct_id
destroy ct timeout netdev T ct_id
destroy ct timeout bridge T ct_id
destroy ct timeout arp T ct_id
destroy element T M { 4.4.4.4 }
destroy element T M { elements = { element, element }; }
destroy element ip T M { 4.4.4.4 }
destroy element ip T M { element, element }
destroy element ip T M { elements = { element, element } ; }
destroy element ip6 T M { 4.4.4.4 }
destroy element ip6 T M { element, element }
destroy element ip6 T M { elements = { element, element } ; }
destroy element inet T M { 10.0.0.1 }
destroy element inet T M { element, element }
destroy element inet T M { elements = { element, element } ; }
destroy element netdev T M { 10.0.0.1, 127.0.0.1 }
destroy element netdev T M { element, element }
destroy element netdev T M { elements = { element, element } ; }
destroy element bridge T M { 4.4.4.4 }
destroy element bridge T M { element, element }
destroy element bridge T M { elements = { element, element } ; }
destroy element arp T M { 4.4.4.4 }
destroy element arp T M { element, element }
destroy element arp T M { elements = { element, element } ; }
destroy flowtable T FT 
destroy flowtable ip T FT 
destroy flowtable ip6 T FT 
destroy flowtable inet T FT 
destroy flowtable netdev T FT 
destroy flowtable bridge T FT 
destroy flowtable arp T FT 
destroy flowtable T FT { define my_var; };
destroy flowtable T FT { hook input priority out+1; devices = { br0, eth0, eth1} ; hook input priority false }
destroy flowtable ip T FT { hook input priority 0; devices = { eth0, eth1 } ; }
destroy flowtable ip6 T FT { hook input priority 0; devices = { br0, eth0 } ; }
destroy flowtable inet T FT { hook input priority 0; devices = { br0, eth1 } ; }
destroy flowtable netdev T FT { flowtable_block }
destroy flowtable bridge T FT { hook input priority 0; devices = { br0, eth1 } ; }
destroy flowtable arp T FT { hook input priority 0; devices = { br0, eth1 } ; }
destroy flowtable T handle 15 
destroy flowtable ip T handle 15
destroy flowtable ip6 T handle 15 
destroy flowtable inet T handle 15 
destroy flowtable netdev T handle 15 
destroy flowtable bridge T handle 15 
destroy flowtable arp T handle 15 
destroy limit T L 
destroy limit ip T L
destroy limit ip6 T L
destroy limit inet T L
destroy limit netdev T L
destroy limit bridge T L
destroy limit arp T L
destroy limit T handle 15
destroy limit ip T handle 15
destroy limit ip6 T handle 15
destroy limit inet T handle 15
destroy limit netdev T handle 15
destroy limit bridge T handle 15
destroy limit arp T handle 15
destroy limit T L rate 1 /hour 
destroy limit T L rate 1 / week
destroy limit T L rate over 3600000/ day
destroy limit T L rate until 1/second
destroy limit T L rate 1/minute burst 5 packets
destroy limit ip T L rate 1/ day
destroy limit ip6 T L rate 1 / week
destroy limit inet T L rate 1/second
destroy limit netdev T L rate 1/minute 
destroy limit bridge T L rate 1 /hour 
destroy limit arp T L rate 1 /hour 
destroy map T M 
destroy map ip T M 
destroy map ip6 T M 
destroy map inet T M 
destroy map netdev T M 
destroy map bridge T M 
destroy map arp T M 
destroy quota T Q 
destroy quota ip T Q
destroy quota ip6 T Q
destroy quota inet T Q
destroy quota netdev T Q
destroy quota bridge T Q
destroy quota arp T Q
destroy quota T handle 15
destroy quota ip T handle 15
destroy quota ip6 T handle 15
destroy quota inet T handle 123
destroy quota netdev T handle 15
destroy quota bridge T handle 15
destroy quota arp T handle 15
destroy rule arp T C handle 16
destroy rule bridge T C handle 16
destroy rule filter output handle 5
destroy rule filter output ip saddr 192.168.1.1 counter  # not implemented yet
destroy rule inet T C handle 16
destroy rule ip6 T C handle 16
destroy rule ip T C handle 42
destroy rule ip T handle 42
destroy rule netdev T C handle 16
destroy rule T C handle 42
destroy rule T handle 42
destroy secmark arp T handle 15
destroy secmark arp T secmark_name
destroy secmark bridge T handle 15
destroy secmark bridge T secmark_name
destroy secmark inet T handle 15
destroy secmark inet T secmark_name
destroy secmark ip6 T handle 15
destroy secmark ip6 T secmark_name
destroy secmark ip T handle 15
destroy secmark ip T secmark_name
destroy secmark netdev T handle 15
destroy secmark netdev T secmark_name
destroy secmark T handle 15
destroy secmark T secmark_name 
destroy set T S
destroy set ip T S
destroy set ip6 T S
destroy set inet T S
destroy set netdev T S
destroy set bridge T S
destroy set arp T S
destroy set T handle 123
destroy set ip T handle 123
destroy set inet T handle 42  # comment
destroy synproxy arp T handle 15
destroy synproxy arp T synproxy_name
destroy synproxy bridge T handle 15
destroy synproxy bridge T synproxy_name
destroy synproxy inet T handle 15
destroy synproxy inet T synproxy_name
destroy synproxy ip6 T handle 15
destroy synproxy ip6 T synproxy_name
destroy synproxy ip T handle 15
destroy synproxy ip T synproxy_name
destroy synproxy netdev T handle 15
destroy synproxy netdev T synproxy_name
destroy synproxy T handle 15
destroy synproxy T synproxy_name 
list set myIpTable MySet
list set inet myIpTable MySet
list flowtable myIpTable MySet
list flowtable inet myIpTable MySet
flush chain myIpTable myIpChain 
flush chain myIpTable myIpChain ; 
flush chain myIpTable myIpChain ; flush chain netdev myNetDev X; oopsie
flush flow table table_name identifier  # intentional invalid; flowtable do not support ARP
flush flow table table_name identifier  # intentional invalid; flowtable do not support ARP
export ruleset xml
export ruleset json
export ruleset vm json
flush table MyTable
flush table ip MyTable
flush table ip6 MyTable
flush table inet MyTable
flush table netdev MyTable
flush table bridge MyTable
flush table arp MyTable 
flush table MyTable;
flush table MyTable; 
flush table MyTable ;
flush table MyTable ; 


flush chain MyTable MyChain
flush chain ip MyTable MyChain
flush chain ip6 MyTable MyChain
flush chain inet MyTable MyChain
flush chain netdev MyTable MyChain
flush chain bridge MyTable MyChain
flush chain arp MyTable MyChain
flush chain MyTable MyChain;
flush chain MyTable MyChain; 
flush chain MyTable MyChain ;
flush chain MyTable MyChain ; 
flush flow table table_id flow_id
flush flow table ip table_id flow_id
flush flow table ip6 table_id flow_id
flush flow table inet table_id flow_id
flush flow table netdev table_id flow_id
flush flow table bridge table_id flow_id
flush map ip table_id MyMap
flush map ip6 table_id MyMap
flush map inet table_id MyMap
flush map netdev table_id MyMap
flush map bridge table_id MyMap
flush map arp table_id MyMap
flush meter table_id MyMap
flush meter ip table_id MyMap
flush meter ip6 table_id MyMap
flush meter inet table_id MyMap
flush meter netdev table_id MyMap
flush meter arp table_id MyMap
flush ruleset 
flush ruleset ip 
flush ruleset ip6
flush ruleset inet
flush set table_id set_id
flush set ip6 table_id set_id
flush set inet table_id set_id
flush set netdev table_id set_id
flush set bridge table_id set_id
flush set arp table_id set_id
get element table_id set_id
get element ip T S
get element ip6 T S
get element inet T S
get element netdev T S
get element bridge T S
get element arp T S
get element T S ;
get element T S $variable_id
get element T S $a;
get element T S { ~ ~ typeof b };
get element T S { * ~ typeof b };
get element T S { ~typeof b };
get element ip T S { typeof b };
get element T S { typeof a.b.c.d.e.f };
get element T S { flags constant }
get element T S { flags interval; }
get element T S { flags timeout };
get element T S { flags dynamic ; } ;
get element T S { flags constant, interval, timeout, dynamic };
get element T S { flags constant; flags interval; flags timeout; flags dynamic };
get element T S { timeout 15:00:01 }
get element T S { gc-interval 1:00:1 }
get element T S { elements = 1:00:1 }
get element T S { comment *A comment string* }
get element T S { comment "A comment string" }
get element T S { comment 'A comment string' }
get element T S { comment single-word }
import ruleset xml
import ruleset vm json
import ruleset json
include ";";
 include ";";
include ";;;;;;;;;";
include ";;;;;;;;;;";
include 'Fil"espec'
include "Fil'espec"
include "Filespec"
include "Filespec" ;
include "Filespec";   
include "Filespec"  ;
include "Filespec"  ;   
include "File spec" # space in filename
include "File spec";  #  
include " Filespec";  # space at pos 0
include " Filespec ";  # space at pos 0 & len-1
include "Filespec ";  # space at pos len-1
include "Filespec" # inline comment
include "Filespec"        # inline comment
include "Filespec";   # inline comment
include "Filespec";      # inline comment
include "Filespec"  ;      # inline comment
include "File\"spec";  # OK, double-quote inside double-quotes
include 'Fil\'espec'
include 'File\'spec';  # OK, double-quote inside double-quotes
include "Fil'espec"
include 'Fil"espec'
include "./defines.nft"  # periods are allowed
include "/home/device/Filespec"
include "/dev/hd0/Filespec\win0-15 5;1"  ;   
include "/dev/hd0/Filespec\win0-15 [5;1]"  ;   
include "/dev/hd0/Filespec\win0-15 [5;1]{value}"  ;   
include "Filespec???<>|\~`!@#$%^&*()\=+{}] /;:,._0123abcXYZ"  ;   # inline comment
insert rule T C
insert rule ip T C
insert rule ip6 T C
insert rule inet T C
insert rule netdev T C
insert rule bridge T C
insert rule arp T C
insert rule T C position 123
insert rule T C handle 123
insert rule T C index 123
insert rule ip T C position 123
insert rule ip T C handle 123
insert rule ip T C index 123
insert rule ip6 T C position 123
insert rule ip6 T C handle 123
insert rule ip6 T C index 123
insert rule inet T C position 123
insert rule inet T C handle 123
insert rule inet T C index 123
insert rule netdev T C position 123
insert rule netdev T C handle 123
insert rule netdev T C index 123
insert rule bridge T C position 123
insert rule bridge T C handle 123
insert rule bridge T C index 123
insert rule arp T C position 123
insert rule arp T C handle 123
insert rule arp T C index 123
last
last used 
last used time_spec
rule last
rule last used never
rule last used time_spec
add rule last
add rule last used never
add rule last used time_spec
table T {
    chain C {
        last
        last used never
        last used +1h5m
    }
}
jump { 
    last
    last used never
    last used 2w1d
}
goto { 
    last
    last used never
    last used 2w1d
}

insert rule T C {
    last
    last used never
    last used time_spec
}
limit myIp6Table myIp6Limit rate 1 / week
limit myIpTable myIpLimit rate over 3600000/ day
limit myInetTable myInetLimit rate until 1/second
limit myNetdevTable myNetdevLimit rate 1/minute burst 5 packets
limit myBridgeTable myBridgeLimit rate 1 /hour 
limit ip6 myIp6Table myIp6Limit rate 1 / week
limit ip myIpTable myIpLimit rate 1/ day
limit inet myInetTable myInetLimit rate 1/second
limit netdev myNetdevTable myNetdevLimit rate 1/minute 
limit bridge myBridgeTable myBridgeLimit rate 1 /hour 
limit arp myBridgeTable myBridgeLimit rate 1 /hour 
add limit myIpTable myIpLimit rate 1/second 
add limit myIpTable myIpLimit rate 1/second burst 1514 bytes
add limit myIpTable myIpLimit rate 1/second burst 15 packets
add limit ip6 myIp6Table myIp6Limit rate 1 / week burst 1 packets
add limit ip myIpTable myIpLimit rate 1/ day burst 1M bytes
add limit inet myInetTable myInetLimit rate 1/second burst 1G bytes
add limit netdev myNetdevTable myNetdevLimit rate 1/minute burst 1k bytes
add limit bridge myBridgeTable myBridgeLimit rate 1 /hour burst 1T bytes
add limit arp myBridgeTable myBridgeLimit rate 1 /hour burst 1000000 bytes
add limit myIp6Table myIp6Limit rate 1 / week
limit myTable lim_400ppm { rate 400/minute ; comment "use to limit incoming icmp" ; }
limit myTable lim_1kbps  { rate over 1024 bytes/second burst 512 bytes ; comment "use to limit incoming smtp" ; }
limit myTable lim_400ppm { ; }
limit myTable lim_400ppm { comment "comments here"; }
limit myTable lim_400ppm { 
    include "rate-limit.nft"
    rate 400/minute ; comment "use to limit incoming icmp" ; 
}
create limit myIp6Table myIp6Limit rate 1 / week
create limit myIpTable myIpLimit rate over 3600000/ day
create limit myInetTable myInetLimit rate until 1/second
create limit myNetdevTable myNetdevLimit rate 1/minute burst 5 packets
create limit myBridgeTable myBridgeLimit rate 1 /hour 
create limit ip6 myIp6Table myIp6Limit rate 1 / week
create limit ip myIpTable myIpLimit rate 1/ day
create limit inet myInetTable myInetLimit rate 1/second
create limit netdev myNetdevTable myNetdevLimit rate 1/minute 
create limit bridge myBridgeTable myBridgeLimit rate 1 /hour 
create limit arp myBridgeTable myBridgeLimit rate 1 /hour 
delete limit myIp6Table myIp6Limit rate 1 / week
delete limit myIpTable myIpLimit rate over 3600000/ day
delete limit myInetTable myInetLimit rate until 1/second
delete limit myNetdevTable myNetdevLimit rate 1/minute burst 5 packets
delete limit myBridgeTable myBridgeLimit rate 1 /hour 
delete limit ip6 myIp6Table myIp6Limit rate 1 / week
delete limit ip myIpTable myIpLimit rate 1/ day
delete limit inet myInetTable myInetLimit rate 1/second
delete limit netdev myNetdevTable myNetdevLimit rate 1/minute 
delete limit bridge myBridgeTable myBridgeLimit rate 1 /hour 
delete limit arp myBridgeTable myBridgeLimit rate 1 /hour 
delete limit table_id handle 15
delete limit ip table_id handle 15
delete limit ip6 table_id handle 15
delete limit inet table_id handle 15
delete limit netdev table_id handle 15
delete limit bridge table_id handle 15
delete limit arp table_id handle 15
list limit table_id limit_id
list limit ip table_id limit_id
list limit ip6 table_id limit_id
list limit inet table_id limit_id
list limit netdev table_id limit_id
list limit bridge table_id limit_id
list limit arp table_id limit_id
list limits ip 
list limits ip6
list limits inet 
list limits netdev 
list limits bridge 
list limits arp 
list limits table table_id
list limits table ip table_id
list limits table ip6 table_id
list limits table inet table_id
list limits table netdev table_id
list limits table bridge table_id
list limits table arp table_id
include "filespec"
include "filename.filetype"
include "directory/filename.filetype"
include "https://directory/filename.filetype"
define ABC = 1  # missing stmt_separator
define A = $ABC  # missing stmt_separator
redefine A = 123  # missing stmt_separator
redefine A = $ABC  # missing stmt_separator
undefine ABC
undefine A
list table last
list table table_id
list table ip table_id
list table ip6 table_id
list table inet table_id
list table netdev table_id
list table bridge table_id
list table arp table_id
list table MyTable;
list table ip MyTable ; 
list tables
list tables ip 
list tables ip6
list tables inet 
list tables netdev 
list tables bridge 
list tables arp 
list chains 
list chains ip 
list chains ip6
list chains inet 
list chains netdev 
list chains bridge 
list chains arp 
list ruleset 
list ruleset ip 
list ruleset ip6
list ruleset inet 
list ruleset netdev 
list ruleset bridge 
list ruleset arp 
list meters 
list meters ip 
list meters ip6
list meters inet 
list meters netdev 
list meters bridge 
list meters arp 
list maps 
list maps ip 
list maps ip6
list maps inet 
list maps netdev 
list maps bridge 
list maps arp 
list chain table_id chain_id
list chain last chain_id
list chain table_id last
list chain last last
list chain ip table_id chain_id
list chain ip last chain_id
list chain ip table_id last
list chain ip last last
list chain ip6 table_id chain_id
list chain inet table_id chain_id
list chain netdev table_id chain_id
list chain bridge table_id chain_id
list chain arp table_id chain_id
list sets 
list sets ip 
list sets ip6
list sets inet 
list sets netdev 
list sets bridge 
list sets arp 
list sets table table_id
list sets table last
list sets table ip table_id
list sets table ip last
list sets table ip6 table_id
list sets table inet table_id
list sets table netdev table_id
list sets table bridge table_id
list sets table arp table_id
list counters 
list counters ip 
list counters ip6
list counters inet 
list counters netdev 
list counters bridge 
list counters arp 
list counters table table_id
list counters table last
list counters table ip table_id
list counters table ip last
list counters table ip6 table_id
list counters table inet table_id
list counters table netdev table_id
list counters table bridge table_id
list counters table arp table_id
list quotas 
list quotas ip 
list quotas ip6
list quotas inet 
list quotas netdev 
list quotas bridge 
list quotas arp 
list quotas table table_id
list quotas table last
list quotas table ip table_id
list quotas table ip last
list quotas table ip6 table_id
list quotas table inet table_id
list quotas table netdev table_id
list quotas table bridge table_id
list quotas table arp table_id
list limits 
list limits ip 
list limits ip6
list limits inet 
list limits netdev 
list limits bridge 
list limits arp 
list limits table table_id
list limits table last
list limits table ip table_id
list limits table ip last
list limits table ip6 table_id
list limits table inet table_id
list limits table netdev table_id
list limits table bridge table_id
list limits table arp table_id
list secmarks 
list secmarks ip 
list secmarks ip6
list secmarks inet 
list secmarks netdev 
list secmarks bridge 
list secmarks arp 
list secmarks table table_id
list secmarks table last
list secmarks table ip table_id
list secmarks table ip last
list secmarks table ip6 table_id
list secmarks table inet table_id
list secmarks table netdev table_id
list secmarks table bridge table_id
list secmarks table arp table_id
list synproxys 
list synproxys ip 
list synproxys ip6
list synproxys inet 
list synproxys netdev 
list synproxys bridge 
list synproxys arp 
list synproxys table table_id
list synproxys table last
list synproxys table ip table_id
list synproxys table ip last
list synproxys table ip6 table_id
list synproxys table inet table_id
list synproxys table netdev table_id
list synproxys table bridge table_id
list synproxys table arp table_id
list set table_id set_id
list set last set_id
list set table_id last
list set last last
list set ip table_id set_id
list set ip6 table_id set_id
list set inet table_id set_id
list set netdev table_id set_id
list set bridge table_id set_id
list set arp table_id set_id
list meter table_id meter_id
list meter last meter_id
list meter table_id last
list meter last last
list meter ip table_id meter_id
list meter ip6 table_id meter_id
list meter inet table_id meter_id
list meter netdev table_id meter_id
list meter bridge table_id meter_id
list meter arp table_id meter_id
list map table_id map_id
list map last map_id
list map table_id last
list map last last
list map ip table_id map_id
list map ip6 table_id map_id
list map inet table_id map_id
list map netdev table_id map_id
list map bridge table_id map_id
list map arp table_id map_id
list counter table_id counter_id
list counter last counter_id
list counter table_id last
list counter last last
list counter ip table_id counter_id
list counter ip6 table_id counter_id
list counter inet table_id counter_id
list counter netdev table_id counter_id
list counter bridge table_id counter_id
list counter arp table_id counter_id
list quota table_id quota_id
list quota last quota_id
list quota table_id last
list quota last last
list quota ip table_id quota_id
list quota ip6 table_id quota_id
list quota inet table_id quota_id
list quota netdev table_id quota_id
list quota bridge table_id quota_id
list quota arp table_id quota_id
list limit table_id limit_id
list limit last limit_id
list limit table_id last
list limit last last
list limit ip table_id limit_id
list limit ip6 table_id limit_id
list limit inet table_id limit_id
list limit netdev table_id limit_id
list limit bridge table_id limit_id
list limit arp table_id limit_id
list secmark table_id secmark_id
list secmark last secmark_id
list secmark table_id last
list secmark last last
list secmark ip table_id secmark_id
list secmark ip6 table_id secmark_id
list secmark inet table_id secmark_id
list secmark netdev table_id secmark_id
list secmark bridge table_id secmark_id
list secmark arp table_id secmark_id
list synproxy table_id synproxy_id
list synproxy last synproxy_id
list synproxy table_id last
list synproxy last last
list synproxy ip table_id synproxy_id
list synproxy ip table_id last
list synproxy ip6 table_id synproxy_id
list synproxy inet table_id synproxy_id
list synproxy netdev table_id synproxy_id
list synproxy bridge table_id synproxy_id
list synproxy arp table_id synproxy_id
list flow tables 
list flow tables ip
list flow tables ip6
list flow tables inet
list flow tables netdev
list flow tables bridge
list flow tables arp
list flow table table_id synproxy_id
list flow table ip table_id synproxy_id
list flow table ip6 table_id synproxy_id
list flow table inet table_id synproxy_id
list flowtable last 
list flowtable table_id 
list flowtable ip table_id 
list flowtable ip6 table_id 
list flowtable inet table_id 
list ct helper table_id ct_id x
list ct helper last ct_id
list ct helper table_id last
list ct helper last last
list ct helper ip table_id ct_id
list ct helper ip6 table_id ct_id
list ct helper inet table_id ct_id
list ct helper netdev table_id ct_id
list ct helper bridge table_id ct_id
list ct helper arp table_id ct_id
list ct timeout
list ct timeout table_id ct_id
list ct timeout ip table_id ct_id
list ct timeout ip6 table_id ct_id
list ct timeout inet table_id ct_id
list ct timeout netdev table_id ct_id
list ct timeout bridge table_id ct_id
list ct timeout arp table_id ct_id
list ct timeout table table_id
list ct timeout table last
list ct timeout table ip table_id
list ct timeout table ip6 table_id
list ct timeout table inet table_id
list ct timeout table netdev table_id
list ct timeout table bridge table_id
list ct timeout table arp table_id
list ct timeout table arp last
list ct expectation
list ct expectation table_id ct_id
list ct expectation ip table_id ct_id
list ct expectation ip6 table_id ct_id
list ct expectation inet table_id ct_id
list ct expectation netdev table_id ct_id
list ct expectation bridge table_id ct_id
list ct expectation arp table_id ct_id
list ct expectation table table_id
list ct expectation table last
list ct expectation table ip table_id
list ct expectation table ip6 table_id
list ct expectation table inet table_id
list ct expectation table netdev table_id
list ct expectation table bridge table_id
list ct expectation table arp table_id
list ct expectation table arp last
list ct helpers table table_id 
list ct helpers table last 
list ct helpers table ip table_id
list ct helpers table ip6 table_id
list ct helpers table inet table_id
list ct helpers table netdev table_id
list ct helpers table bridge table_id
list ct helpers table arp table_id
list ct helpers table arp last
list hooks 
list hooks ip
list hooks ip6
list hooks inet
list hooks netdev
list hooks bridge
list hooks arp
list hooks ip device eth0
list hooks ip device eth0
list hooks ip6 device wlan1
list hooks inet device vlan2
list hooks netdev device net3
list hooks bridge device br4
list hooks arp device arp5
rule table_id chain_id log 
add rule table_id chain_id log 
tableid chainid log 
tableId chainId log prefix *LOG:'
tableId chainId log prefix 'LOG:'
tableId chainId log prefix "LOG:"
tableId chainId log group 15
tableId chainId log snaplen 512
tableId chainId log queue-threshold 5
tableId chainId log level log_string
tableId chainId log flags tcp seq
tableId chainId log flags tcp seq,options
tableId chainId log flags tcp options,seq
tableId chainId log flags tcp options
tableId chainId log flags ip options
tableId chainId log flags skuid
tableId chainId log flags ether 
tableId chainId log flags all
add rule ip filter input tcp flags syn tcp dport ssh meter flood size 128000 { ip saddr timeout 10s limit rate over 10/second} add @blackhole { ip saddr timeout 1m } drop
list meter table_name identifier
list meter ip table_name identifier
list meter bridge table_name identifier
list meter netdev table_name identifier
flush meter myIpTable mySet
flush meter ip myIpTable mySet
flush meter ip6 myIp6Table mySet
flush meter inet myInetTable mySet ; 
flush meter netdev myNetdevTable mySet
flush meter bridge myBridgeTable mySet
flush meter arp myArpTable mySet
monitor new  # monitor 'ANY'
monitor new tables 
monitor new chains
monitor new sets
monitor new rules
monitor new elements 
monitor new ruleset
monitor new trace 
monitor tables;
monitor chains
monitor sets
monitor rules
monitor elements
monitor ruleset
monitor trace
monitor tables json;
monitor chains xml
monitor sets json
monitor rules vm json
monitor elements json
monitor ruleset json
monitor trace json
monitor trace json
monitor new tables json
monitor new chains json
monitor new sets vm json
monitor new rules json
monitor new elements json
monitor new ruleset json
monitor new trace  json
monitor destroy 
monitor destroy tables 
monitor destroy chains
monitor destroy sets
monitor destroy rules
monitor destroy elements
monitor destroy trace 
tableid chainid dnat
rule tableid chainid dnat
add rule tableid chainid dnat
tableid chainid snat
rule tableid chainid snat
add rule tableid chainid snat
tableid chainid snat to $VARIABLE_NAME 
tableid chainid snat to ether 
tableid chainid snat to : dnat 
tableid chainid snat to destroy : last 
tableid chainid snat interval to ecn 
tableid chainid snat prefix to reset 
tableid chainid snat ip to last 
tableid chainid snat ip to original : last
tableid chainid snat ip6 to label 
tableid chainid snat ip6 to reply : arp
tableid chainid snat ip6 addr . port to
tableid chainid snat ip6 interval to
tableid chainid snat ip6 prefix to
tableid chainid snat ip to original : last random
tableid chainid snat ip to original : last fully-random
tableid chainid snat ip to original : last persistent
tableid chainid snat ip to original : last persistent,random
tableid chainid snat ip to original : last persistent,random,fully-random
add rule myTable myChain queue num 2
add rule myTable myChain queue num 2-3
add rule myTable myChain queue num 4-5 fanout bypass
add rule myTable myChain queue num 4-5 fanout
add rule myTable myChain queue num 4-5 bypass
add quota filter http_quota over 25 mbytes
add quota last http_quota over 25 mbytes
add quota filter last over 25 mbytes
add quota last last over 25 mbytes
add quota filter ssh_quota { 10 kbytes }
add quota filter http_quota { over 25 mbytes };
add quota ip mangle eth0output over 500 mbytes
add quota ip6 myIpfilter http-quota until 525 kbytes
add quota inet myIpfilter http-quota over 25 mbytes
add quota netdev myIpfilter http-quota over 25 mbytes;
add quota bridge myIpfilter http-quota over 25 mbytes
add quota arp myIpfilter http-quota over 25 mbytes
quota T Q over 123
quota table1 last over 123
quota last quota2 over 123
quota last last over 123
quota example { over 100 mbytes used 0 bytes }
quota ip T Q over 123
quota ip myIpfilter http-quota over 25 mbytes
quota ip6 myIpfilter http-quota until 525 kbytes
quota inet myIpfilter http-quota over 25 mbytes
quota netdev myIpfilter http-quota over 25 mbytes;
quota bridge myIpfilter http-quota over 25 mbytes
quota arp myIpfilter http-quota over 25 mbytes
create quota filter http-quota { over 25 mbytes };
create quota filter http-quota over 25 mbytes
create quota filter ssh-quota { 10 kbytes }
create quota ip myIpfilter http-quota over 25 mbytes
create quota ip6 myIpfilter http-quota until 525 kbytes
create quota inet myIpfilter http-quota over 25 mbytes
create quota netdev myIpfilter http-quota over 25 mbytes;
create quota bridge myIpfilter http-quota over 25 mbytes
create quota arp myIpfilter http-quota over 25 mbytes
delete quota table_name handle 15
delete quota table_name quota_name 
delete quota ip table_name handle 15
delete quota ip table_name index 15
delete quota ip table_name quota_name
delete quota ip6 table_name handle 15
delete quota ip6 table_name quota_name
delete quota inet table_name quota_name
delete quota inet myInetFilter handle 123
delete quota inet myInetFilter index 345
delete quota inet myInetFilter position 234
delete quota netdev table_name handle 15
delete quota netdev table_name quota_name
delete quota bridge table_name handle 15
delete quota bridge table_name quota_name
delete quota arp table_name handle 15
delete quota arp table_name quota_name
list quota myInetTable myInetChain
list quota myTable quota_name
list quota ip myIpTable myIpChain
list quota ip myTable quota_name
list quota ip6 myIp6Table myIp6Chain
list quota ip6 myTable quota_name
list quota inet myInetTable myInetChain
list quota inet myTable quota_name
list quota netdev myNetdevTable myNetdevChain
list quota netdev myTable quota_name
list quota bridge myBridgeTable myBridgeChain
list quota bridge myTable quota_name
list quota arp myArpTable myArpChain
list quota arp myTable quota_name
list quotas 
list quotas ip
list quotas ip6
list quotas inet
list quotas netdev
list quotas bridge
list quotas arp
list quotas table myIpTable
list quotas table ip myIpTable
list quotas table ip6 myIp6Table
list quotas table inet myInetTable
list quotas table netdev table_name
list quotas table bridge myBridgeTable
list quotas table arp myArpTable
reset quota myIpTable myIpFilter
reset quota myIpTable myFilter ;
reset quota ip tablename chainname
reset quota ip6 tablename chainname
reset quota inet tablename chainname
reset quota netdev tablename chainname
reset quota bridge tablename chainname
reset quota arp tablename chainname
reset quotas 
reset quotas MyIpTable 
reset quotas ip MyIpTable 
reset quotas ip6 MyIpTable 
reset quotas inet MyIpTable 
reset quotas netdev MyIpTable 
reset quotas bridge MyIpTable
reset quotas arp MyIpTable 
reset quotas table myIpFilter
reset quotas table ip myIpFilter
reset quotas table ip6 MyIpTable 
reset quotas table inet MyIpTable 
reset quotas table netdev myIpFilter
reset quotas table bridge MyIpTable 
reset quotas table arp myIpFilter
rename chain myTable myChain identifier 
rename chain ip myTable myChain identifier 
rename chain ip6 myTable myChain identifier 
rename chain inet myTable myChain identifier 
rename chain netdev myTable myChain identifier 
rename chain bridge myTable myChain identifier 
rename chain arp myTable myChain identifier 
replace rule table_id chain_id handle 777
replace rule ip table_id chain_id handle 321
replace rule ip6 table_id chain_id handle 4
replace rule inet table_id chain_id handle 1
replace rule netdev table_id chain_id handle 7654321
replace rule bridge table_id chain_id handle 10
replace rule arp table_id chain_id handle 777

replace rule table_id chain_id handle 777 ;
replace rule ip table_id chain_id handle 321;
replace rule ip6 table_id chain_id handle 4     ;
replace rule inet table_id chain_id handle 1     ;
replace rule netdev table_id chain_id handle 7654321     ;
replace rule bridge table_id chain_id handle 10     ;
replace rule arp table_id chain_id handle 777     ;
replace rule ip table_id chain_id position 321 
replace rule ip table_id chain_id index 321  ;
replace rule ip table_id chain_id icmp type;
replace rule ip table_id chain_id icmp code;
replace rule ip table_id chain_id icmp checksum;
replace rule ip table_id chain_id icmp id;
replace rule ip table_id chain_id icmp seq;
replace rule ip table_id chain_id icmp gateway;
replace rule ip table_id chain_id icmp mtu;
replace rule ip table_id chain_id ip version
replace rule ip table_id chain_id ip hdrlength
replace rule ip table_id chain_id ip dscp
replace rule ip table_id chain_id ip ecn
replace rule ip table_id chain_id ip length
replace rule ip table_id chain_id ip id
replace rule ip table_id chain_id ip fra_off
replace rule ip table_id chain_id ip ttl
replace rule ip table_id chain_id ip protocol
replace rule ip table_id chain_id ip checksum
replace rule ip table_id chain_id ip saddr
replace rule ip table_id chain_id ip daddr
replace rule ip table_id chain_id ip option ra;
replace rule ip table_id chain_id ip option ra type;
replace rule ip table_id chain_id ip option ra length;
replace rule ip table_id chain_id ip option ra value
replace rule ip table_id chain_id ip option ra ptr
replace rule ip table_id chain_id ip option ra addr
replace rule ip table_id chain_id ip option ssrr;
replace rule ip table_id chain_id ip option lsrr;
replace rule ip table_id chain_id ip option rr;
replace rule ip table_id chain_id arp htype
replace rule ip table_id chain_id arp ptype
replace rule ip table_id chain_id arp hlen
replace rule ip table_id chain_id arp plen
replace rule ip table_id chain_id arp operation
replace rule ip table_id chain_id arp saddr ether
replace rule ip table_id chain_id arp saddr ip
replace rule ip table_id chain_id arp daddr ether
replace rule ip table_id chain_id arp daddr ip
replace rule ip table_id chain_id vlan id
replace rule ip table_id chain_id vlan cfi
replace rule ip table_id chain_id vlan dei
replace rule ip table_id chain_id vlan pcp
replace rule ip table_id chain_id vlan type
replace rule ip table_id chain_id ether saddr
replace rule ip table_id chain_id ether daddr
replace rule ip table_id chain_id ether type
replace rule ip table_id chain_id at ll, 3, 7
replace rule ip table_id chain_id at nh, 1, 2
replace rule ip table_id chain_id at th, 1, 2
replace rule ip table_id chain_id at string, 1, 2
replace rule ip table_id chain_id igmp type
replace rule ip table_id chain_id igmp checksum
replace rule ip table_id chain_id igmp mrt
replace rule ip table_id chain_id igmp group
replace rule ip table_id chain_id ip6 version
replace rule ip table_id chain_id ip6 dscp
replace rule ip table_id chain_id ip6 ecn
replace rule ip table_id chain_id ip6 flowlabel
replace rule ip table_id chain_id ip6 length
replace rule ip table_id chain_id ip6 nexthdr
replace rule ip table_id chain_id ip6 hoplimit
replace rule ip table_id chain_id ip6 saddr
replace rule ip table_id chain_id ip6 daddr
replace rule ip table_id chain_id icmpv6 type
replace rule ip table_id chain_id icmpv6 code
replace rule ip table_id chain_id icmpv6 checksum
replace rule ip table_id chain_id icmpv6 param-problem
replace rule ip table_id chain_id icmpv6 mtu
replace rule ip table_id chain_id icmpv6 id
replace rule ip table_id chain_id icmpv6 seq
replace rule ip table_id chain_id icmpv6 max-delay
replace rule ip table_id chain_id icmpv6 taddr
replace rule ip table_id chain_id icmpv6 daddr
replace rule ip table_id chain_id auth nexthdr 
replace rule ip table_id chain_id auth hdrlength 
replace rule ip table_id chain_id auth reserved 
replace rule ip table_id chain_id auth spi 
replace rule ip table_id chain_id auth seq 
replace rule ip table_id chain_id esp seq 
replace rule ip table_id chain_id comp nexthdr
replace rule ip table_id chain_id comp flags
replace rule ip table_id chain_id comp cpi
replace rule ip table_id chain_id udp sport
replace rule ip table_id chain_id udp dport
replace rule ip table_id chain_id udp length
replace rule ip table_id chain_id udp checksum
replace rule ip table_id chain_id udplite sport
replace rule ip table_id chain_id udplite dport
replace rule ip table_id chain_id udplite csumcov
replace rule ip table_id chain_id udplite checksum
replace rule ip table_id chain_id tcp
replace rule ip table_id chain_id tcp option sack
replace rule ip table_id chain_id tcp option sack left
replace rule ip table_id chain_id tcp option sack right
replace rule ip table_id chain_id tcp option sack0
replace rule ip table_id chain_id tcp option sack1
replace rule ip table_id chain_id tcp option sack2
replace rule ip table_id chain_id tcp option sack3
replace rule ip table_id chain_id tcp option echo
replace rule ip table_id chain_id tcp option eol
replace rule ip table_id chain_id tcp option fastopen
replace rule ip table_id chain_id tcp option md5sig
replace rule ip table_id chain_id tcp option mptcp
replace rule ip table_id chain_id tcp option mss
replace rule ip table_id chain_id tcp option nop
replace rule ip table_id chain_id tcp option sack-permitted
replace rule ip table_id chain_id tcp option timestamp
replace rule ip table_id chain_id tcp option num
replace rule ip table_id chain_id reset+tcp+option  option num
replace rule ip table_id chain_id gre version
replace rule ip table_id chain_id gre flags
replace rule ip table_id chain_id gre protocol
replace rule ip table_id chain_id gretap ether
replace rule ip table_id chain_id gretap ether saddr
replace rule ip table_id chain_id gretap ether daddr
replace rule ip table_id chain_id gretap ether type
replace rule ip table_id chain_id gretap arp htype
replace rule ip table_id chain_id gretap arp ptype
replace rule ip table_id chain_id gretap arp hlen
replace rule ip table_id chain_id gretap arp plen
replace rule ip table_id chain_id gretap arp operation
replace rule ip table_id chain_id gretap arp saddr ether
replace rule ip table_id chain_id gretap arp saddr ip
replace rule ip table_id chain_id gretap arp daddr ether
replace rule ip table_id chain_id gretap arp daddr ip
replace rule ip table_id chain_id geneve vni
replace rule ip table_id chain_id geneve type
replace rule ip table_id chain_id geneve ether saddr
replace rule ip table_id chain_id geneve ether daddr
replace rule ip table_id chain_id geneve ether type
replace rule ip table_id chain_id geneve arp htype
replace rule ip table_id chain_id geneve arp ptype
replace rule ip table_id chain_id geneve arp hlen
replace rule ip table_id chain_id geneve arp plen
replace rule ip table_id chain_id geneve arp operation
replace rule ip table_id chain_id geneve arp saddr ether
replace rule ip table_id chain_id geneve arp saddr ip
replace rule ip table_id chain_id geneve arp daddr ether
replace rule ip table_id chain_id geneve arp daddr ip
replace rule ip table_id chain_id vxlan vni
replace rule ip table_id chain_id vxlan flags
replace rule ip table_id chain_id vxlan ether saddr
replace rule ip table_id chain_id vxlan ether daddr
replace rule ip table_id chain_id vxlan ether type
replace rule ip table_id chain_id vxlan arp htype
replace rule ip table_id chain_id vxlan arp ptype
replace rule ip table_id chain_id vxlan arp hlen
replace rule ip table_id chain_id vxlan arp plen
replace rule ip table_id chain_id vxlan arp operation
replace rule ip table_id chain_id vxlan arp saddr ether
replace rule ip table_id chain_id vxlan arp saddr ip
replace rule ip table_id chain_id vxlan arp daddr ether
replace rule ip table_id chain_id vxlan arp daddr ip
replace rule ip table_id chain_id dccp sport 
replace rule ip table_id chain_id dccp dport 
replace rule ip table_id chain_id dccp type 
replace rule ip table_id chain_id dccp option 1 
replace rule ip table_id chain_id sctp sport
replace rule ip table_id chain_id sctp dport
replace rule ip table_id chain_id sctp vtag
replace rule ip table_id chain_id sctp checksum
replace rule ip table_id chain_id sctp chunk data 
replace rule ip table_id chain_id sctp chunk data type
replace rule ip table_id chain_id sctp chunk data flags
replace rule ip table_id chain_id sctp chunk data length
replace rule ip table_id chain_id sctp chunk data tsn
replace rule ip table_id chain_id sctp chunk data stream
replace rule ip table_id chain_id sctp chunk data ssn
replace rule ip table_id chain_id sctp chunk data ppid
replace rule ip table_id chain_id sctp chunk init init-tag
replace rule ip table_id chain_id sctp chunk init a-rwnd
replace rule ip table_id chain_id sctp chunk init num-outbound-streams
replace rule ip table_id chain_id sctp chunk init num-inbound-streams
replace rule ip table_id chain_id sctp chunk init initial-tsn
replace rule ip table_id chain_id sctp chunk init-ack init-tag
replace rule ip table_id chain_id sctp chunk init-ack a-rwnd
replace rule ip table_id chain_id sctp chunk init-ack num-outbound-streams
replace rule ip table_id chain_id sctp chunk init-ack num-inbound-streams
replace rule ip table_id chain_id sctp chunk init-ack initial-tsn
replace rule ip table_id chain_id sctp chunk sack
replace rule ip table_id chain_id sctp chunk sack cum-tsn-ack
replace rule ip table_id chain_id sctp chunk sack a-rwnd
replace rule ip table_id chain_id sctp chunk sack num-gap-ack-blocks
replace rule ip table_id chain_id sctp chunk sack num-dup-tsns
replace rule ip table_id chain_id sctp chunk heartbeat
replace rule ip table_id chain_id sctp chunk heartbeat type
replace rule ip table_id chain_id sctp chunk heartbeat flags
replace rule ip table_id chain_id sctp chunk heartbeat length
replace rule ip table_id chain_id sctp chunk heartbeat-ack 
replace rule ip table_id chain_id sctp chunk heartbeat-ack type
replace rule ip table_id chain_id sctp chunk heartbeat-ack flags
replace rule ip table_id chain_id sctp chunk heartbeat-ack length
replace rule ip table_id chain_id sctp chunk abort
replace rule ip table_id chain_id sctp chunk abort type
replace rule ip table_id chain_id sctp chunk abort flags
replace rule ip table_id chain_id sctp chunk abort length
replace rule ip table_id chain_id sctp chunk shutdown
replace rule ip table_id chain_id sctp chunk shutdown type
replace rule ip table_id chain_id sctp chunk shutdown flags
replace rule ip table_id chain_id sctp chunk shutdown length
replace rule ip table_id chain_id sctp chunk shutdown cum-tsn-ack
replace rule ip table_id chain_id sctp chunk shutdown-ack
replace rule ip table_id chain_id sctp chunk shutdown-ack type
replace rule ip table_id chain_id sctp chunk shutdown-ack flags
replace rule ip table_id chain_id sctp chunk shutdown-ack length
replace rule ip table_id chain_id sctp chunk error
replace rule ip table_id chain_id sctp chunk error type
replace rule ip table_id chain_id sctp chunk error flags
replace rule ip table_id chain_id sctp chunk error length
replace rule ip table_id chain_id sctp chunk cookie-ack
replace rule ip table_id chain_id sctp chunk cookie-ack type
replace rule ip table_id chain_id sctp chunk cookie-ack flags
replace rule ip table_id chain_id sctp chunk cookie-ack length
replace rule ip table_id chain_id sctp chunk cookie-echo
replace rule ip table_id chain_id sctp chunk cookie-echo type
replace rule ip table_id chain_id sctp chunk cookie-echo flags
replace rule ip table_id chain_id sctp chunk cookie-echo length
replace rule ip table_id chain_id sctp chunk ecne 
replace rule ip table_id chain_id sctp chunk ecne lowest-tsn
replace rule ip table_id chain_id sctp chunk cwr
replace rule ip table_id chain_id sctp chunk cwr lowest-tsn
replace rule ip table_id chain_id sctp chunk shutdown-complete
replace rule ip table_id chain_id sctp chunk shutdown-complete type
replace rule ip table_id chain_id sctp chunk shutdown-complete flags
replace rule ip table_id chain_id sctp chunk shutdown-complete length
replace rule ip table_id chain_id sctp chunk asconf-ack
replace rule ip table_id chain_id sctp chunk asconf-ack seqno
replace rule ip table_id chain_id sctp chunk asconf-ack type
replace rule ip table_id chain_id sctp chunk asconf-ack flags
replace rule ip table_id chain_id sctp chunk asconf-ack length
replace rule ip table_id chain_id sctp chunk forward-tsn new-cum-tsn
replace rule ip table_id chain_id sctp chunk asconf 
replace rule ip table_id chain_id sctp chunk asconf seqno
replace rule ip table_id chain_id sctp chunk asconf type
replace rule ip table_id chain_id sctp chunk asconf flags
replace rule ip table_id chain_id sctp chunk asconf length
reset counters MyIpTable MyChain
reset counters ip MyIpTable MyChain
reset counters ip6 MyIpTable MyChain
reset counters inet MyIpTable MyChain
reset counters netdev MyIpTable MyChain
reset counters bridge MyIpTable MyChain
reset counters arp MyIpTable MyChain
reset counters table MyIpTable MyChain
reset counters table ip MyIpTable MyChain
reset counters table ip6 MyIpTable MyChain
reset counters table inet MyIpTable MyChain
reset counters table netdev MyIpTable MyChain
reset counters table bridge MyIpTable MyChain
reset counters table arp MyIpTable MyChain
reset quotas 
reset quotas MyIpTable MyChain
reset quotas ip MyIpTable MyChain
reset quotas ip6 MyIpTable MyChain
reset quotas inet MyIpTable MyChain
reset quotas netdev MyIpTable MyChain
reset quotas bridge MyIpTable MyChain
reset quotas arp MyIpTable MyChain
reset quotas table MyIpTable MyChain
reset quotas table ip MyIpTable MyChain
reset quotas table ip6 MyIpTable MyChain
reset quotas table inet MyIpTable MyChain
reset quotas table netdev MyIpTable MyChain
reset quotas table bridge MyIpTable MyChain
reset quotas table arp MyIpTable MyChain
reset counter tablename chainname
reset counter ip tablename chainname
reset counter ip6 tablename chainname
reset counter inet tablename chainname
reset counter netdev tablename chainname
reset counter bridge tablename chainname
reset counter arp tablename chainname
reset quota tablename chainame
reset quota ip tablename chainname
reset quota ip6 tablename chainname
reset quota inet tablename chainname
reset quota netdev tablename chainname
reset quota bridge tablename chainname
reset quota arp tablename chainname
reset rules 
reset rules;
reset rules ;
reset rules ; 
reset rules  ;  
reset rules ip 
reset rules ip6 
reset rules inet 
reset rules netdev 
reset rules bridge 
reset rules arp 
reset rules ip;
reset rules ip6 ;
reset rules inet ; 
reset rules netdev; 
reset rules bridge ;
reset rules arp  ;  
reset rules myTable  # unexpected table_identifier
reset rules ip myTabl  # unexpected table_identifier
reset rules ip myTable myChain  # unexpected table_identifier
reset rules table T
reset rules table T;
reset rules table T ;
reset rules table T; 
reset rules table T ; 
reset rules table a  ;
reset rules table last  
reset rules table myTable last # extraneous 'last' keyword
reset rules table myTable myChain  # extraneous chain_id
reset rules chain  
reset rules chain;
reset rules chain ;
reset rules chain ; 
reset rules chain  ; 
reset rules chain myTable myChain
reset rules chain last myChain
reset rules chain myTable last
reset rules chain last last
reset rules chain myTable  # missing chain_identifier
reset rules chain myTable; # missing chain_identifier
reset rules chain myTable;  # missing chain_identifier
reset rules chain myTable ;  # missing chain_identifier
reset rule ip T C handle 15
reset rule ip T C index 15
reset rule ip T C position 15
reset map table_id set_id $variable
reset map table_id set_id { eth0 }
reset map ip table_id set_id { eth0 }
reset map ip6 table_id set_id { eth0 }
reset map inet table_id set_id { eth0 }
reset map netdev table_id set_id { eth0 }
reset map bridge table_id set_id { eth0 }
reset map arp table_id set_id { eth0 }
reset map table_id set_id handle 123
reset map ip table_id set_id handle 123
reset map ip6 table_id set_id handle 123
reset map inet table_id set_id handle 123
reset map netdev table_id set_id handle 123
reset map bridge table_id set_id handle 123
reset map arp table_id set_id handle 123

reset rule  # premature EOS
reset rule table_id  # premature EOS
reset rule table_id chain_id # premature EOS
reset rule ip  # premature EOS
reset rule ip6  # premature EOS
reset rule inet  # premature EOS
reset rule netdev  # premature EOS
reset rule bridge  # premature EOS
reset rule arp  # premature EOS
reset rule ip ipT    # premature EOS
reset rule ip T C   # premature EOS
reset rule ip T C offset 15  # wrong handle_spec

reset rules table /  ;  # invalid table_id
add rule T C rt classid 
add rule T C rt nexthop 
add rule T C rt mtu 
add rule T C rt ipsec 


add rule T C rt ip classid 


add rule T C rt ip6 classid 


T C handle 2
ip  T      C     position  1
ip6 filter input handle 2
arp T C index 3
inet T C position 4
bridge T C position 55555
netdev T C position 6
 netdev Tabcdef Charger position 6

rule T C handle 2
rule ip  T      C     position  1
rule ip6 filter input handle 2
rule arp T C index 3
rule inet T C position 4
rule bridge T C position 55555
rule netdev T C position 6
 rule netdev Tabcdef Charger position 6
add rule ip  T      C     position  1
add rule ip6 filter input handle 2
add rule arp T C index 3
add rule inet T C position 4
add rule bridge T C position 55555
add rule netdev T C position 6
add rule netdev Tabcdef Charger position 6
add rule ip6 myTable myChain position 1 ct l3proto set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct proto set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct mark set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct state set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct direction set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct status set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct expiration set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct helper set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct saddr set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct daddr set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct proto-src set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct proto-dst set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct label set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct event set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct secmark set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct id set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct bytes set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct packets set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct avgpkt set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct zone set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct bytes set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct packets set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct avgpkt set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct zone set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct original bytes set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct original packets set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct original avgpkt set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct original zone set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct reply bytes set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct reply packets set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct reply avgpkt set ip6 myIpTable myCTHchain { };
add rule ip6 myTable myChain position 1 ct reply zone set ip6 myIpTable myCTHchain { };
rule table_id chain_id log
add rule table_id chain_id log
tableid chainid vmap 
table_id chain_id vmap
table_id chain_id vmap { }
table_id chain_id vmap at ABC
tableid chainid match 
tableid chainid ip hdrlength
tableid chainid counter bytes 512
tableid chainid counter packets 3
tableid chainid limit rate
tableid chainid quota  
tableid chainid ct count 1
tableid chainid ct count over 15
tableid chainid last
add rule tableid chainid last
tableid chainid last used
tableid chainid last used never
tableid chainid last used 1h
tableid chainid log
tableId chainId log prefix
tableId chainId log group 15
tableId chainId log snaplen 512
tableId chainId log queue-threshold 5
tableId chainId log level log_string
tableId chainId log flags tcp seq
tableId chainId log flags tcp seq,options
tableId chainId log flags tcp options,seq
tableId chainId log flags tcp options
tableId chainId log flags ip options
tableId chainId log flags skuid
tableId chainId log flags ether
tableId chainId log flags all
tableId chainId reject 
tableId chainId snat 
tableId chainId dnat 
tableId chainId masq 
tableId chainId redir 
tableId chainId tproxy 
tableId chainId queue 
tableId chainId ct over
tableId chainId dup 
tableId chainId fwd 
tableId chainId set 
tableId chainId map 
tableId chainId synproxy over
tableId chainId chain 
tableId chainId optstrip 
tableId chainId xt 
tableId chainId counter name
tableid chainid limit name
add rule filter output ip daddr
add rule filter output position 8 ip daddr 127.0.0.8 drop
insert rule filter output position 8 ip daddr 127.0.0.8 drop
delete rule filter output handle 5
delete rule filter output ip saddr 192.168.1.1 counter  # not implemented yet
ip table_identifier chain_identifier
ip6 table_identifier chain_identifier
inet table_identifier chain_identifier
netdev table_identifier chain_identifier
bridge table_identifier chain_identifier
arp table_identifier chain_identifier

ip table_identifier chain_identifier
ip6 table_identifier chain_identifier
inet table_identifier chain_identifier
netdev table_identifier chain_identifier
bridge table_identifier chain_identifier
arp table_identifier chain_identifier

identifier_table chain_identifier drop
identifier_table chain_identifier accept
identifier_table chain_identifier continue

identifier_table chain_identifier return

identifier_table chain_identifier position 15

identifier_table chain_identifier handle 7

identifier_table chain_identifier index 1

table_id chain_id log prefix asdf
rule table_id chain_id log 
add rule table_id chain_id log 
tableid chainid log 
tableId chainId log prefix mynote 
tableId chainId log group 15
tableId chainId log snaplen 512
tableId chainId log queue-threshold 5
tableId chainId log level log_string
tableId chainId log flags tcp seq
tableId chainId log flags tcp seq,options
tableId chainId log flags tcp options,seq
tableId chainId log flags tcp options
tableId chainId log flags ip options
tableId chainId log flags skuid
tableId chainId log flags ether 
tableId chainId log flags all
secmark table_id
secmark myTable mySecMark 
secmark obj_spec secmark_obj { secmark_block } close_scope_secmark
secmark T SM { define my_var; };
secmark T SM { typeof b.c.d.e.f : secmark  };
secmark myTable sshtag { "system_u:object_r:ssh_server_packet_t:s0" }
add secmark table_id
add secmark myTable mySecMark 
add secmark obj_spec secmark_obj { secmark_block } close_scope_secmark
add secmark T SM { define my_var; };
add secmark T SM { typeof b.c.d.e.f : secmark  };
add secmark myTable sshtag { "system_u:object_r:ssh_server_packet_t:s0" }
create secmark myTable mySecMark 'asdf \'asdd"asdfdf'
create secmark myTable mySecMark 'asdf \'asddfasdfdf'
create secmark myTable mySecMark 'a:;fasddfa()fdf' ;
create secmark myTable mySecMark "asdf \"dfa[]fdf"
create secmark myTable mySecMark "asdf \"dfa'dfdf"
create secmark ip myTable mySecMark an unconstrained string
create secmark ip myTable mySecMark an unconstrained string ;
create secmark obj_spec secmark_obj secmark_config close_scope_secmark
delete secmark T secmark_name 
delete secmark table_name secmark_name 
delete secmark ip table_name secmark_name
delete secmark ip6 table_name secmark_name
delete secmark inet table_name secmark_name
delete secmark arp table_name secmark_name
delete secmark bridge table_name secmark_name
delete secmark netdev table_name secmark_name
delete secmark T handle 15
delete secmark table_name handle 15
delete secmark ip table_name handle 15
delete secmark ip6 table_name handle 15
delete secmark inet table_name handle 15
delete secmark arp table_name handle 15
delete secmark bridge table_name handle 15
delete secmark netdev table_name handle 15
destroy secmark arp T handle 15
destroy secmark arp T secmark_name
destroy secmark bridge T handle 15
destroy secmark bridge T secmark_name
destroy secmark inet T handle 15
destroy secmark inet T secmark_name
destroy secmark ip6 T handle 15
destroy secmark ip6 T secmark_name
destroy secmark ip T handle 15
destroy secmark ip T secmark_name
destroy secmark netdev T handle 15
destroy secmark netdev T secmark_name
list secmark table ruleset_spec
list secmark table table_name
list secmark table_id secmark_id
list secmark ip table_id secmark_id
list secmark ip6 table_id secmark_id
list secmark inet table_id secmark_id
list secmark netdev table_id secmark_id
list secmark bridge table_id secmark_id
list secmark arp table_id secmark_id
list secmarks 
list secmarks ip 
list secmarks ip6
list secmarks inet 
list secmarks netdev 
list secmarks bridge 
list secmarks arp 
list secmarks table table_id
list secmarks table ip table_id
list secmarks table ip6 table_id
list secmarks table inet table_id
list secmarks table netdev table_id
list secmarks table bridge table_id
list secmarks table arp table_id

add rule T C ct secmark
add rule ip6 myTable myChain position 1 ct secmark set ip6 myIpTable myCTHchain { };
add rule ip6 table_id myChain position 1 ct secmark zone set ip6 table_id myCTHchain { };
table T {
    chain C {
        type filter hook input priority 0; policy $MY_POLICY
    }
    chain C {
        tcp a b c
        comment "Chain C is really something"
        type filter hook input priority 0; policy accept
        flags offload 
        devices = { eth0, eth1, eth2 };

    } ;
}

table T {
    chain C {
        type filter hook input priority 0; policy DROP;
    }
    chain C1 {
        type filter hook input priority $MY_PRIORITY; policy DROP ;
    }
    chain C2 {
        type filter hook input device $MYDEV priority -100; policy ACCEPT
    }
    chain C3 {
        type filter hook input device eth0 priority $MY_PRIORITY; policy $MY_POLICY
    }
    chain C4 {
        type filter hook input device eth0 priority 0; policy $MY_POLICY
    }
    chain C5 {
        type filter hook input device eth0 priority 0; policy $MY_POLICY
    }
    chain C6 {
        type filter hook input devices = $MY_DEVICES_SET priority 0;
        policy $MY_POLICY
    }
    chain C11 {
        type filter hook input devices = { "asdf" } priority 0;
        policy $MY_POLICY
    }
    chain C12 {
        type filter hook input devices = { 'asdf' } priority 0; policy $MY_POLICY
    }
    chain C13 {
        type filter hook input devices = { $WAN_DEV } priority 0; policy $MY_POLICY
    }
    chain C14 {
        type filter hook input devices = { abc } priority 0; policy $MY_POLICY
    }
    chain C15 {
        type filter hook input devices = { "asdf", 'asdf', abc, $WAN_DEV, $LAN_DEV, $DMZ_DEV } priority 0; policy $MY_POLICY
    }
}
tableid chainid accept 
tableid chainid accept 
tableid chainid drop 
tableid chainid continue 
tableid chainid jump myChainId
tableid chainid jump last
tableid chainid jump $MY_ACTION
tableid chainid goto hisChainId
tableid chainid goto last
tableid chainid goto $MY_ACTION
tableid chainid return 
rule table_id chain_id vmap { }
rule table_id chain_id vmap { } ;
add rule table_id chain_id vmap  
add rule table_id chain_id vmap; 
add rule table_id chain_id vmap { }
add rule table_id chain_id vmap { };
add rule table_id chain_id vmap { }
add rule table_id chain_id vmap { } ; 
add rule table_id chain_id vmap at ABC
add rule table_id chain_id vmap at ABC  ;

table myTable {
    chain my_chain {
        ip tcp option echo
        ip tcp option sack 
