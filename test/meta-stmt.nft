#!/usr/sbin/nft -f
# File: meta-stmt.nft
# Description: A test NFT file to exercise 'set meta' Vim syntax highlightings.
#
# If it's followed by a set, it's likely meta_stmt. 
# If it's followed by a field name and then a comparison (==, <, etc.),
# it's meta_expr.
#
# meta_stmt is followed by a set.
# meta_expr is followed by a comparison.
# meta_expr is followed by a field name.
#
#     meta subkey  Operand Type  Notes / Example
#     iif          integer       Interface index
#     oif          integer       Interface index
#     iifname      string        "eth0"
#     oifname      string        "wlan0"
#     iifgroup     integer       Interface group ID
#     oifgroup     integer       Interface group ID
#     iiftype      integer       Interface type (see Linux if_arp.h)
#     oiftype      integer       Interface type
#     ibrname      string        Ingress bridge name
#     obrname      string        Egress bridge name
#     ibriport     string        Ingress bridge port name
#     obriport     string        Egress bridge port name
#     mark         integer       Packet mark
#     priority     integer       Priority of packet (qdisc)
#     length       integer       Packet length
#     protocol     integer/symbolic    Layer 4 protocol (e.g., tcp)
#     pkttype      symbolic      unicast, broadcast, multicast
#     nfproto      symbolic      ip, ip6, inet, etc.
#     rtclassid    integer       Routing class ID
#     skuid        integer       Socket UID
#     skgid        integer       Socket GID
#     secmark      integer       SELinux security mark
#     nftrace      boolean (0/1)    Packet tracing flag
#     cgroup       integer       CGroup v2 classid
#     ipsec        boolean (0/1)    Whether packet is IPsec encapsulated
#     cpu          integer       CPU ID that handled the packet
#     time         integer       Seconds since epoch
#     day          symbolic      monday, tuesday, ..., sunday
#     hour         integer (0–23)    Hour of day
#
# 'meta' keyword is almost always followed by a value (except for 'random', 'nftrace', 'ipsec')
#
# There are a few meta keys that do not require a value and behave like flags:
#    Meta key    Notes
#    random      Used as a condition; no operand
#    nftrace     Used as a condition; defaults to "set"
#    ipsec       Acts like a boolean flag in conditionals
#
# But in some contexts (like expressions), they may still support an explicit value:
# 
# meta nftrace == 1
# meta ipsec == 0
# 
# So:
# 
#     In statements, meta nftrace can appear without a value.
# 
#     In expressions, it usually appears with == 0/1 or similar.
#
#     Form               Requires Operand?    Example
#     meta iifname       ✅ Yes               meta iifname "eth0"
#     meta rtclassid     ✅ Yes               meta rtclassid 10
#     meta random        ❌ No                meta random
#     meta nftrace       ❌ No (usually)      meta nftrace
#     meta nftrace == 1  ✅ Yes (expr)        meta nftrace == 1
#     meta ipsec         ❌/✅ Depends        meta ipsec or meta ipsec 0
#
# Key Diagnostic: Try putting meta xyz in a log or set
# 
#    If it makes sense to assign or print it, it’s being used as a meta_expr.
#
#    If it makes sense to use as a match, it’s a meta_stmt.
#
#⚠️ Gotchas
#
#    You cannot write meta random as a meta_expr. It’s only valid as a statement.
#
#    Some meta keys like secmark, nftrace, random are statement-only, not expressions.
#
################################################################################
# true positive test: properly hightlighted correctly; has good content; perfect
################################################################################

# meta_stmt
#
# meta_stmt - flags only (support expression only in meta_expr)
rule T C meta random;  # qualified META (requires 'meta' before it)
rule T C ipsec;  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec;  # 'meta ipsec 0' only in meta_expr
rule T C nftrace;  # 'meta nftrace == 1' only in meta_expr
rule T C meta nftrace;  # 'meta nftrace == 1' only in meta_expr

# meta_stmt - INTERNALS; found in scanner.c (not in parser_bison.y)
# 'meta nfproto' is integer or string (as listed in /etc/protocol)
rule inet T C meta nfproto 1;
rule inet T C meta nfproto 1;
rule inet T C meta nfproto inet;
rule inet T C meta nfproto 2;
rule inet T C meta nfproto ip;
rule inet T C meta nfproto 3;
rule inet T C meta nfproto arp;
rule inet T C meta nfproto 7;
rule inet T C meta nfproto bridge;
rule inet T C meta nfproto 10;
rule inet T C meta nfproto ip6;
rule inet T C meta nfproto 12;
rule inet T C meta nfproto netdev;
# 'meta l4proto' is integer or string (as listed in Linux kernel include/uapi/linux/netfilter.h)
rule inet T C meta l4proto 1;
rule inet T C meta l4proto icmp;
rule inet T C meta l4proto 6;
rule inet T C meta l4proto tcp;
rule inet T C meta l4proto 17;
rule inet T C meta l4proto udp;

# meta_stmt - unqualified META, with a value (no 'meta' needed)
rule T C mark 64;  # length
rule T C iif 2;
rule T C iifname "eth0";
rule T C iiftype 1;
rule T C oif 4;
rule T C oifname "wlan0";
rule T C oiftype 1;
rule T C skgid 14;
rule T C skuid 14;
rule T C rtclassid 14;
rule T C ibriport "br0";
rule T C obriport "br1";
rule T C ibrname "under-bridge";
rule T C obrname under-bridge;
rule T C pkttype != broadcast;
rule T C cpu 1;
rule T C iifgroup 0;
rule T C oifgroup 0;
rule T C cgroup 1048577;
rule T C time 12;
rule T C day sunday;
rule T C hour 23;
rule T C hour 15;

# meta_stmt - unqualified META, with a value (optional 'meta' used here)
rule T C meta mark 64;  # length
rule T C meta mark 0x4;
rule T C meta mark 0x1234;
rule T C meta mark 0x00000032;
rule T C meta iif 2;
rule T C meta iifname "eth0";
rule T C meta iifname { "eth0", "lo" };
# iiftype/oiftype are listed in Linux kernel linux/if_arp.h file.
rule T C meta iiftype 1;
rule T C meta iiftype != 772;
rule T C meta iiftype { 1, 772, 65534, 512, 801, 768, 6, 32 };
rule T C meta oif 4;
rule T C meta oifname "wlan0";
rule T C meta oifname { "eth0", "lo" };
rule T C meta oiftype 1;
rule T C meta oiftype != 772;
rule T C meta oiftype { 1, 772, 65534, 512, 801, 768, 6, 32 };
rule T C meta skgid 14;
rule T C meta skgid != 2001-2005;
rule T C meta skgid { 2001-2005 };
rule T C meta skgid 3001-3005;
rule T C meta skgid { bin, root, daemon };
rule T C meta skgid eq 3000;
rule T C meta skgid gt 3000;
rule T C meta skgid lt 3000;
rule T C meta skgid != root;
rule T C meta skgid root;
rule T C meta skuid 14;
rule T C meta skuid != 2001-2005;
rule T C meta skuid { 2001-2005 };
rule T C meta skuid 3001-3005;
rule T C meta skuid { bin, root, daemon };
rule T C meta skuid eq 3000;
rule T C meta skuid gt 3000;
rule T C meta skuid lt 3000;
rule T C meta skuid != root;
rule T C meta skuid root;
# 'meta nftace' requires no argument, but still 'unqualified' (no 'meta' needed).
# 'meta rtclassid' is used with 'realm' keyword, mnemonics are in /etc/iproute2/rt_realms
rule T C meta rtclassid 14;
rule T C meta ibriport "br0";
rule T C meta obriport "br1";
rule T C meta ibrname "under-bridge";
rule T C meta ibrname "br0";
rule T C meta obrname under-bridge;
rule T C meta pkttype != broadcast;
rule T C meta pkttype broadcast;
rule T C meta pkttype { broadcast, unicast, multicast };
rule T C meta cpu 1;
rule T C meta cpu != 1;
rule T C meta cpu 1-3;
rule T C meta cpu != 1-2;
rule T C meta cpu { 2,3 };
rule T C meta cpu { 2-3, 5-7 };
rule T C meta iifgroup 0;
rule T C meta iifgroup != 0;
rule T C meta iifgroup != 0;
rule T C meta iifgroup default;
rule T C meta iifgroup != default;
rule T C meta iifgroup { 11,33 };
rule T C meta iifgroup { default };
rule T C meta oifgroup != 0;
rule T C meta oifgroup 0;
rule T C meta oifgroup { 11,33 };
rule T C meta oifgroup { 11-33 };
rule T C meta oifgroup != default;
rule T C meta oifgroup { default };
rule T C meta oifgroup default;
rule T C meta cgroup 1048577;
rule T C meta cgroup 1048577-1048578;
rule T C meta cgroup != 1048577;
rule T C meta cgroup != 1048577-1048578;
rule T C meta cgroup { 1048577, 1048578 };
rule T C meta cgroup { 1048577-1048578 };
rule T C meta time 12;
rule T C meta day Monday;
rule T C meta day saturday;
rule T C meta hour 23;
rule T C meta hour 15;

# meta_stmt - qualified META, with a value (requires 'meta' before it)
rule T C meta length 1512;
rule T C meta length != 1000;
rule T C meta length > 1000;
rule T C meta length != 33-45;
rule T C meta length 33-45;
rule T C meta length { 33, 55, 67, 88 };
rule T C meta length { 33-55, 67-88 };
rule T C meta protocol dccp;
rule T C meta protocol != ip;
rule T C meta protocol ip;
rule T C meta protocol { ip, arp, ip6, vlan };
rule T C meta protocol tcp;
rule T C meta priority none;
rule T C meta priority 100;  # length
rule T C meta priority 0x1;
rule T C meta priority 0x1:0x1;
rule T C meta priority 0x1:0xffff;
rule T C meta priority 0xffff;
rule T C meta priority 0xffff:0xffff;
rule T C meta priority set 0x1:0x1;
rule T C meta priority set 0x1:0xffff;
rule T C meta priority set 0xffff:0xffff;
rule T C meta priority none ip saddr vmap @subnet_map counter packets 0 bytes 0;
rule T C meta secmark 14;
rule T C meta secmark 42;


################################################################################
# true negative test: properly hightlighted wrongly to show an error;
# so far, so good)
################################################################################

rule T C meta iif lo accept;
rule T C meta iif eth0;
rule T C meta iif != eth0;
rule T C meta oif != lo;
rule T C meta oif lo;

rule T C meta iifname "eth*";
rule T C meta oifname "eth*";

rule T C meta iiftype ether;
rule T C meta iiftype != ether;
rule T C meta iiftype { ether, ppp, ipip, ipip6, loopback, sit, ipgre };
rule T C meta iiftype wlan;

rule T C meta oiftype ether;
rule T C meta oiftype != ether;
rule T C meta oiftype { ether, ppp, ipip, ipip6, loopback, sit, ipgre };
rule T C meta oiftype wlan;

rule T C meta skgid 99999999999;
rule T C meta skuid 99999999999;

rule T C meta rtclassid cosmos;  # no mnemonic in 'meta rtclassid', but you can with 'realm'

################################################################################
# false negative test: highlighted wrongly; still has good content; oops.
################################################################################

################################################################################
# false positive test: looks highlighted correctly; has bad content; oops.
################################################################################

rule inet T C meta nfproto != 6;
rule inet T C meta nfproto { 1, 2, 10 };
rule inet T C meta nfproto ipv4;
rule inet T C meta nfproto != ipv6;
rule inet T C meta nfproto { inet,ipv4,ipv6 };

rule inet T C meta l4proto != 233;
rule inet T C meta l4proto 33-45;
rule inet T C meta l4proto { 33, 55, 67, 88 };
rule inet T C meta l4proto { 33-55 };

rule T C meta mark and 0x03 == 0x01;
rule T C meta mark and 0x03 != 0x01;
rule T C meta mark != 0x10;
rule T C meta mark or 0x03 == 0x01;
rule T C meta mark or 0x03 != 0x01;
rule T C meta mark xor 0x03 == 0x01;
rule T C meta mark xor 0x03 != 0x01;;
rule T C meta mark set 0xffffffc8 xor 0x16;
rule T C meta mark set 0x16 and 0x16;
rule T C meta mark set 0xffffffe9 or 0x16;
rule T C meta mark set 0xffffffde and 0x16;
rule T C meta mark set 0x32 or 0xfffff;
rule T C meta mark set 0xfffe xor 0x16;

rule T C meta iifname != "eth0";
rule T C meta iifname eth0;

rule T C meta oifname wlan0;
rule T C meta oifname != "eth0";
# XXXXXX
# meta_stmt - no value
rule T C meta random 1234;  # qualified META (requires 'meta' before it)
rule T C meta random abc;  # qualified META (requires 'meta' before it)

rule T C ipsec 1234;  # 'meta ipsec 0' only in meta_expr
rule T C meta ipsec 1234;  # 'meta ipsec 0' only in meta_expr
rule T C nftrace 1234;  # 'meta nftrace == 1' only in meta_expr
rule T C meta nftrace 1234;  # 'meta nftrace == 1' only in meta_expr

# meta_stmt - INTERNALS; found in scanner.c (not in parser_bison.y)
rule inet T C meta nfproto;
rule inet T C meta nfproto abcde;
rule inet T C meta l4proto;
rule inet T C meta l4proto abc;
rule inet T C meta l4proto { };
rule inet T C meta l4proto { abc };

# meta_stmt - unqualified META, with a value (no 'meta' needed)
rule T C meta mark;
rule T C meta mark != abc;
rule T C meta mark or 0x03 == tcp;
rule T C meta mark or tcp == tcp;
rule T C meta mark set 0xffffffc8 xor abc;
rule T C meta mark set abc and 0x16;
rule T C meta mark set 0xffffffe9 or abc;
rule T C meta iif;
rule T C meta iifname;
rule T C meta oif;
rule T C meta oifname;
rule T C meta oifname { };
rule T C meta oiftype;
rule T C meta skgid;
rule T C meta skgid { };
rule T C meta skgid { abc };
rule T C meta skgid abc-3001;
rule T C meta skgid 3001-abc;
rule T C meta skuid;
rule T C meta skuid { };
rule T C meta skuid { abc };
rule T C meta skuid abc-3001;
rule T C meta skuid 3001-abc;
# 'meta nftace' requires no argument, but still 'unqualified' (no 'meta' needed).
rule T C meta rtclassid;
rule T C meta ibriport;
rule T C meta obriport;
rule T C meta ibrname;
rule T C meta ibrname;
rule T C meta obrname;
rule T C meta pkttype;
rule T C meta cpu;
rule T C meta cpu abc;
rule T C meta cpu abc-2;
rule T C meta cpu 1-abc;
rule T C meta cpu != abc-2;
rule T C meta cpu { };
rule T C meta cpu { abc };
rule T C meta iifgroup;
rule T C meta iifgroup { };
rule T C meta oifgroup;
rule T C meta oifgroup { };
rule T C meta cgroup;
# 'meta ipsec' requires no argument, but still 'unqualified' (no 'meta' needed).
rule T C meta time;
rule T C meta day;
rule T C meta hour;

# meta_stmt - qualified META, with a value (requires 'meta' before it)
rule T C meta length;
rule T C meta length abc-45;
rule T C meta length 33-abc;
rule T C meta length { };
rule T C meta protocol;
rule T C meta priority;
rule T C meta priority abc;
rule T C meta priority set 0x1:abc;
rule T C meta priority set abc:0xffff;
rule T C meta secmark;
rule T C meta secmark;
# 'meta random' - qualified META, but without a value
